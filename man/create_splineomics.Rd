% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/splineomics_object.R
\name{create_splineomics}
\alias{create_splineomics}
\title{Create an object containing variables often used by SplineOmics functions}
\usage{
create_splineomics(
  data,
  meta,
  condition,
  rna_seq_data = NULL,
  annotation = NULL,
  report_info = NULL,
  meta_batch_column = NULL,
  meta_batch2_column = NULL,
  feature_name_columns = NULL,
  design = NULL,
  use_array_weights = FALSE,
  dream_params = NULL,
  mode = "isolated",
  spline_params = NULL,
  padjust_method = "BH",
  bp_cfg = NULL
)
}
\arguments{
\item{data}{\code{matrix}: The actual omics data. If the \code{rna_seq_data} argument
is
used, still provide this argument. In that case, input the data matrix here
(for example, the \verb{$E} part of a \code{voom} object). Assign your feature names as
row headers; otherwise, numeric indices will be used.}

\item{meta}{\code{data.frame}: Metadata associated with the omics data.}

\item{condition}{\code{character(1)}: Condition variable describing the
experimental groups.}

\item{rna_seq_data}{\code{list} | \code{NULL}: An object containing the preprocessed
RNA-seq data, such as the output from \code{limma::voom} or a similar pipeline.
This argument is not validated directly; input checks rely on
\code{limma::lmFit()}.}

\item{annotation}{\code{data.frame} | \code{NULL}: Feature annotations (optional)
providing descriptive information about each feature in \code{data}.}

\item{report_info}{\code{list}: Named list describing the experiment. Must include
the following fields (all \code{character(1)}):
\itemize{
\item \code{"omics_data_type"}
\item \code{"data_description"}
\item \code{"data_collection_date"}
\item \code{"analyst_name"}
\item \code{"contact_info"}
\item \code{"project_name"}
}

Optional fields (all \code{character(1)}):
\itemize{
\item \code{"method_description"}
\item \code{"results_summary"}
\item \code{"conclusions"}
}}

\item{meta_batch_column}{\code{character(1)} | \code{NULL}: Column name in \code{meta}
specifying batch information (optional).}

\item{meta_batch2_column}{\code{character(1)} | \code{NULL}: Column name in \code{meta}
specifying secondary batch information (optional).}

\item{feature_name_columns}{\code{character()}: Vector of column names from
\code{annotation} that describe the features. Used in the HTML report to define
how feature names displayed above each spline plot were created. Use the same
vector that was used to create the row headers for the data matrix.}

\item{design}{\code{matrix} | \code{NULL}: Design matrix or similar object (optional).}

\item{use_array_weights}{\code{logical(1)}: Boolean flag indicating whether to use
the robust fitting strategy to handle heteroskedasticity. If \code{NULL}, this is
determined automatically via the Levene test: if at least 10\% of features are
significant, the robust strategy is enabled. For RNA-seq data, this uses
\code{limma::voomWithQualityWeights()}, otherwise \code{limma::arrayWeights()} with
\code{robust = TRUE} in \code{limma::eBayes()}. These approaches down-weight samples
with higher variance, improving validity of statistical inference.}

\item{dream_params}{\code{list} | \code{NULL}: Optional named list controlling
mixed-model fitting. When not \code{NULL}, may include:
\itemize{
\item \code{dof} \code{integer(1)} Degrees of freedom for the DREAM \code{topTable}.
\item \code{KenwardRoger} \code{logical(1)} Whether to use the Kenward-Roger correction.
}

Random effects are specified directly in the design formula, not here.}

\item{mode}{\code{character(1)}: Either \code{"isolated"} or \code{"integrated"}. Determines
whether conditions are analysed independently (\code{"isolated"}) or jointly
(\code{"integrated"}). The integrated mode fits a single model across all levels.}

\item{spline_params}{\code{list} | \code{NULL}: Parameters for spline functions.
Must contain:
\itemize{
\item \code{spline_type}: \code{character(1)} \code{"n"} for natural cubic or \code{"b"} for
B-splines.
\item \code{dof}: \code{integer(1)} Degrees of freedom. If set to \code{0},
\code{SplineOmics} automatically determines the best value using
leave-one-out cross-validation.
\item \code{degree}: \code{integer(1)} Degree of the spline (B-splines only).
}}

\item{padjust_method}{\code{character(1)}: Method for p-value adjustment. One of
\code{"none"}, \code{"BH"}, \code{"BY"}, \code{"holm"}, \code{"bonferroni"}, \code{"hochberg"}, or
\code{"hommel"}. Defaults to \code{"BH"} (Benjaminiâ€“Hochberg).}

\item{bp_cfg}{\code{numeric()} | \code{NULL}: Named numeric vector specifying
parallelization settings, with expected names \code{"n_cores"} and
\code{"blas_threads"}. Controls the number of R worker processes (\code{n_cores}) and
BLAS/OpenBLAS threads per process (\code{blas_threads}). If \code{bp_cfg} is \code{NULL} or
missing, both default to \code{1}, disabling parallelization and avoiding thread
oversubscription.}
}
\value{
A SplineOmics object.
}
\description{
Creates a SplineOmics object containing variables that are commonly used
across multiple functions in the package. This object is then passed as an
argument to the other functions of this package.
}
\examples{
set.seed(1)

# 6 samples, 4 features
toy_data <- matrix(
    rnorm(4 * 6, mean = 0, sd = 1),
    nrow = 4, ncol = 6,
    dimnames = list(
        paste0("gene", 1:4),
        paste0("S", 1:6)
    )
)

# Sample metadata
toy_meta <- data.frame(
    SampleID = colnames(toy_data),
    Time = c(0, 0, 1, 1, 2, 2),
    Condition = factor(c("Ctrl", "Ctrl", "Ctrl", "Trt", "Trt", "Trt"),
        levels = c("Ctrl", "Trt")
    ),
    Batch = factor(c("B1", "B1", "B1", "B2", "B2", "B2")),
    stringsAsFactors = FALSE,
    row.names = colnames(toy_data)
)

# Condition vector (must align with samples)
cond <- toy_meta$Condition

# Minimal annotation (feature-level info)
toy_anno <- data.frame(
    feature_id = rownames(toy_data),
    symbol = c("G1", "G2", "G3", "G4"),
    stringsAsFactors = FALSE,
    row.names = rownames(toy_data)
)

# Spline parameters (natural splines with df = 3)
toy_spline <- list(spline_type = "n", dof = 3)

# Parallel config (single-threaded for examples)
toy_bp <- c(n_cores = 1, blas_threads = 1)

# Dream params example (optional)
toy_dream <- list(dof = 3L, KenwardRoger = FALSE)

# Simple design matrix (intercept + condition + time)
toy_design <- stats::model.matrix(~ Condition + Time, data = toy_meta)

# Required report fields
toy_report <- list(
    omics_data_type = "RNA-seq (toy)",
    data_description = "Simulated expression matrix (4x6)",
    data_collection_date = "2025-10-07",
    analyst_name = "Analyst A",
    contact_info = "analyst@example.org",
    project_name = "SplineOmics Demo",
    method_description = "Toy example to construct a SplineOmics object"
)

so <- create_splineomics(
    data                 = toy_data,
    meta                 = toy_meta,
    condition            = cond,
    rna_seq_data         = NULL, # not used in this toy
    annotation           = toy_anno,
    report_info          = toy_report,
    meta_batch_column    = "Batch",
    meta_batch2_column   = NULL,
    feature_name_columns = c("feature_id", "symbol"),
    design               = toy_design,
    use_array_weights    = FALSE,
    dream_params         = toy_dream,
    mode                 = "isolated",
    spline_params        = toy_spline,
    padjust_method       = "BH",
    bp_cfg               = toy_bp
)

class(so)
str(so, max.level = 1)

}
