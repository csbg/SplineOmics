% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils_input_validation.R
\name{InputControl}
\alias{InputControl}
\title{InputControl: A class for controlling and validating inputs}
\description{
InputControl: A class for controlling and validating inputs

InputControl: A class for controlling and validating inputs
}
\details{
This class provides methods to validate the inputs of a function.


The method performs the following checks:

* Ensures that both `annotation` and `data` are provided.
* Confirms that `annotation` is a dataframe.
* Verifies that `annotation` and `data` have the same number of rows.

If any of these checks fail, an informative error message is returned.



- The method first checks if the lengths of \code{designs} and 
\code{modes} 
  are equal. If not, it raises an error.
- It then checks if \code{modes} is \code{NULL}, and if so, the method
 returns 
  without performing any further checks.
- For each mode in \code{modes}, the method sets \code{self$args$mode} 
to the 
  current mode and calls \code{self$check_mode()}.



The function performs the following checks:
- Whether the `clusters` argument is present.
- If `clusters` is a single character string "auto", it defaults to 
automatic 
  cluster estimation and prints a message.
- If `clusters` is not a list or if the list contains non-character and 
  non-numeric types, it throws an error.

Check Plot Info



The method performs the following checks:

* Ensures that `plot_info` is provided and not NULL.
* Confirms that `y_axis_label` is a character vector with maximally 30
 characters.
* Confirms that `time_unit` is a character vector with maximally 15 
characters.
* Validates that `treatment_labels` is either `NA` or a character vector
 with each 
  element being maximally 15 characters long.
* Validates that `treatment_timepoints` is either `NA` or a numeric 
vector with the 
  same length as `treatment_labels` if `treatment_labels` is not `NA`.

If any of these checks fail, an informative error message is returned.



The method performs the following checks:

* Ensures that `analysis_mode` is provided and not NULL.
* Confirms that `analysis_mode` is a character vector of length 1.
* Validates that `analysis_mode` matches one of the allowed values.

If any of these checks fail, an informative error message is returned.



The function performs the following checks:
- Whether the `report` argument is present.
- If `report` is not a Boolean value (`TRUE` or `FALSE`), it throws 
an error.
}
\seealso{
\code{\link{stop}} for error handling.

Check Top Tables

\code{\link{limma}}

Check Modes

This method validates multiple modes by ensuring that the lengths of the 
modes and designs are the same. It then iterates through each mode, 
sets it 
in the class arguments, and calls \code{self$check_mode()} to perform 
the validation for each mode.

\code{\link[stats]{model.matrix}}

Check Multiple Designs and Metas
}
\section{Super classes}{
\code{\link[SplineOmics:Level4Functions]{SplineOmics::Level4Functions}} -> \code{\link[SplineOmics:Level3Functions]{SplineOmics::Level3Functions}} -> \code{\link[SplineOmics:Level2Functions]{SplineOmics::Level2Functions}} -> \code{InputControl}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{args}}{A list of arguments to be validated.

Initialize an InputControl object}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-InputControl-new}{\code{InputControl$new()}}
\item \href{#method-InputControl-auto_validate}{\code{InputControl$auto_validate()}}
\item \href{#method-InputControl-check_data_and_meta}{\code{InputControl$check_data_and_meta()}}
\item \href{#method-InputControl-check_annotation}{\code{InputControl$check_annotation()}}
\item \href{#method-InputControl-check_datas_and_metas}{\code{InputControl$check_datas_and_metas()}}
\item \href{#method-InputControl-check_datas_descr}{\code{InputControl$check_datas_descr()}}
\item \href{#method-InputControl-check_top_tables}{\code{InputControl$check_top_tables()}}
\item \href{#method-InputControl-check_mode}{\code{InputControl$check_mode()}}
\item \href{#method-InputControl-check_modes}{\code{InputControl$check_modes()}}
\item \href{#method-InputControl-check_design_formula}{\code{InputControl$check_design_formula()}}
\item \href{#method-InputControl-check_designs_and_metas}{\code{InputControl$check_designs_and_metas()}}
\item \href{#method-InputControl-check_spline_params}{\code{InputControl$check_spline_params()}}
\item \href{#method-InputControl-check_spline_test_configs}{\code{InputControl$check_spline_test_configs()}}
\item \href{#method-InputControl-check_limma_top_tables}{\code{InputControl$check_limma_top_tables()}}
\item \href{#method-InputControl-check_adj_pthresholds}{\code{InputControl$check_adj_pthresholds()}}
\item \href{#method-InputControl-check_clusters}{\code{InputControl$check_clusters()}}
\item \href{#method-InputControl-check_plot_info}{\code{InputControl$check_plot_info()}}
\item \href{#method-InputControl-check_report_dir}{\code{InputControl$check_report_dir()}}
\item \href{#method-InputControl-check_genes}{\code{InputControl$check_genes()}}
\item \href{#method-InputControl-check_padjust_method}{\code{InputControl$check_padjust_method()}}
\item \href{#method-InputControl-check_report_info}{\code{InputControl$check_report_info()}}
\item \href{#method-InputControl-check_analysis_type}{\code{InputControl$check_analysis_type()}}
\item \href{#method-InputControl-check_report}{\code{InputControl$check_report()}}
\item \href{#method-InputControl-clone}{\code{InputControl$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="SplineOmics" data-topic="Level4Functions" data-id="create_error_message"><a href='../../SplineOmics/html/Level4Functions.html#method-Level4Functions-create_error_message'><code>SplineOmics::Level4Functions$create_error_message()</code></a></span></li>
<li><span class="pkg-link" data-pkg="SplineOmics" data-topic="Level3Functions" data-id="check_batch_column"><a href='../../SplineOmics/html/Level3Functions.html#method-Level3Functions-check_batch_column'><code>SplineOmics::Level3Functions$check_batch_column()</code></a></span></li>
<li><span class="pkg-link" data-pkg="SplineOmics" data-topic="Level3Functions" data-id="check_condition_time_consistency"><a href='../../SplineOmics/html/Level3Functions.html#method-Level3Functions-check_condition_time_consistency'><code>SplineOmics::Level3Functions$check_condition_time_consistency()</code></a></span></li>
<li><span class="pkg-link" data-pkg="SplineOmics" data-topic="Level3Functions" data-id="check_time_column_pattern"><a href='../../SplineOmics/html/Level3Functions.html#method-Level3Functions-check_time_column_pattern'><code>SplineOmics::Level3Functions$check_time_column_pattern()</code></a></span></li>
<li><span class="pkg-link" data-pkg="SplineOmics" data-topic="Level2Functions" data-id="check_columns"><a href='../../SplineOmics/html/Level2Functions.html#method-Level2Functions-check_columns'><code>SplineOmics::Level2Functions$check_columns()</code></a></span></li>
<li><span class="pkg-link" data-pkg="SplineOmics" data-topic="Level2Functions" data-id="check_colums_spline_test_configs"><a href='../../SplineOmics/html/Level2Functions.html#method-Level2Functions-check_colums_spline_test_configs'><code>SplineOmics::Level2Functions$check_colums_spline_test_configs()</code></a></span></li>
<li><span class="pkg-link" data-pkg="SplineOmics" data-topic="Level2Functions" data-id="check_data"><a href='../../SplineOmics/html/Level2Functions.html#method-Level2Functions-check_data'><code>SplineOmics::Level2Functions$check_data()</code></a></span></li>
<li><span class="pkg-link" data-pkg="SplineOmics" data-topic="Level2Functions" data-id="check_dataframe"><a href='../../SplineOmics/html/Level2Functions.html#method-Level2Functions-check_dataframe'><code>SplineOmics::Level2Functions$check_dataframe()</code></a></span></li>
<li><span class="pkg-link" data-pkg="SplineOmics" data-topic="Level2Functions" data-id="check_max_and_min_dof"><a href='../../SplineOmics/html/Level2Functions.html#method-Level2Functions-check_max_and_min_dof'><code>SplineOmics::Level2Functions$check_max_and_min_dof()</code></a></span></li>
<li><span class="pkg-link" data-pkg="SplineOmics" data-topic="Level2Functions" data-id="check_meta"><a href='../../SplineOmics/html/Level2Functions.html#method-Level2Functions-check_meta'><code>SplineOmics::Level2Functions$check_meta()</code></a></span></li>
<li><span class="pkg-link" data-pkg="SplineOmics" data-topic="Level2Functions" data-id="check_spline_params_generally"><a href='../../SplineOmics/html/Level2Functions.html#method-Level2Functions-check_spline_params_generally'><code>SplineOmics::Level2Functions$check_spline_params_generally()</code></a></span></li>
<li><span class="pkg-link" data-pkg="SplineOmics" data-topic="Level2Functions" data-id="check_spline_params_mode_dependent"><a href='../../SplineOmics/html/Level2Functions.html#method-Level2Functions-check_spline_params_mode_dependent'><code>SplineOmics::Level2Functions$check_spline_params_mode_dependent()</code></a></span></li>
<li><span class="pkg-link" data-pkg="SplineOmics" data-topic="Level2Functions" data-id="check_spline_type_column"><a href='../../SplineOmics/html/Level2Functions.html#method-Level2Functions-check_spline_type_column'><code>SplineOmics::Level2Functions$check_spline_type_column()</code></a></span></li>
<li><span class="pkg-link" data-pkg="SplineOmics" data-topic="Level2Functions" data-id="check_spline_type_params"><a href='../../SplineOmics/html/Level2Functions.html#method-Level2Functions-check_spline_type_params'><code>SplineOmics::Level2Functions$check_spline_type_params()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InputControl-new"></a>}}
\if{latex}{\out{\hypertarget{method-InputControl-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InputControl$new(args)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{args}}{A list of arguments to be validated.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new instance of the InputControl class.

Automatically Validate All Arguments

This method automatically validates all arguments by sequentially 
calling
various validation methods defined within the class. Each validation 
method
checks specific aspects of the input arguments and raises an error if the
validation fails.

The following validation methods are called in sequence:
- \code{self$check_data_and_meta()}
- \code{self$check_datas_and_metas()}
- \code{self$check_datas_descr()}
- \code{self$check_mode()}
- \code{self$check_modes()}
- \code{self$check_design_formula()}
- \code{self$check_designs_and_metas()}
- \code{self$check_spline_params()}
- \code{self$check_spline_test_configs()}
- \code{self$check_adj_pthresholds()}
- \code{self$check_clusters()}
- \code{self$check_time_unit()}
- \code{self$check_report_dir()}
- \code{self$check_padjust_method()}
- \code{self$check_report_info()}
- \code{self$check_report()}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InputControl-auto_validate"></a>}}
\if{latex}{\out{\hypertarget{method-InputControl-auto_validate}{}}}
\subsection{Method \code{auto_validate()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InputControl$auto_validate()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
NULL. The function is used for its side effects of validating 
input
arguments and raising errors if any validation fails.

Check Data and Meta
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InputControl-check_data_and_meta"></a>}}
\if{latex}{\out{\hypertarget{method-InputControl-check_data_and_meta}{}}}
\subsection{Method \code{check_data_and_meta()}}{
This function checks the validity of the data and meta objects, 
ensuring that
data is a matrix with numeric values and that meta is a dataframe 
containing
the specified condition column. Additionally, it verifies that the 
number of
columns in the data matrix matches the number of rows in the meta 
dataframe.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InputControl$check_data_and_meta()}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{A matrix containing numeric values.}

\item{\code{meta}}{A dataframe containing the metadata, including the 'Time' 
column
and the specified condition column.}

\item{\code{condition}}{A single character string specifying the column name in
the meta dataframe to be checked.}

\item{\code{meta_batch_column}}{An optional parameter specifying the column name
in the meta dataframe used to remove the batch effect. Default is NA.}

\item{\code{data_meta_index}}{An optional parameter specifying the index of the
data/meta pair for error messages. Default is NA.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Returns TRUE if all checks pass. Stops execution and returns an
error message if any check fails.

Check Annotation Consistency
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InputControl-check_annotation"></a>}}
\if{latex}{\out{\hypertarget{method-InputControl-check_annotation}{}}}
\subsection{Method \code{check_annotation()}}{
This method checks the consistency of the annotation with the data. 
It ensures
that the annotation is a dataframe and that it has the same number 
of rows as the data.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InputControl$check_annotation()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
NULL if any required arguments are missing. Otherwise, performs 
checks and potentially raises errors if checks fail.

Check Multiple Data and Meta Pairs
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InputControl-check_datas_and_metas"></a>}}
\if{latex}{\out{\hypertarget{method-InputControl-check_datas_and_metas}{}}}
\subsection{Method \code{check_datas_and_metas()}}{
Iterates over multiple data and meta pairs to validate each pair using 
the `check_data_and_meta` function.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InputControl$check_datas_and_metas()}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datas}}{A list of matrices containing numeric values.}

\item{\code{metas}}{A list of data frames containing metadata.}

\item{\code{condition}}{A character string specifying the column name in the 
meta dataframe to be checked.}

\item{\code{meta_batch_column}}{An optional parameter specifying the column name 
in the meta dataframe used to remove the batch effect. Default is NA.}

\item{\code{meta_batch2_column}}{An optional parameter specifying the column
 name 
in the meta dataframe used to remove the second batch effect. Default 
is NA.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
NULL if any check fails, otherwise returns TRUE.

Check Data Descriptions
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InputControl-check_datas_descr"></a>}}
\if{latex}{\out{\hypertarget{method-InputControl-check_datas_descr}{}}}
\subsection{Method \code{check_datas_descr()}}{
Validates that the data descriptions are character vectors with each 
element 
not exceeding 80 characters in length.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InputControl$check_datas_descr()}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datas_descr}}{A character vector of data descriptions.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
No return value, called for side effects.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InputControl-check_top_tables"></a>}}
\if{latex}{\out{\hypertarget{method-InputControl-check_top_tables}{}}}
\subsection{Method \code{check_top_tables()}}{
Validates that the top tables are a list of dataframes and checks each
dataframe using the `check_dataframe` function.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InputControl$check_top_tables()}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{top_tables}}{A list of top tables from limma analysis.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
No return value, called for side effects.

Check Mode
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InputControl-check_mode"></a>}}
\if{latex}{\out{\hypertarget{method-InputControl-check_mode}{}}}
\subsection{Method \code{check_mode()}}{
Validates that the mode is either 'integrated' or 'isolated', which 
depends
on the design formula used in limma.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InputControl$check_mode()}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{mode}}{A character string specifying the mode.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A message indicating the chosen mode if valid; otherwise, an 
error
is thrown.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InputControl-check_modes"></a>}}
\if{latex}{\out{\hypertarget{method-InputControl-check_modes}{}}}
\subsection{Method \code{check_modes()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InputControl$check_modes()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
NULL. The function is used for its side effects of validating 
each 
mode and raising errors if any validation fails.

Check Design Formula
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InputControl-check_design_formula"></a>}}
\if{latex}{\out{\hypertarget{method-InputControl-check_design_formula}{}}}
\subsection{Method \code{check_design_formula()}}{
Validates the design formula ensuring it is a valid character string,
contains allowed characters, includes the intercept term 'X', and 
references
columns present in the metadata.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InputControl$check_design_formula()}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{formula}}{A character string representing the design formula.}

\item{\code{meta}}{A data frame containing metadata.}

\item{\code{meta_index}}{An optional index for the data/meta pair.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
TRUE if the design formula is valid, otherwise an error is 
thrown.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InputControl-check_designs_and_metas"></a>}}
\if{latex}{\out{\hypertarget{method-InputControl-check_designs_and_metas}{}}}
\subsection{Method \code{check_designs_and_metas()}}{
Iterates over multiple design formulas and corresponding metadata
to validate each pair using the `check_design_formula` function.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InputControl$check_designs_and_metas()}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{designs}}{A vector of character strings representing design 
formulas.}

\item{\code{metas}}{A list of data frames containing metadata.}

\item{\code{meta_indices}}{A vector of optional indices for the data/meta pairs.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
NULL if any check fails, otherwise returns TRUE.

Check Spline Parameters
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InputControl-check_spline_params"></a>}}
\if{latex}{\out{\hypertarget{method-InputControl-check_spline_params}{}}}
\subsection{Method \code{check_spline_params()}}{
Validates the spline parameters both generally and depending on the
specified mode.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InputControl$check_spline_params()}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{spline_params}}{A list of spline parameters.}

\item{\code{mode}}{A character string specifying the mode
('integrated' or 'isolated').}

\item{\code{meta}}{A dataframe containing metadata.}

\item{\code{condition}}{A character string specifying the condition.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
No return value, called for side effects.

Check Spline Test Configurations
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InputControl-check_spline_test_configs"></a>}}
\if{latex}{\out{\hypertarget{method-InputControl-check_spline_test_configs}{}}}
\subsection{Method \code{check_spline_test_configs()}}{
This function verifies the spline test configurations and associated 
metadata
within the object's arguments. It performs a series of checks on the 
configurations, including column verification, spline type validation, 
and ensuring that the degrees of freedom (dof) are within acceptable 
ranges.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InputControl$check_spline_test_configs()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Returns `NULL` if any required arguments 
(`spline_test_configs` or `metas`) 
are missing. Otherwise, it performs a series of validation checks.

Check Limma Top Tables Structure

This function checks if the provided limma top tables data structure 
is correctly formatted. It ensures that the data structure contains 
exactly three named elements ('time_effect', 'avrg_diff_conditions', 
and 'interaction_condition_time') and that each element contains 
dataframes with the correct columns and data types.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InputControl-check_limma_top_tables"></a>}}
\if{latex}{\out{\hypertarget{method-InputControl-check_limma_top_tables}{}}}
\subsection{Method \code{check_limma_top_tables()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InputControl$check_limma_top_tables()}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{self}}{An object containing the data structure to check.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
This function does not return a value. It stops execution 
if the data structure does not match the expected format.

Check Adjusted p-Thresholds
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InputControl-check_adj_pthresholds"></a>}}
\if{latex}{\out{\hypertarget{method-InputControl-check_adj_pthresholds}{}}}
\subsection{Method \code{check_adj_pthresholds()}}{
This function checks the validity of the adjusted p-thresholds vector,
ensuring that
all elements are numeric, greater than 0, and less than 1. If any of 
these
conditions
are not met, the function stops execution and returns an error message
indicating the
offending elements.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InputControl$check_adj_pthresholds()}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{adj_pthresholds}}{A numeric vector of adjusted p-thresholds.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Returns TRUE if all checks pass. Stops execution and returns an
error message if any check fails.

Check Clusters
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InputControl-check_clusters"></a>}}
\if{latex}{\out{\hypertarget{method-InputControl-check_clusters}{}}}
\subsection{Method \code{check_clusters()}}{
This function verifies the cluster configurations within the object's 
arguments.
It checks if the clusters argument is present and performs validation 
on its 
content. If no clusters are specified, it defaults to automatic cluster 
estimation.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InputControl$check_clusters()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InputControl-check_plot_info"></a>}}
\if{latex}{\out{\hypertarget{method-InputControl-check_plot_info}{}}}
\subsection{Method \code{check_plot_info()}}{
This method checks the validity of the `plot_info` list. It ensures that 
`y_axis_label` and `time_unit` meet the length constraints, 
`treatment_labels` 
is either `NA` or a character vector with elements meeting the length 
constraint, 
and `treatment_timepoints` is either `NA` or a numeric vector with the 
same length 
as `treatment_labels`.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InputControl$check_plot_info()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
NULL if `plot_info` is not provided or invalid. Otherwise, 
performs checks
and potentially raises errors if checks fail.

Check and Create Report Directory
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InputControl-check_report_dir"></a>}}
\if{latex}{\out{\hypertarget{method-InputControl-check_report_dir}{}}}
\subsection{Method \code{check_report_dir()}}{
This function checks if the specified report directory exists and is a
valid directory.
If the directory does not exist, it attempts to create it. If there are
 any
warnings or
errors during directory creation, the function stops execution and 
returns
an error message.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InputControl$check_report_dir()}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{report_dir}}{A character string specifying the path to the report
directory.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Returns TRUE if the directory exists or is successfully created.
Stops execution
and returns an error message if the directory cannot be created or is not
valid.

Check Genes Validity
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InputControl-check_genes"></a>}}
\if{latex}{\out{\hypertarget{method-InputControl-check_genes}{}}}
\subsection{Method \code{check_genes()}}{
This function checks the validity of the `data` and `genes` arguments 
within the `self$args` list. It ensures that `genes` is a character 
vector, 
that neither `data` nor `genes` is `NULL`, and that the length of `genes` 
matches the number of rows in `data`.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InputControl$check_genes()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Returns `TRUE` if all checks pass. Returns `NULL` if any required 
arguments are `NULL`. Throws an error if `genes` is not a character 
vector 
or if the length of `genes` does not match the number of rows in `data`.

Check p-Adjustment Method
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InputControl-check_padjust_method"></a>}}
\if{latex}{\out{\hypertarget{method-InputControl-check_padjust_method}{}}}
\subsection{Method \code{check_padjust_method()}}{
This function checks if the provided p-adjustment method is valid. The 
valid
methods are:
"holm", "hochberg", "hommel", "bonferroni", "BH", "BY", "fdr", and 
"none".
If the method
is not one of these, the function stops execution and returns an error
 message.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InputControl$check_padjust_method()}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{padjust_method}}{A character string specifying the p-adjustment 
method.
Valid options
are "holm", "hochberg", "hommel", "bonferroni", "BH", "BY", "fdr", and
"none".}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Returns TRUE if the p-adjustment method is valid. Stops execution
 and
returns an error message if the method is invalid.

Check Report Information
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InputControl-check_report_info"></a>}}
\if{latex}{\out{\hypertarget{method-InputControl-check_report_info}{}}}
\subsection{Method \code{check_report_info()}}{
Validates the report information to ensure it contains all mandatory 
fields
and adheres to the required formats.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InputControl$check_report_info()}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{report_info}}{A named list containing report information.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
TRUE if the report information is valid; otherwise, an error is
thrown.

Check Analysis Mode
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InputControl-check_analysis_type"></a>}}
\if{latex}{\out{\hypertarget{method-InputControl-check_analysis_type}{}}}
\subsection{Method \code{check_analysis_type()}}{
This method checks the validity of the `analysis_mode` argument. 
It ensures that 
`analysis_mode` is a character vector of length 1 and that it matches
 one of the 
allowed analysis modes: "time_effect", "avrg_diff_conditions", or 
"interaction_condition_time".
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InputControl$check_analysis_type()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
NULL if `analysis_mode` is not provided or invalid. Otherwise, 
performs checks
and potentially raises errors if checks fail.

Check Report
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InputControl-check_report"></a>}}
\if{latex}{\out{\hypertarget{method-InputControl-check_report}{}}}
\subsection{Method \code{check_report()}}{
This function verifies the `report` argument within the object's 
arguments.
It checks if the `report` argument is present and validates its 
Boolean value.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InputControl$check_report()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InputControl-clone"></a>}}
\if{latex}{\out{\hypertarget{method-InputControl-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InputControl$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
