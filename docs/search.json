[{"path":"https://csbg.github.io/SplineOmics/CHANGELOG.html","id":null,"dir":"","previous_headings":"","what":"Changelog","title":"Changelog","text":"notable changes project documented file. format based Keep Changelog, project adheres Semantic Versioning.","code":""},{"path":"https://csbg.github.io/SplineOmics/CHANGELOG.html","id":"template-for-changelog-entries","dir":"","previous_headings":"","what":"Template for Changelog Entries","title":"Changelog","text":"release section follow structure :","code":""},{"path":[]},{"path":"https://csbg.github.io/SplineOmics/CHANGELOG.html","id":"added","dir":"","previous_headings":"Template for Changelog Entries > [Version] - YYYY-MM-DD","what":"Added","title":"Changelog","text":"New features functionality introduced release.","code":""},{"path":"https://csbg.github.io/SplineOmics/CHANGELOG.html","id":"changed","dir":"","previous_headings":"Template for Changelog Entries > [Version] - YYYY-MM-DD","what":"Changed","title":"Changelog","text":"Updates modifications existing features.","code":""},{"path":"https://csbg.github.io/SplineOmics/CHANGELOG.html","id":"fixed","dir":"","previous_headings":"Template for Changelog Entries > [Version] - YYYY-MM-DD","what":"Fixed","title":"Changelog","text":"Bugs resolved.","code":""},{"path":"https://csbg.github.io/SplineOmics/CHANGELOG.html","id":"deprecated","dir":"","previous_headings":"Template for Changelog Entries > [Version] - YYYY-MM-DD","what":"Deprecated","title":"Changelog","text":"Features still functional slated removal future.","code":""},{"path":"https://csbg.github.io/SplineOmics/CHANGELOG.html","id":"removed","dir":"","previous_headings":"Template for Changelog Entries > [Version] - YYYY-MM-DD","what":"Removed","title":"Changelog","text":"Features functionality removed.","code":""},{"path":"https://csbg.github.io/SplineOmics/CHANGELOG.html","id":"security","dir":"","previous_headings":"Template for Changelog Entries > [Version] - YYYY-MM-DD","what":"Security","title":"Changelog","text":"security-related updates patches. Examples: - Added: Introduced new plotting function plotTimeSeries(). - Fixed: Resolved issue causing crashes input data missing values. - Changed: Modified default parameters normalizeData().","code":""},{"path":[]},{"path":"https://csbg.github.io/SplineOmics/CHANGELOG.html","id":"added-1","dir":"","previous_headings":"Template for Changelog Entries > [0.1.2] - 2025-02-11","what":"Added","title":"Changelog","text":"Level name title overall spline plots.","code":""},{"path":"https://csbg.github.io/SplineOmics/CHANGELOG.html","id":"fixed-1","dir":"","previous_headings":"Template for Changelog Entries > [0.1.2] - 2025-02-11","what":"Fixed","title":"Changelog","text":"Small bug made impossible treatment label condition. Small bug allow specify two treatment labels. mode == isolated RNA-seq data. , caused error, splits meta different conditions, data. Now, informs user , user split data outside (just RNA-seq data).","code":""},{"path":"https://csbg.github.io/SplineOmics/CHANGELOG.html","id":"removed-1","dir":"","previous_headings":"Template for Changelog Entries > [0.1.2] - 2025-02-11","what":"Removed","title":"Changelog","text":"open_template() function. function opened template analysis. removed , otherwise, whenever change code, update get-started vignette (tutorial) , twice maintainance effort.","code":""},{"path":[]},{"path":"https://csbg.github.io/SplineOmics/CHANGELOG.html","id":"changed-1","dir":"","previous_headings":"Template for Changelog Entries","what":"Changed","title":"Changelog","text":"design formula must now contain string ‘Time’ rather ‘X’ like . X stood time. change intended make design formula explicit self explanatory. Random effects can now directly specified design formula, rather passed part dream_params.","code":""},{"path":"https://csbg.github.io/SplineOmics/CHANGELOG.html","id":"added-2","dir":"","previous_headings":"Template for Changelog Entries","what":"Added","title":"Changelog","text":"Added linear mixed models modeling random effects. variancePartition package used –> voomWithDreamWeights RNA-seq data processing, dream replacement limma. example, Reactor random effect, can write design formula like : design <- “~ 1 + Condition*Time + Plate + (1|Reactor)” SplineOmics automatically run variancePartition functions voomWithDreamWeights() dream() instead limma::voom lmfit. dream() additional parameters, method degree freedom (different degree freedom used splines package) can pass dream_params argument. See RNA-seq analysis vignette respective function references info. Raw data plotting function –> make_scatter_plot_html() –> see references. Imputed values marked triangle symbols cluster_hits() spline plots raw data passed. Package version written HTML report (tag) session info added embedded text file. Standard error written top “double spline” plots (limma result category 2 3). Used analysis script embedded text file reports. mode (integrated isolated) written top reports separate field. Now 4 significance stars. Treatment lines double spline plots (limma result category 2 3).","code":""},{"path":"https://csbg.github.io/SplineOmics/CHANGELOG.html","id":"fixed-2","dir":"","previous_headings":"Template for Changelog Entries > Added","what":"Fixed","title":"Changelog","text":"smaller visual things HTML reports.","code":""},{"path":[]},{"path":"https://csbg.github.io/SplineOmics/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://csbg.github.io/SplineOmics/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://csbg.github.io/SplineOmics/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://csbg.github.io/SplineOmics/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://csbg.github.io/SplineOmics/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement thomas.rauter@plus.ac.. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://csbg.github.io/SplineOmics/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://csbg.github.io/SplineOmics/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://csbg.github.io/SplineOmics/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://csbg.github.io/SplineOmics/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://csbg.github.io/SplineOmics/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://csbg.github.io/SplineOmics/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"changelog","dir":"Articles","previous_headings":"","what":"Changelog","title":"Changelog","text":"notable changes project documented file. format based Keep Changelog, project adheres Semantic Versioning.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"template-for-changelog-entries","dir":"Articles","previous_headings":"Changelog","what":"Template for Changelog Entries","title":"Changelog","text":"release section follow structure :","code":""},{"path":[]},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"added","dir":"Articles","previous_headings":"Changelog > Template for Changelog Entries > [Version] - YYYY-MM-DD","what":"Added","title":"Changelog","text":"New features functionality introduced release.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"changed","dir":"Articles","previous_headings":"Changelog > Template for Changelog Entries > [Version] - YYYY-MM-DD","what":"Changed","title":"Changelog","text":"Updates modifications existing features.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"fixed","dir":"Articles","previous_headings":"Changelog > Template for Changelog Entries > [Version] - YYYY-MM-DD","what":"Fixed","title":"Changelog","text":"Bugs resolved.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"deprecated","dir":"Articles","previous_headings":"Changelog > Template for Changelog Entries > [Version] - YYYY-MM-DD","what":"Deprecated","title":"Changelog","text":"Features still functional slated removal future.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"removed","dir":"Articles","previous_headings":"Changelog > Template for Changelog Entries > [Version] - YYYY-MM-DD","what":"Removed","title":"Changelog","text":"Features functionality removed.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"security","dir":"Articles","previous_headings":"Changelog > Template for Changelog Entries > [Version] - YYYY-MM-DD","what":"Security","title":"Changelog","text":"security-related updates patches. Examples: - Added: Introduced new plotting function plotTimeSeries(). - Fixed: Resolved issue causing crashes input data missing values. - Changed: Modified default parameters normalizeData().","code":""},{"path":[]},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"fixed-1","dir":"Articles","previous_headings":"Changelog > Template for Changelog Entries > [0.3.2]","what":"Fixed","title":"Changelog","text":"cluster_hits() function now modify gene symbols anymore. , attempted clean removing characters valid making uppercase. implicit behavior (even though user informed) removed favor user now explicitly cleaning responsible .","code":""},{"path":[]},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"added-1","dir":"Articles","previous_headings":"Changelog > Template for Changelog Entries > [0.3.1]","what":"Added","title":"Changelog","text":"Effect size computations thresholding splines. enough statistical power, also tiny differences can significant, can make sense determine hits just filtering adj.p-value threshold, also effect size threshold. Therefore, cluster_hits() function now computes spline effect sizes via cumulative travel accepts threshold argument used cutoffs. category 2 average difference conditions, effect size already topTable limma. Double spline clustering hits category 3. clusters assigned hits serve following clustered enrichment. control , new argument cluster_hits() function, nr_clusters_interaction, defined. Cluster quality metric (Silhouette score). Now, HTML reports cluster_hits() function, every hit, Silhouette score reported. Additionally, beginning time effect results sections, histograms show distribution Silhouette scores clusters. functions preprocess_rna_seq_data, run_limma_splines, cluster_hits now report amount time took run.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"fixed-2","dir":"Articles","previous_headings":"Changelog > Template for Changelog Entries > [0.3.1]","what":"Fixed","title":"Changelog","text":"documentation outdated vague. Improved . smaller things fixed, remnants screen_limma_hyperparams() function code places, input control functions still expected older argument names.","code":""},{"path":[]},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"changed-1","dir":"Articles","previous_headings":"Changelog > Template for Changelog Entries > [0.3.0]","what":"Changed","title":"Changelog","text":"cluster_hits() returns. Now returns plots large table, summarizing clustering results, including results limma result categories 2 3. run_ora() now takes cluster_hits() summary table return input, performs enrichment analysis three limma result categories. info run_ora() reports: HTML reports generated run_ora() function contained little information inputs results ora report connected. adress , ora report now contains downloadable files foreground background genes, reports clusterProfiler parameters used, run_ora() function new argument allows pass string name corresponding cluster_hits() HTML report, contains results basis respective run_ora() report. Separated isolated integrated mode computations: , part code generated limma time_effect category results. used isolated integrated mode, share results. However, meant analysis integrated mode run often necessary, run condition time_effect results, get average diff condition interaction results. unnecessary, since integrated results can derived single global model (help contrasts). Therefore, now completely separated compuations isolated integrated approach, integrated approach, just one global model run three limma result categories extracted help contrasts. Made cluster_hits() usable many hits: Introduced new function argument, called max_hit_number. controls plotting logic report generation, limits amount plots amount detail shown plots maximum number hits per cluster. allows also generate clustering reports analyses many hits, nowbody anyways looks thousands spline plots. Switched hierarchical clustering kmeans. done kmeans much faster (efficient terms computations). Also, now number clusters always specified range (min:max, e.g. 2:4) cluster numbers tried best one identified help silhuette score. Also want just one definite amount clusters, still specify range due technical reasons. Additionally, datasets large, uses minibatch version kmeans, lot faster (sacrificing bit cluster quality).","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"added-2","dir":"Articles","previous_headings":"Changelog > Template for Changelog Entries > [0.3.0]","what":"Added","title":"Changelog","text":"Auto-dof loocv: Introduced new capability, automatically finds best spline dof based error loocv. every linear model fit, performs analytical loocv looks error sum features. every dof 2 min(timepoints, 10). Autodof activated dof = 0L selected. Added cross-species gene mapping: Added optional support automatic gene symbol conversion species via gprofiler2 orthogene. Controlled new mapping_cfg argument run_ora(), enables mapping from_species to_species using either method. conversion applies across cluster hit tables, preserves order, retains unmapped genes. suffix stripping done, users warned trailing _digits detected. qvalue package now optionally required enable stricter FDR filtering enrichment results. Cross-platform memory-safe parallelization support dream() via new helper function bp_setup(). function sets BiocParallel backend using either MulticoreParam (Unix) SnowParam (Windows), based user-supplied configuration (bp_cfg). BLAS threads per worker throttled using RhpcBLASctl avoid oversubscription. Cleanup bpstop() conditionally applied SnowParam backends. Includes validation bp_cfg input. Enables efficient multi-core execution dream() eBayes() preventing system resource exhaustion. download_bioconductor_database() function. one allows conveniently download database specific organism BioConductor (see function documentation). Introduced clusterProfiler::enrichGO() along clusterProfiler::simplify SplineOmics::run_ora(). allows run enrichment BioConductor GO databases enrichGO function, followed simplify function, collapse hierarchical terms. behavior controlled new argument run_ora(), namely enrichGO_cfg (see documentation). Better documentation limma cluster_hits HTML reports heteroscedasticity arguments result Levene test.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"fixed-3","dir":"Articles","previous_headings":"Changelog > Template for Changelog Entries > [0.3.0]","what":"Fixed","title":"Changelog","text":"Red spline curves: , just generated help spline coefficients, intercept. full linear model used limma. Now, generates spline also help variables used linear model. predicted splines now generated beginning cluster_hits() function, used clustering plotting. Wrong coefficients passes topTable() function. limma result category average difference conditions, necessary coefficients passed. , just checked difference conditions reference time point (first timepoint). Now passes necessary coefficients, performs joint F-test get average difference conditions across whole timecourse. use_array_weights argument internally always set FALSE set TRUE user. setting TRUE seemingly effect. now fixed.","code":""},{"path":[]},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"fixed-4","dir":"Articles","previous_headings":"Changelog > Template for Changelog Entries > [0.2.0] - 2025-05-08","what":"Fixed","title":"Changelog","text":"Bug prevented generation double spline plots condition column meta factor instead string. now solved (internally code converts string), condition column factor now cause problems anymore (factor perfectly valid). Bug occured internal clean_gene_symbols() function one gene names NA. Now, cause problem anymore instead gene name respective spline plot write NA. error message clusters specified hits condition cryptic. Now, gives message easy understand. bug input control threw error indicating rows dataset contains just zeros, even though true. running cluster_hits() report = FALSE, many hits, anyways warned user report generation take long. fixed, report = FALSE, report generated, means user warned (just confuse user).","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"changed-2","dir":"Articles","previous_headings":"Changelog > Template for Changelog Entries > [0.2.0] - 2025-05-08","what":"Changed","title":"Changelog","text":"Replicates double spline plots (limma result category 2 3) now shown shapes instead numbers besides data points. now possible imputed values anymore shown shapes plots, like single spline plots (limma result category 1), colors (red = imputed values condition 1, dodgerblue = imputed values condition 2). images HTML reports now considerably smaller, zoomable, option drag within zoomed image. single left-click mouse starts zoom process. , can zoom mouse wheel. reach max zoom, can move image zooming mouse wheel placing mouse one corners. , one can zoom holding left-click pressed dragging (can also let go). SplineOmics can now handle datasets NA values. limma can , since SplineOmics based limma, can principle . issue just checks place prevented NA values entering pipeline, also steps code caused problems, raised warnings, stopped execution facing NA values. Changed extract_data() function can handle missing values correctly, now fully explicit internal magic. less two hits levels cluster_hits() function, function provided message informed threw error. fine just running function generate one result. However, using function outside loop generate multiple results, behavior suboptimal, must captured tryCatch clause. Now, less two hits levels, simply returns NULL, cleaner behavior break loops one result generated. extract_data() function, now work implicit logic, instead explicit logic. , tried automatically find numeric matrix field. Now, requires specific top- bottom row, left right column. marks field matrix . rest logic (logic row name columns) still . make_scatter_plot_html() (now renamed make_scatter_plots_html()). renamed run_gsea() run_ora(), function uses clusterProfiler, performs ora (overrepresentation analysis) gsea (gene set enrichment analysis) stricter sense.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"added-3","dir":"Articles","previous_headings":"Changelog > Template for Changelog Entries","what":"Added","title":"Changelog","text":"find_pvc() function. function performs compount contrast every timepoint triple data (adjacent timepoints) find peaks, valley, cliffs form local temporal patterns. generates HTML report containing findings files also containing plots. New vignette showcasing find_pvc() function. Implicit (default) explicit heteroscedasticity handling linear model input. Controlled robust_fit Boolean flag indicating whether robust modeling strategy used account heteroscedasticity. omitted (.e., robust_fit = NULL), decision made implicitly based result Breusch–Pagan test, applied independently feature. test fits linear model form expression ~ time checks whether residual variance systematically depends fitted values. significant violation homoscedasticity detected sufficient fraction features (default: 10%), robust strategy applied. RNA-seq data, means using voomWithQualityWeights() instead standard voom() function. , non-count-based data, limma::arrayWeights() used model fitting, combined robust = TRUE limma::eBayes(). strategies downweight samples higher residual variance prevent bias linear modeling step, violations homoscedasticity assumption can lead misleading p-values unreliable inference. New note HTML report cluster_hits() function, informs user splines shown plots can appear wrong intercept. can occur batch effect /random effect modeled limma linear mixed models, plotting data batch corrected dedicated limma batch correction function. reason, gap. results fine! Just plotting ! New user-available function called compare_results() allows correlate topTable results two SplineOmics results (example intergrated vs. isolated approach data).","code":""},{"path":[]},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"added-4","dir":"Articles","previous_headings":"Changelog > Template for Changelog Entries > [0.1.2] - 2025-02-11","what":"Added","title":"Changelog","text":"Level name title overall spline plots.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"fixed-5","dir":"Articles","previous_headings":"Changelog > Template for Changelog Entries > [0.1.2] - 2025-02-11","what":"Fixed","title":"Changelog","text":"Small bug made impossible treatment label condition. Small bug allow specify two treatment labels. mode == isolated RNA-seq data. , caused error, splits meta different conditions, data. Now, informs user , user split data outside (just RNA-seq data).","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"removed-1","dir":"Articles","previous_headings":"Changelog > Template for Changelog Entries > [0.1.2] - 2025-02-11","what":"Removed","title":"Changelog","text":"open_template() function. function opened template analysis. removed , otherwise, whenever change code, update get-started vignette (tutorial) , twice maintainance effort.","code":""},{"path":[]},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"changed-3","dir":"Articles","previous_headings":"Changelog > Template for Changelog Entries","what":"Changed","title":"Changelog","text":"design formula must now contain string ‘Time’ rather ‘X’ like . X stood time. change intended make design formula explicit self explanatory. Random effects can now directly specified design formula, rather passed part dream_params.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"added-5","dir":"Articles","previous_headings":"Changelog > Template for Changelog Entries","what":"Added","title":"Changelog","text":"Added linear mixed models modeling random effects. variancePartition package used –> voomWithDreamWeights RNA-seq data processing, dream replacement limma. example, Reactor random effect, can write design formula like : design <- “~ 1 + Condition*Time + Plate + (1|Reactor)” SplineOmics automatically run variancePartition functions voomWithDreamWeights() dream() instead limma::voom lmfit. dream() additional parameters, method degree freedom (different degree freedom used splines package) can pass dream_params argument. See RNA-seq analysis vignette respective function references info. Raw data plotting function –> make_scatter_plot_html() –> see references. Imputed values marked triangle symbols cluster_hits() spline plots raw data passed. Package version written HTML report (tag) session info added embedded text file. Standard error written top “double spline” plots (limma result category 2 3). Used analysis script embedded text file reports. mode (integrated isolated) written top reports separate field. Now 4 significance stars. Treatment lines double spline plots (limma result category 2 3).","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"fixed-6","dir":"Articles","previous_headings":"Changelog > Template for Changelog Entries > Added","what":"Fixed","title":"Changelog","text":"smaller visual things HTML reports.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Changelog","text":"","code":"## R version 4.5.1 (2025-06-13) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 22.04.5 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.10.0  ## LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=de_AT.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=de_AT.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=de_AT.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=de_AT.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: Europe/Vienna ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices datasets  utils     methods   base      ##  ## loaded via a namespace (and not attached): ##  [1] digest_0.6.37       desc_1.4.3          R6_2.6.1            ##  [4] fastmap_1.2.0       xfun_0.52           cachem_1.1.0        ##  [7] knitr_1.50          htmltools_0.5.8.1   rmarkdown_2.29      ## [10] lifecycle_1.0.4     cli_3.6.5           sass_0.4.10         ## [13] pkgdown_2.1.3       textshaping_1.0.1   jquerylib_0.1.4     ## [16] renv_1.1.4          systemfonts_1.2.3   compiler_4.5.1      ## [19] rstudioapi_0.17.1   tools_4.5.1         ragg_1.4.0          ## [22] bslib_0.9.0         evaluate_1.0.4      yaml_2.3.10         ## [25] BiocManager_1.30.26 jsonlite_2.0.0      htmlwidgets_1.6.4   ## [28] rlang_1.1.6         fs_1.6.6"},{"path":"https://csbg.github.io/SplineOmics/articles/Docker-instructions.html","id":"pulling-the-docker-container","dir":"Articles","previous_headings":"","what":"Pulling the Docker Container","title":"Docker-instructions","text":"pull Docker container, use following command. Make sure check newest version specific version need visiting Docker Hub repository. face ‘permission denied’ issues, check vignette","code":"docker pull thomasrauter/splineomics:latest"},{"path":"https://csbg.github.io/SplineOmics/articles/Docker-instructions.html","id":"running-the-docker-container","dir":"Articles","previous_headings":"","what":"Running the Docker Container","title":"Docker-instructions","text":"run Docker container, can use one following commands, depending operating system. running command, ensure directory containing two subfolders: input output. used transfer files local machine Docker container. Linux macOS (Bash): Windows (PowerShell): container running, open web browser navigate http://localhost:8888. Log using following credentials: Username: rstudio Password: one set -e PASSWORD=123 option (123 case) long container running, can work localhost page RStudio, also SplineOmics package installed. /home/rstudio/ R session working folder. Stop container: Start container :","code":"docker run -it -d \\     -v $(pwd)/input:/home/rstudio/input \\     -v $(pwd)/output:/home/rstudio/output \\     -p 8888:8787 \\     -e PASSWORD=123 \\     --name splineomics \\     thomasrauter/splineomics:latest docker run -it -d `     -v \"${PWD}\\input:/home/rstudio/input\" `     -v \"${PWD}\\output:/home/rstudio/output\" `     -p 8888:8787 `     -e PASSWORD=123 `     --name splineomics `     thomasrauter/splineomics:latest docker stop splineomics docker start splineomics"},{"path":"https://csbg.github.io/SplineOmics/articles/Docker-instructions.html","id":"using-the-docker-desktop-gui-instead","dir":"Articles","previous_headings":"","what":"Using the Docker Desktop gui instead","title":"Docker-instructions","text":"Instead pasting commands Power- Bashshell, can also graphical user interface Docker Desktop. still want use link localhost page provided , set port 8888 (otherwise, change link points port). Additionally, don’t set passwort starting container using GUI, password generated randomly written red logs container.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/Docker-instructions.html","id":"input-and-output-file-management","dir":"Articles","previous_headings":"","what":"Input and Output File Management","title":"Docker-instructions","text":"input output directories local machine mounted corresponding directories inside Docker container. allows seamless file transfer local machine container. Place input files (e.g., data, metadata, annotation files) input directory local machine. files automatically appear /home/rstudio/input inside container. files generated RStudio within container saved /home/rstudio/output. files automatically appear output directory local machine.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/Docker-instructions.html","id":"inspect-docker-container-installations","dir":"Articles","previous_headings":"","what":"Inspect Docker container installations","title":"Docker-instructions","text":"see R packages system installations make Docker container, can run following command terminal RStudio localhost browser page. /home/rstudio/output dir mounted local filesystem, make installation log files available .","code":"cp -r /log home/rstudio/output"},{"path":"https://csbg.github.io/SplineOmics/articles/Docker-instructions.html","id":"installing-additional-r-packages-in-the-container","dir":"Articles","previous_headings":"","what":"Installing additional R packages in the container","title":"Docker-instructions","text":"New R packages can installed normal way: However, note packages installed running container lost container deleted rebuilt.","code":"install.packages(\"package_name\")"},{"path":"https://csbg.github.io/SplineOmics/articles/Docker-instructions.html","id":"permanent-additions","dir":"Articles","previous_headings":"","what":"Permanent additions","title":"Docker-instructions","text":"want permanently add R packages, R scripts, files SplineOmics Docker image, can use base image building new image. ensure changes saved new image, rather lost container deleted. example: Run container new image commands described .","code":"# Use the SplineOmics image as the base image FROM thomasrauter/splineomics:latest  # Install the data.table package permanently RUN R -e \"install.packages('data.table')\"  # Optionally, add custom R scripts to the image COPY your_script.R /home/rstudio/your_script.R  # Set the working directory WORKDIR /home/rstudio  # Expose RStudio Server port EXPOSE 8787  # Start RStudio server CMD [\"/init\"]  # Build new image: # docker build -t your_new_image_name ."},{"path":"https://csbg.github.io/SplineOmics/articles/Docker-instructions.html","id":"creating-a-reproducible-docker-container-with-automated-analysis","dir":"Articles","previous_headings":"","what":"Creating a Reproducible Docker Container with Automated Analysis","title":"Docker-instructions","text":"final analysis script inside Docker container SplineOmics package, want scientists can easily reproduce results running just one line code, follow guide . instruct create new image based container, can save example Docker Hub. Others can download image, run container get exact results got.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/Docker-instructions.html","id":"prepare-your-analysis-and-scripts","dir":"Articles","previous_headings":"Creating a Reproducible Docker Container with Automated Analysis","what":"1. Prepare your analysis and scripts","title":"Docker-instructions","text":"Ensure analysis scripts necessary files saved dedicated directory inside container (e.g., /home/rstudio/analysis/). analysis script take input files directory like /home/rstudio/input/ (already inside container need mounted reproducing analysis) output results /home/rstudio/output/. /home/rstudio/output/ directory mounted local directory user’s machine, making results accessible outside container. Example directory structure:","code":"/home/rstudio/ └── analysis/     ├── final_analysis.R   # Main analysis script     └── helper_functions.R # Supporting scripts"},{"path":"https://csbg.github.io/SplineOmics/articles/Docker-instructions.html","id":"create-an-entry-point-script","dir":"Articles","previous_headings":"Creating a Reproducible Docker Container with Automated Analysis","what":"2. Create an Entry Point Script","title":"Docker-instructions","text":"Create bash script (run_analysis.sh) runs analysis automatically. Example run_analysis.sh: Save script /home/rstudio/.","code":"#!/bin/bash Rscript /home/rstudio/analysis/final_analysis.R tail -f /dev/null  # Keep the container running after analysis"},{"path":"https://csbg.github.io/SplineOmics/articles/Docker-instructions.html","id":"commit-the-container-as-a-new-image-with-an-entry-point","dir":"Articles","previous_headings":"Creating a Reproducible Docker Container with Automated Analysis","what":"3. Commit the Container as a New Image with an Entry Point","title":"Docker-instructions","text":"scripts ready, commit running container new image set new entry point run bash script automatically:","code":"docker commit \\     --change='CMD [\"/bin/bash\", \"/home/rstudio/run_analysis.sh\"]' \\     <container_id> \\     thomasrauter/splineomics-analysis:v1"},{"path":"https://csbg.github.io/SplineOmics/articles/Docker-instructions.html","id":"push-the-new-image-to-docker-hub","dir":"Articles","previous_headings":"Creating a Reproducible Docker Container with Automated Analysis","what":"4. Push the New Image to Docker Hub","title":"Docker-instructions","text":"Push new image Docker Hub others can easily pull reproduce analysis: Others can pull (download) container command:","code":"docker push thomasrauter/splineomics-analysis:v1 docker pull thomasrauter/splineomics-analysis:v1"},{"path":"https://csbg.github.io/SplineOmics/articles/Docker-instructions.html","id":"running-the-container-to-reproduce-the-results","dir":"Articles","previous_headings":"Creating a Reproducible Docker Container with Automated Analysis","what":"5. Running the container to reproduce the results","title":"Docker-instructions","text":"reproduce results, need create local directory results saved mount directory container’s /home/rstudio/output/ directory. Use following command run container ensure results saved local output directory (see commands section Running Docker Container mount output dir current working dir).","code":"docker run -it \\     -v /path/to/local/output:/home/rstudio/output \\     thomasrauter/splineomics-analysis:v1"},{"path":"https://csbg.github.io/SplineOmics/articles/Docker-instructions.html","id":"optional-getting-insights-into-the-full-analysis","dir":"Articles","previous_headings":"Creating a Reproducible Docker Container with Automated Analysis","what":"(Optional) Getting insights into the full analysis","title":"Docker-instructions","text":"Start new container mount empty local directory /home/rstudio/ directory inside container. allows directly access analysis files local machine.","code":"docker run -it \\     -v /path/to/local/dir:/home/rstudio \\     thomasrauter/splineomics-analysis:v1"},{"path":"https://csbg.github.io/SplineOmics/articles/Docker-instructions.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Docker-instructions","text":"","code":"## R version 4.5.1 (2025-06-13) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 22.04.5 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.10.0  ## LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=de_AT.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=de_AT.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=de_AT.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=de_AT.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: Europe/Vienna ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices datasets  utils     methods   base      ##  ## loaded via a namespace (and not attached): ##  [1] digest_0.6.37       desc_1.4.3          R6_2.6.1            ##  [4] fastmap_1.2.0       xfun_0.52           cachem_1.1.0        ##  [7] knitr_1.50          htmltools_0.5.8.1   rmarkdown_2.29      ## [10] lifecycle_1.0.4     cli_3.6.5           sass_0.4.10         ## [13] pkgdown_2.1.3       textshaping_1.0.1   jquerylib_0.1.4     ## [16] renv_1.1.4          systemfonts_1.2.3   compiler_4.5.1      ## [19] rstudioapi_0.17.1   tools_4.5.1         ragg_1.4.0          ## [22] bslib_0.9.0         evaluate_1.0.4      yaml_2.3.10         ## [25] BiocManager_1.30.26 jsonlite_2.0.0      htmlwidgets_1.6.4   ## [28] rlang_1.1.6         fs_1.6.6"},{"path":"https://csbg.github.io/SplineOmics/articles/Docker_permission_denied.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Docker_permission_denied","text":"","code":"#> R version 4.5.1 (2025-06-13) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.5 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.10.0  #> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=de_AT.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=de_AT.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=de_AT.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=de_AT.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: Europe/Vienna #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices datasets  utils     methods   base      #>  #> loaded via a namespace (and not attached): #>  [1] digest_0.6.37       desc_1.4.3          R6_2.6.1            #>  [4] fastmap_1.2.0       xfun_0.52           cachem_1.1.0        #>  [7] knitr_1.50          htmltools_0.5.8.1   rmarkdown_2.29      #> [10] lifecycle_1.0.4     cli_3.6.5           sass_0.4.10         #> [13] pkgdown_2.1.3       textshaping_1.0.1   jquerylib_0.1.4     #> [16] renv_1.1.4          systemfonts_1.2.3   compiler_4.5.1      #> [19] rstudioapi_0.17.1   tools_4.5.1         ragg_1.4.0          #> [22] bslib_0.9.0         evaluate_1.0.4      yaml_2.3.10         #> [25] BiocManager_1.30.26 jsonlite_2.0.0      htmlwidgets_1.6.4   #> [28] rlang_1.1.6         fs_1.6.6"},{"path":"https://csbg.github.io/SplineOmics/articles/PVC_analysis.html","id":"about-this-tutorial","dir":"Articles","previous_headings":"","what":"About this tutorial","title":"PVC_analysis","text":"tutorial demonstrates excursion-analysis capabilities SplineOmics package walking complete, real-world phosphoproteomics example start finish. context time series data, excursion refers transient deviation baseline — concept borrowed signal processing. short-term, local shifts can reveal biologically meaningful events captured global trends. Details excursions detected described section PVC test, method specifically designed identify local patterns. core strength SplineOmics lies modeling global temporal patterns using smoothing splines, many biologically important phenomena present localized events. may well captured standard spline fits due smooth global nature. example, phosphoproteomics data, might observe sharp, temporary phosphorylation spike specific timepoint following stimulus — pattern returns baseline shortly afterward. transient peak can indicate key signaling activation event functionally critical, smoothed diluted traditional spline-based analyses. handle scenarios, developed PVC test (described ), specifically designed detect sharp, local excursions time-resolved omics data.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/PVC_analysis.html","id":"note-1","dir":"Articles","previous_headings":"About this tutorial","what":"Note 1","title":"PVC_analysis","text":"documentation SplineOmics package functions can viewed ","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/PVC_analysis.html","id":"note-2","dir":"Articles","previous_headings":"About this tutorial","what":"Note 2","title":"PVC_analysis","text":"vignette focuses excursion-analysis. general functionalities SplineOmics explained get-started vignette.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/PVC_analysis.html","id":"the-pvc-test","dir":"Articles","previous_headings":"","what":"The PVC Test","title":"PVC_analysis","text":"PVC stands Peak, Valley, Cliff. PVC test method identify distinct local patterns (called excursions) time series data using compound contrast approach within limma framework. context: peak occurs timepoint significantly higher immediate neighbors. valley occurs timepoint significantly lower neighbors. cliff describes sharp directional shift: one neighbor similar value, significantly different (higher lower).","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/PVC_analysis.html","id":"method","dir":"Articles","previous_headings":"The PVC Test","what":"Method","title":"PVC_analysis","text":"PVC analysis implemented rolling, compound contrast applied across time series. Specifically, window three consecutive timepoints evaluated time:(Tᵢ₋₁, Tᵢ, Tᵢ₊₁) Tᵢ center window. first last timepoints excluded analysis, since lack left right neighbors. triplet, contrast defined : 2*Tᵢ - Tᵢ₋₁ - Tᵢ₊₁ contrast measures whether center point Tᵢ deviates neighbors direction: Tᵢ greater neighbors → large positive contrast → indicates peak Tᵢ lower neighbors → large negative contrast → indicates valley Tᵢ lies neighbors → effects cancel → contrast near zero → signal contrast tested using limma, result p-value indicates whether observed pattern statistically significant feature (e.g., gene, phosphosite).","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/PVC_analysis.html","id":"multiple-testing-correction","dir":"Articles","previous_headings":"The PVC Test","what":"Multiple Testing Correction","title":"PVC_analysis","text":"test performed independently center timepoint across features, multiple testing correction applied timepoint level. ensures significance inflated due repeated testing across features. Importantly, PVC assess whether entire feature contains full peak/valley/cliff pattern time — evaluates timepoint independently local patterns.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/PVC_analysis.html","id":"details-about-the-dataset","dir":"Articles","previous_headings":"","what":"Details about the dataset","title":"PVC_analysis","text":"example dataset used involves time-series phosphoproteomics experiment, CHO (chinese hamster ovary) cells cultivated three bioreactors (three biological replicates). experiment includes following setup: Samples taken exponential stationary growth phases. 60 minutes feeding 15, 60, 90, 120, 240 minutes feeding Note dataset truncated 1000 rows file size reasons annotation info, gene name, randomly shuffled.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/PVC_analysis.html","id":"load-the-packages","dir":"Articles","previous_headings":"","what":"Load the packages","title":"PVC_analysis","text":"","code":"library(SplineOmics) library(here) # For managing filepaths #> here() starts at /home/thomas/Documents/PhD/projects/DGTX/SplineOmics_hub/SplineOmics library(dplyr) # For data manipulation #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(knitr) # For Showing the head of the data and the meta tables."},{"path":"https://csbg.github.io/SplineOmics/articles/PVC_analysis.html","id":"load-the-files","dir":"Articles","previous_headings":"","what":"Load the files","title":"PVC_analysis","text":"example, proteomics_data.rds file contains numeric values (intensities) also feature descriptions, gene protein name (= annotation part). Usually, load data example Excel file, .rds file compressed, reason format chosen limit size SplineOmics package. file meta.xlsx contains meta information, descriptions columns numeric values data. (example files part package don’t present system). Please note dataset actual experimental dataset, annotation information, gene names, removed since yet published time making SplineOmics package public. Instead, dataset includes randomly generated gene symbols gene names corresponding Cricetulus griseus (Chinese Hamster) row. intended demonstrate functionality package. left part data contains numeric values, right part annotation info, can copied separate dataframe, shown .","code":"data <- readRDS(xzfile(system.file(   \"extdata\",   \"phosphoproteomics_data.rds.xz\",   package = \"SplineOmics\" )))  meta <- read.csv(   system.file(     \"extdata\",     \"phosphoproteomics_meta.csv\",     package = \"SplineOmics\"   ),   stringsAsFactors = FALSE )  # Extract the annotation part from the dataframe. first_na_col <- which(is.na(data[1, ]))[1] annotation <- data |> dplyr::select((first_na_col + 1):ncol(data))"},{"path":"https://csbg.github.io/SplineOmics/articles/PVC_analysis.html","id":"show-top-rows-of-data","dir":"Articles","previous_headings":"Load the files","what":"Show top rows of data","title":"PVC_analysis","text":"","code":"kable(   head(data),   format = \"markdown\"   )"},{"path":"https://csbg.github.io/SplineOmics/articles/PVC_analysis.html","id":"show-top-rows-of-meta","dir":"Articles","previous_headings":"Load the files","what":"Show top rows of meta","title":"PVC_analysis","text":"","code":"kable(   head(meta),   format = \"markdown\"   )"},{"path":"https://csbg.github.io/SplineOmics/articles/PVC_analysis.html","id":"show-top-rows-of-annotation","dir":"Articles","previous_headings":"Load the files","what":"Show top rows of annotation","title":"PVC_analysis","text":"","code":"kable(   head(annotation),   format = \"markdown\"   )"},{"path":"https://csbg.github.io/SplineOmics/articles/PVC_analysis.html","id":"bring-the-inputs-into-the-standardized-format","dir":"Articles","previous_headings":"Load the files","what":"Bring the Inputs into the Standardized Format","title":"PVC_analysis","text":"","code":"data <- SplineOmics::extract_data(   # The dataframe with the numbers on the left and info on the right.   data = data,   # Use this annotation column for the feature names.   feature_name_columns = c(\"T..Gene\"),   use_row_index = TRUE,   # makes the feature names unique with row index   top_row = 1,   bottom_row = 1000,   right_col = 36,   left_col = 1 )"},{"path":"https://csbg.github.io/SplineOmics/articles/PVC_analysis.html","id":"splineomics-object","dir":"Articles","previous_headings":"Load the files","what":"SplineOmics Object","title":"PVC_analysis","text":"","code":"# Those fields are mandatory, because we believe that when such a report is # opened after half a year, those infos can be very helpful. report_info <- list(   omics_data_type = \"PPTX\",   data_description = \"Phosphoproteomics data of CHO cells\",   data_collection_date = \"February 2024\",   analyst_name = \"Thomas Rauter\",   contact_info = \"thomas.rauter@plus.ac.at\",   project_name = \"DGTX\" ) # splineomics now contains the SplineOmics object. splineomics <- SplineOmics::create_splineomics(   data = data,   meta = meta,   annotation = annotation,   report_info = report_info,   condition = \"Phase\", # Column of meta that contains the levels.   meta_batch_column = \"Reactor\", # For batch effect removal )"},{"path":"https://csbg.github.io/SplineOmics/articles/PVC_analysis.html","id":"run-the-pvc-analysis","dir":"Articles","previous_headings":"","what":"Run the PVC-analysis","title":"PVC_analysis","text":"terminal output function gives information total amount excursions found level, also breakdown timepoint type excursion (p = peak, v = valley, b = bottom cliff, t = top cliff, always respective timepoint mentioned row). can see resulting HTML report.","code":"plot_info <- list(   y_axis_label = \"log2 intensity\",   time_unit = \"min\",   treatment_labels = list(\"feeding\"),   treatment_timepoints = list(0) ) # Check out the documentation of the function under the Reference tab. excursion_plots <- SplineOmics::find_pvc(   splineomics = splineomics,   alphas = 0.025,   plot_info = plot_info,   report_dir = withr::local_tempdir() ) #> Warning: The data contains missing values (NA). Ensure that imputation or handling of missing values aligns with your analysis requirements. Note that limma can  handle missing values (it just ignores them), and therefore  also SplineOmics can handle them. #> Warning: Partial NA coefficients for 200 probe(s) #>  #> Detected 1 total pattern hits for condition level: Exponential #>  #> Summary by pattern type: #> p: 0, v: 1, b: 0, t: 0 #>  #> Breakdown by timepoint: #> -60: p=0; v=0; b=0; t=0 #> 15: p=0; v=0; b=0; t=0 #> 60: p=0; v=0; b=0; t=0 #> 90: p=0; v=1; b=0; t=0 #> 120: p=0; v=0; b=0; t=0 #> 240: p=0; v=0; b=0; t=0 #> Warning: Partial NA coefficients for 205 probe(s) #>  #> Detected 12 total pattern hits for condition level: Stationary #>  #> Summary by pattern type: #> p: 8, v: 3, b: 1, t: 0 #>  #> Breakdown by timepoint: #> -60: p=0; v=0; b=0; t=0 #> 15: p=0; v=1; b=1; t=0 #> 60: p=8; v=2; b=0; t=0 #> 90: p=0; v=0; b=0; t=0 #> 120: p=0; v=0; b=0; t=0 #> 240: p=0; v=0; b=0; t=0 #>  #>  Info PVC report generation completed successfully. #>  Your HTML reports are located in the directory:  /tmp/RtmpS8JXXs/file9ccd6a8d887 . #>  Please note that due to embedded files, the reports might be flagged as #>  harmful by other software. Rest assured that they provide no harm."},{"path":"https://csbg.github.io/SplineOmics/articles/PVC_analysis.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"PVC_analysis","text":"","code":"#> R version 4.5.1 (2025-06-13) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.5 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.10.0  #> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=de_AT.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=de_AT.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=de_AT.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=de_AT.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: Europe/Vienna #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices datasets  utils     methods   base      #>  #> other attached packages: #> [1] knitr_1.50        dplyr_1.1.4       here_1.0.1        SplineOmics_0.3.1 #>  #> loaded via a namespace (and not attached): #>   [1] Rdpack_2.6.4             bitops_1.0-9             pbapply_1.7-2            #>   [4] writexl_1.5.4            rlang_1.1.6              magrittr_2.0.3           #>   [7] clue_0.3-66              GetoptLong_1.0.5         matrixStats_1.5.0        #>  [10] compiler_4.5.1           reshape2_1.4.4           png_0.1-8                #>  [13] systemfonts_1.2.3        vctrs_0.6.5              stringr_1.5.1            #>  [16] pkgconfig_2.0.3          shape_1.4.6.1            crayon_1.5.3             #>  [19] fastmap_1.2.0            backports_1.5.0          labeling_0.4.3           #>  [22] caTools_1.18.3           rmarkdown_2.29           nloptr_2.2.1             #>  [25] ragg_1.4.0               purrr_1.1.0              xfun_0.52                #>  [28] cachem_1.1.0             jsonlite_2.0.0           progress_1.2.3           #>  [31] EnvStats_3.1.0           remaCor_0.0.18           gmp_0.7-5                #>  [34] BiocParallel_1.42.1      broom_1.0.8              parallel_4.5.1           #>  [37] prettyunits_1.2.0        cluster_2.1.8.1          R6_2.6.1                 #>  [40] stringi_1.8.7            bslib_0.9.0              RColorBrewer_1.1-3       #>  [43] limma_3.64.1             car_3.1-3                boot_1.3-31              #>  [46] ClusterR_1.3.3           numDeriv_2016.8-1.1      jquerylib_0.1.4          #>  [49] Rcpp_1.1.0               iterators_1.0.14         base64enc_0.1-3          #>  [52] IRanges_2.42.0           Matrix_1.7-3             splines_4.5.1            #>  [55] tidyselect_1.2.1         rstudioapi_0.17.1        abind_1.4-8              #>  [58] yaml_2.3.10              doParallel_1.0.17        gplots_3.2.0             #>  [61] codetools_0.2-19         plyr_1.8.9               lmerTest_3.1-3           #>  [64] lattice_0.22-5           tibble_3.3.0             withr_3.0.2              #>  [67] Biobase_2.68.0           evaluate_1.0.4           desc_1.4.3               #>  [70] zip_2.3.3                circlize_0.4.16          pillar_1.11.0            #>  [73] BiocManager_1.30.26      carData_3.0-5            KernSmooth_2.23-26       #>  [76] renv_1.1.4               foreach_1.5.2            stats4_4.5.1             #>  [79] reformulas_0.4.1         generics_0.1.4           rprojroot_2.1.0          #>  [82] S4Vectors_0.46.0         hms_1.1.3                ggplot2_3.5.2            #>  [85] scales_1.4.0             aod_1.3.3                minqa_1.2.8              #>  [88] gtools_3.9.5             RhpcBLASctl_0.23-42      glue_1.8.0               #>  [91] tools_4.5.1              fANCOVA_0.6-1            variancePartition_1.38.0 #>  [94] lme4_1.1-37              mvtnorm_1.3-3            fs_1.6.6                 #>  [97] grid_4.5.1               tidyr_1.3.1              rbibutils_2.3            #> [100] colorspace_2.1-1         nlme_3.1-168             Formula_1.2-5            #> [103] cli_3.6.5                textshaping_1.0.1        svglite_2.2.1            #> [106] ComplexHeatmap_2.24.1    corpcor_1.6.10           gtable_0.3.6             #> [109] sass_0.4.10              digest_0.6.37            BiocGenerics_0.54.0      #> [112] pbkrtest_0.5.4           ggrepel_0.9.6            rjson_0.2.23             #> [115] htmlwidgets_1.6.4        farver_2.1.2             htmltools_0.5.8.1        #> [118] pkgdown_2.1.3            lifecycle_1.0.4          GlobalOptions_0.1.2      #> [121] statmod_1.5.0            MASS_7.3-65"},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq analysis.html","id":"about-this-vignette","dir":"Articles","previous_headings":"","what":"About this vignette","title":"RNA-seq analysis","text":"tutorial intends showcase explain capabilities SplineOmics package walking real complete RNA-seq example, start finish. SplineOmics explained detail get-started vignette, proteomics example covered. vignette focused showing RNA-seq data can used, , less details overall package provided .","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq analysis.html","id":"data-overview","dir":"Articles","previous_headings":"About this vignette","what":"Data Overview","title":"RNA-seq analysis","text":"dataset originates time-series RNA-seq experiment designed study Chinese Hamster Ovary (CHO) cells. experiment involved cultivating cells eight bioreactors, four bioreactors subjected temperature shift 146 hours (experimental condition) remaining four bioreactors maintained without temperature shift (control condition).","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq analysis.html","id":"timepoints","dir":"Articles","previous_headings":"About this vignette > Data Overview","what":"Timepoints","title":"RNA-seq analysis","text":"Samples collected 17 distinct time points throughout experiment, specifically: \"72h\", \"76h\", \"96h\", \"120h\", \"124h\", \"144h\", \"148h\", \"152h\", \"168h\", \"192h\", \"216h\", \"220h\", \"240h\", \"264h\", \"268h\", \"288h\", \"312h\" cultivation start. time point sampled eight bioreactors, resulting total 136 samples.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq analysis.html","id":"effects-in-the-experiment-reactor-and-plate","dir":"Articles","previous_headings":"About this vignette > Data Overview","what":"Effects in the Experiment: Reactor and Plate","title":"RNA-seq analysis","text":"experiment, two effects consider: Reactor Plate. refers different bioreactors used cell cultivation, can exhibit substantial variability. reactor assigned single condition: either constant temperature temperature-shifted. result, condition reactor confounded. Reactor treated fixed effect simply remove influence. Instead, treated random effect, allows us model variability appropriately. refers two separate plates used RNA-seq analysis samples. fully random design employed distribute samples across two plates, ensuring bias assignment. Plate considered batch effect respect condition (constant temperature vs. temperature-shifted). Since condition reactor confounded, variability due reactors directly separated condition. Instead, linear mixed models (LMMs) used attribute reactor random effect, allowing us account variability isolating effects condition. approach ensures analysis appropriately handles hierarchical structure data avoids incorrect conclusions. vignette, demonstrate use linear mixed models address challenges properly account reactor plate effects.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq analysis.html","id":"further-info","dir":"Articles","previous_headings":"About this vignette > Data Overview","what":"Further info","title":"RNA-seq analysis","text":"data matrix comprises genes rows samples columns, providing gene expression measurements time points. sample initially sequenced three technical replicates across two NovaSeq X flow cells. technical replicates collapsed generate final dataset used analysis. goal experiment investigate effect temperature shift CHO cell cultivation gene expression dynamics time. Note: original dataset, yet published time vignette’s creation. demonstration purposes, genes randomly shuffled, subset data included reduce dataset size.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq analysis.html","id":"analysis-goals","dir":"Articles","previous_headings":"About this vignette","what":"Analysis Goals","title":"RNA-seq analysis","text":"main objectives analysis : Identify genes significant temporal changes: Among thousands genes measured, goal identify exhibit significant changes expression time. Cluster genes based temporal patterns: Genes showing significant temporal changes (hits) grouped clusters based time-dependent expression patterns. Perform gene set enrichment analysis: cluster, gene set enrichment analysis conducted identify whether specific biological pathways processes - downregulated response feeding processes influenced temperature shift. Assess impact temperature shifts temporal patterns: analysis determine whether temporal patterns gene expression affected temperature shift, .e., whether gene expression dynamics differ time temperature shift conditions compared controls.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq analysis.html","id":"load-the-packages","dir":"Articles","previous_headings":"","what":"Load the packages","title":"RNA-seq analysis","text":"","code":"library(SplineOmics) #> Warning: replacing previous import 'limma::topTable' by #> 'variancePartition::topTable' when loading 'SplineOmics' library(readr) # For reading the meta CSV file library(here)  # For managing filepaths #> here() starts at /tmp/RtmpVgXgie library(dplyr) # For data manipulation #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(knitr) # For Showing the head of the data and the meta tables."},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq analysis.html","id":"load-the-files","dir":"Articles","previous_headings":"","what":"Load the files","title":"RNA-seq analysis","text":"","code":"data <- readRDS(xzfile(system.file(   \"extdata\",   \"rna_seq_data.rds.xz\",   package = \"SplineOmics\" )))  meta <- readr::read_csv(   system.file(     \"extdata\",     \"rna_seq_meta.csv\",     package = \"SplineOmics\"   ),   show_col_types = FALSE )"},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq analysis.html","id":"show-top-rows-of-data","dir":"Articles","previous_headings":"Load the files","what":"Show top rows of data","title":"RNA-seq analysis","text":"data: numeric matrix row represents gene (features) column corresponds sample. row names matrix contain gene identifiers, columns aligned sample metadata meta. matrix contains expression values 136 samples. Note study conducted blinded manner, samples randomly distributed across two plates RNA-seq analysis. result, sample numbers (e.g., 1, 2, 3, etc.) sequential order respect time, condition, plate. data analysis involving splines time, essential sort samples based time establish valid temporal sequence. Additionally, organizing data way improves clarity ensures consistency. Within time point, samples sorted condition (e.g., constant temp_shift) , subsequently, plate (e.g., plate_1 plate_2).","code":"kable(   head(data),   format = \"markdown\"   )"},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq analysis.html","id":"show-top-rows-of-meta","dir":"Articles","previous_headings":"Load the files","what":"Show top rows of meta","title":"RNA-seq analysis","text":"meta: data frame containing metadata information samples data. row meta corresponds column data, ensuring 1:1 alignment metadata entries expression data samples. columns meta describe various attributes samples, SampleNr, Reactor, Time, Condition, Plate.","code":"kable(   head(meta),   format = \"markdown\"   )"},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq analysis.html","id":"preprocess-the-data","dir":"Articles","previous_headings":"","what":"Preprocess the data","title":"RNA-seq analysis","text":"Filter data rows (genes) zero counts across samples. step standard preprocessing procedure RNA-seq data analysis, genes zero counts samples provide information downstream analyses.","code":"rows_before <- nrow(data)  # Filter data rows data <- data[rowSums(data) > 0, ]  rows_after <- nrow(data) rows_removed <- rows_before - rows_after  cat(sprintf(   \"Rows before filtering: %d\\nRows after filtering: %d\\nRows removed: %d\\n\",    rows_before,   rows_after,   rows_removed   )) #> Rows before filtering: 1000 #> Rows after filtering: 944 #> Rows removed: 56"},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq analysis.html","id":"perform-eda-exploratory-data-analysis","dir":"Articles","previous_headings":"","what":"Perform EDA (exploratory data analysis)","title":"RNA-seq analysis","text":"can see HTML report explore_data() function batch-corrected data, report batch-corrected data.","code":"report_info <- list(   omics_data_type = \"RNA\",   data_description = \"RNA-seq data of CHO cells\",   data_collection_date = \"December 2024\",   analyst_name = \"Thomas Rauter\",   contact_info = \"thomas.rauter@plus.ac.at\",   project_name = \"DGTX\" )  report_dir <- here::here(   \"results\",   \"explore_data\" ) splineomics <- SplineOmics::create_splineomics(   data = data,   meta = meta,   report_info = report_info,   condition = \"Condition\",    # Column of meta that contains the levels.   meta_batch_column = \"Plate\" # Remove batch effect for plotting. ) plots <- SplineOmics::explore_data(   splineomics = splineomics,    report_dir = report_dir )"},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq analysis.html","id":"run-limma-spline-analysis","dir":"Articles","previous_headings":"","what":"Run limma spline analysis","title":"RNA-seq analysis","text":"example, skipping finding best hyperparameters screen_limma_hyperparams() function, already clear idea use. Lets define parameters put SplineOmics object: Preprocess RNA-seq data limma::voom. method transforms raw RNA-seq counts log-counts per million (logCPM) modeling mean-variance relationship. assigns precision weights observation, ensuring accurate linear modeling RNA-seq data, often exhibits heteroscedasticity (varying variance across expression levels). normalize data, TMM (Trimmed Mean M-values) normalization applied using DGEList object edgeR package, correcting library size differences compositional biases. random effects included design, function automatically uses voomWithDreamWeights variancePartition package instead. method extends voom incorporating random effects model, allowing precise handling complex experimental designs repeated measures hierarchical structures. calculated weights account fixed random effects, providing robust results differential expression analysis. can customize normalization method providing specific normalization function normalize_func argument preprocess_rna_seq_data() function. details use feature, please refer function documentation available ‘References’ website. Additionally, use preprocess_rna_seq_data() optional RNA-seq data. Alternatively, can use limma::voom function directly pass resulting voom object rna_seq_data argument create_splineomics() update_splineomics(). Alongside , must pass $E data matrix data argument. general, long data argument contains actual data matrix rna_seq_data argument contains object compatible limma, data correctly processed. Run run_limma_splines() function updated SplineOmics object: output function run_limma_splines() named list, element specific “category” results. Refer document explanation different result categories. elements list, containing elements respective limma topTables, either level comparison two levels. element “time_effect” list, element topTable p-value feature respective level reported. element “avrg_diff_conditions” list contains elements topTables, represent comparison average differences levels. element “interaction_condition_time” list contains elements topTables, represent interaction levels (includes time average differences)","code":"spline_params = list(   spline_type = c(\"n\"),    # natural cubic splines   dof = c(3L)              # Degree of freedom of 3 for the splines. )  design <- \"~ 1 + Condition*Time + Plate + (1|Reactor)\"  splineomics <- SplineOmics::update_splineomics(   splineomics = splineomics,   data = data,   design = design,    # dream_params = dream_params,   if we would want to adjust dream()   # means limma \"borrows\" statistical power from the other levels   mode = \"integrated\",    spline_params = spline_params ) voom_obj <- SplineOmics::preprocess_rna_seq_data(   splineomics = splineomics ) #> Column 'Plate' of meta will be used to remove the batch effect for the plotting #> Make sure that the design formula contains no interaction between the condition and time for mode == isolated, and that it contains an interaction for mode == integrated. Otherwise, you will get an uncaught error of 'coefficients not estimable' or 'subscript out of bounds'. #> Preprocessing RNA-seq data (normalization + voom)... splineomics <- SplineOmics::update_splineomics(   splineomics = splineomics,   data = voom_obj$E,   rna_seq_data = voom_obj ) splineomics <- SplineOmics::run_limma_splines(   splineomics = splineomics ) #> Hint: The data contains negative values. This may occur if the data has been transformed (e.g., log-transformed or normalized) and is valid in such cases. Ensure that the data preprocessing  aligns with your analysis requirements. #> Column 'Plate' of meta will be used to remove the batch effect for the plotting #> Make sure that the design formula contains no interaction between the condition and time for mode == isolated, and that it contains an interaction for mode == integrated. Otherwise, you will get an uncaught error of 'coefficients not estimable' or 'subscript out of bounds'. #> Info limma spline analysis completed successfully"},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq analysis.html","id":"build-limma-report","dir":"Articles","previous_headings":"","what":"Build limma report","title":"RNA-seq analysis","text":"topTables three limma result categories can used generate p-value histograms volcano plots. can view generated analysis report create_limma_report function .","code":"report_dir <- here::here(   \"results\",   \"limma_reports\" )  plots <- SplineOmics::create_limma_report(   splineomics = splineomics,   report_dir = report_dir )"},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq analysis.html","id":"cluster-the-hits-significant-features","dir":"Articles","previous_headings":"","what":"Cluster the hits (significant features)","title":"RNA-seq analysis","text":"obtained limma spline results, can cluster hits based temporal pattern (spline shape). define hit setting adj. p-value threshold every level. Hits features (genes ) adj. p-value threshold. Hierarchical clustering used place every hit one many clusters specified specific level. Note dataset, vast amount hits. useful thousands individual plots, also takes long time compute resulting HTML large size, want limit hits plotted. several options: Use low adjusted p-value: approach filters significant features (genes) proceeding analysis visualization. Access customize data: Modify dataframes inside SplineOmics object removing selected set features (genes) plotting. Optimize clustering without generating report: Set report argument cluster_hits() function FALSE (default TRUE). skips generation HTML report, significantly speeding computation omitting creation export plots. can view generated analysis report cluster_hits function . discussed , three limma result categories. cluster_hits() report shows results three, present (category 2 3 can generated design formula contains interaction effect).","code":"# Note: The low adj. p-values are to have less results, so that the HTML report # is smaller in file size. adj_pthresholds <- c(   # 0.0000001 for both levels   0.0000001, # constant (temperature)      0.0000001  # temp_shift )  clusters <- c(   4L,  # 4 clusters for constant   4L   # 4 clusters for temp_shift )  report_dir <- here::here(   \"results\",   \"clustering_reports\" )  # treatment_labels allows to place vertical dashed lines into the plots, that # indicate a treatment, such as \"temp shift\" in this experiment. For each level, # the treatment can be specified individually. For the \"double spline plots\",  # where two levels are combined into one plot, treatment lines can also be  # defined. The correct fieldname for those is {first_level}_{second_level},  # with first_level being the level of the two occuring first in the respective # meta column, and second_level the one that occurs after.  # Here, we don't want a treatment line for the constant level, since no  # treatment was applied. To achieve that, we simply set it to NA or leave it # out.  treatment_labels = list(   # constant = NA,    temp_shift = \"temp shift\",     constant_temp_shift = \"temp shift\"    )  # treatment_timepoints allows to specify the timepoint, at which the vertical # dashed treatment line is placed. Again, for the constant level, we don't # have a treatment, so we also do not specify a timepoint. treatment_timepoints = list(   # constant = NA,   temp_shift = 146,     constant_temp_shift = 146   )  plot_info <- list( # For the spline plots   y_axis_label = \"log2 counts\",   time_unit = \"min\", # our measurements were in minutes   # When you simply want to add a given treatment line to all conditions (   # including all double spline plot comparisons) then you can do it in the    # following way (commented out here):    )   # treatment_labels = list(\"temp shift\"), # add for all conditions   # treatment_timepoints = list(146)       # temp shift was at 146 hours.   treatment_labels = treatment_labels,   treatment_timepoints = treatment_timepoints )  genes <- rownames(data)  plot_options <- list(   # When meta_replicate_column is not there, all datapoints are blue.   meta_replicate_column = \"Reactor\" # Colors the data points based on Reactor )  clustering_results <- SplineOmics::cluster_hits(   splineomics = splineomics,   adj_pthresholds = adj_pthresholds,   clusters = clusters,   genes = genes,   plot_info = plot_info,   plot_options = plot_options,   report_dir = report_dir,   adj_pthresh_avrg_diff_conditions = 0.0000001,   adj_pthresh_interaction_condition_time = 0.0000001 )"},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq analysis.html","id":"perform-gene-set-enrichment-analysis-gsea","dir":"Articles","previous_headings":"","what":"Perform gene set enrichment analysis (GSEA)","title":"RNA-seq analysis","text":"clustered hits identified, subsequent step gain biological insights perform GSEA. , respective genes can assigned clustered hit, GSEA can carried . proceed, Enrichr databases choice need downloaded: Per default file placed current working directory, root dir R project. run GSEA, downloaded database file loaded dataframe. , optionally, clusterProfiler parameters report dir can specified. function create_gsea_report() runs GSEA using clusterProfiler, generates HTML report returns GSEA dotplots R. function runs clusterProfiler clusters levels, generates HTML report: can view generated analysis report run_gsea function .","code":"# Specify which databases you want to download from Enrichr gene_set_lib <- c(   \"WikiPathways_2019_Human\",   \"NCI-Nature_2016\",   \"TRRUST_Transcription_Factors_2019\",   \"MSigDB_Hallmark_2020\",   \"GO_Cellular_Component_2018\",   \"CORUM\",   \"KEGG_2019_Human\",   \"TRANSFAC_and_JASPAR_PWMs\",   \"ENCODE_and_ChEA_Consensus_TFs_from_ChIP-X\",   \"GO_Biological_Process_2018\",   \"GO_Molecular_Function_2018\",   \"Human_Gene_Atlas\" )  SplineOmics::download_enrichr_databases(   gene_set_lib = gene_set_lib,   output_dir = here::here(),   # output into the current working dir (default)   filename = \"databases.tsv\"   # just the name of the file, not the full path ) # Specify the filepath of the TSV file with the database info downloaded_dbs_filepath <- here::here(   \"databases.tsv\"   )  # Load the file databases <- read.delim(   downloaded_dbs_filepath,   sep = \"\\t\",   stringsAsFactors = FALSE )  # Specify the clusterProfiler parameters clusterProfiler_params <- list(   pvalueCutoff = 0.05,   pAdjustMethod = \"BH\",   minGSSize = 10,   maxGSSize = 500,   qvalueCutoff = 0.2 )  report_dir <- here::here(   \"results\",   \"gsea_reports\" ) result <- SplineOmics::run_gsea(   # A dataframe with three columns: feature, cluster, and gene. Feature contains   # the integer index of the feature, cluster the integer specifying the cluster   # number, and gene the string of the gene, such as \"CLSTN2\".   levels_clustered_hits = clustering_results$clustered_hits_levels,   databases = databases,   clusterProfiler_params = clusterProfiler_params,   report_info = report_info,   report_dir = report_dir )"},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq analysis.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"RNA-seq analysis","text":"","code":"#> R version 4.3.3 (2024-02-29) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.5 LTS #>  #> Matrix products: default #> BLAS:   /usr/local/R-4.3.3/lib/R/lib/libRblas.so  #> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=de_AT.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=de_AT.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=de_AT.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=de_AT.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: Europe/Vienna #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices datasets  utils     methods   base      #>  #> other attached packages: #> [1] knitr_1.49        dplyr_1.1.4       here_1.0.1        readr_2.1.5       #> [5] SplineOmics_0.1.2 #>  #> loaded via a namespace (and not attached): #>   [1] Rdpack_2.6.2             bitops_1.0-9             gridExtra_2.3            #>   [4] rlang_1.1.5              magrittr_2.0.3           clue_0.3-66              #>   [7] GetoptLong_1.0.5         matrixStats_1.5.0        compiler_4.3.3           #>  [10] reshape2_1.4.4           png_0.1-8                systemfonts_1.2.1        #>  [13] vctrs_0.6.5              stringr_1.5.1            pkgconfig_2.0.3          #>  [16] shape_1.4.6.1            crayon_1.5.3             fastmap_1.2.0            #>  [19] backports_1.5.0          caTools_1.18.3           rmarkdown_2.29           #>  [22] tzdb_0.4.0               nloptr_2.1.1             ragg_1.3.3               #>  [25] bit_4.5.0.1              purrr_1.0.4              xfun_0.50                #>  [28] cachem_1.1.0             jsonlite_1.8.9           progress_1.2.3           #>  [31] EnvStats_3.0.0           remaCor_0.0.18           BiocParallel_1.36.0      #>  [34] broom_1.0.7              parallel_4.3.3           prettyunits_1.2.0        #>  [37] cluster_2.1.6            R6_2.5.1                 bslib_0.9.0              #>  [40] stringi_1.8.4            RColorBrewer_1.1-3       limma_3.58.1             #>  [43] boot_1.3-29              numDeriv_2016.8-1.1      jquerylib_0.1.4          #>  [46] Rcpp_1.0.14              iterators_1.0.14         base64enc_0.1-3          #>  [49] IRanges_2.36.0           Matrix_1.6-5             splines_4.3.3            #>  [52] tidyselect_1.2.1         rstudioapi_0.17.1        yaml_2.3.10              #>  [55] viridis_0.6.5            doParallel_1.0.17        gplots_3.2.0             #>  [58] codetools_0.2-19         plyr_1.8.9               lmerTest_3.1-3           #>  [61] lattice_0.22-5           tibble_3.2.1             withr_3.0.2              #>  [64] Biobase_2.62.0           evaluate_1.0.3           desc_1.4.3               #>  [67] zip_2.3.2                circlize_0.4.16          pillar_1.10.1            #>  [70] BiocManager_1.30.25      KernSmooth_2.23-22       renv_1.1.1               #>  [73] foreach_1.5.2            stats4_4.3.3             reformulas_0.4.0         #>  [76] generics_0.1.3           vroom_1.6.5              rprojroot_2.0.4          #>  [79] S4Vectors_0.40.2         hms_1.1.3                ggplot2_3.5.1            #>  [82] munsell_0.5.1            scales_1.3.0             aod_1.3.3                #>  [85] minqa_1.2.8              gtools_3.9.5             RhpcBLASctl_0.23-42      #>  [88] glue_1.8.0               pheatmap_1.0.12          tools_4.3.3              #>  [91] fANCOVA_0.6-1            dendextend_1.19.0        variancePartition_1.32.5 #>  [94] lme4_1.1-36              openxlsx_4.2.8           locfit_1.5-9.11          #>  [97] mvtnorm_1.3-3            fs_1.6.5                 grid_4.3.3               #> [100] tidyr_1.3.1              rbibutils_2.3            edgeR_4.0.16             #> [103] colorspace_2.1-1         nlme_3.1-164             patchwork_1.3.0          #> [106] cli_3.6.3                textshaping_1.0.0        viridisLite_0.4.2        #> [109] svglite_2.1.3            ComplexHeatmap_2.18.0    corpcor_1.6.10           #> [112] gtable_0.3.6             sass_0.4.9               digest_0.6.37            #> [115] BiocGenerics_0.48.1      pbkrtest_0.5.3           ggrepel_0.9.6            #> [118] rjson_0.2.23             htmlwidgets_1.6.4        farver_2.1.2             #> [121] htmltools_0.5.8.1        pkgdown_2.1.1            lifecycle_1.0.4          #> [124] GlobalOptions_0.1.2      statmod_1.5.0            bit64_4.6.0-1            #> [127] MASS_7.3-60.0.1"},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq-analysis.html","id":"about-this-vignette","dir":"Articles","previous_headings":"","what":"About this vignette","title":"RNA-seq-analysis","text":"tutorial intends showcase explain capabilities SplineOmics package walking real complete RNA-seq example, start finish. SplineOmics explained detail get-started vignette, proteomics example covered. vignette focused showing RNA-seq data can used, , less details overall package provided .","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq-analysis.html","id":"data-overview","dir":"Articles","previous_headings":"About this vignette","what":"Data Overview","title":"RNA-seq-analysis","text":"dataset originates time-series RNA-seq experiment designed study Chinese Hamster Ovary (CHO) cells. experiment involved cultivating cells eight bioreactors, four bioreactors subjected temperature shift 146 hours (experimental condition) remaining four bioreactors maintained without temperature shift (control condition).","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq-analysis.html","id":"timepoints","dir":"Articles","previous_headings":"About this vignette > Data Overview","what":"Timepoints","title":"RNA-seq-analysis","text":"Samples collected 17 distinct time points throughout experiment, specifically: \"72h\", \"76h\", \"96h\", \"120h\", \"124h\", \"144h\", \"148h\", \"152h\", \"168h\", \"192h\", \"216h\", \"220h\", \"240h\", \"264h\", \"268h\", \"288h\", \"312h\" cultivation start. time point sampled eight bioreactors, resulting total 136 samples.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq-analysis.html","id":"additonal-effects-in-the-experiment-reactor-and-plate","dir":"Articles","previous_headings":"About this vignette > Data Overview","what":"Additonal effects in the experiment: Reactor and Plate","title":"RNA-seq-analysis","text":"experiment, two effects consider: Reactor Plate. refers different bioreactors used cell cultivation, can exhibit substantial variability. reactor assigned single condition: either constant temperature temperature-shifted. result, condition reactor confounded. Reactor treated fixed effect simply remove influence. Instead, treated random effect, allows us model variability appropriately. refers two separate plates used RNA-seq analysis samples. fully random design employed distribute samples across two plates, ensuring bias assignment. Plate considered batch effect respect condition (constant temperature vs. temperature-shifted). Since reactor blocked effect, variability due reactors directly separated condition. Instead, linear mixed models (LMMs) used attribute reactor random effect, allowing us account variability isolating effects condition. approach ensures analysis appropriately handles hierarchical structure data avoids incorrect conclusions. vignette, demonstrate use linear mixed models address challenges properly account reactor plate effects.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq-analysis.html","id":"further-info","dir":"Articles","previous_headings":"About this vignette > Data Overview","what":"Further info","title":"RNA-seq-analysis","text":"data matrix comprises genes rows samples columns, providing gene expression measurements time points. sample initially sequenced three technical replicates across two NovaSeq X flow cells. technical replicates collapsed generate final dataset used analysis. goal experiment investigate effect temperature shift CHO cell cultivation gene expression dynamics time. Note: original dataset, yet published time vignette’s creation. demonstration purposes, genes randomly shuffled, subset data included reduce dataset size.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq-analysis.html","id":"analysis-goals","dir":"Articles","previous_headings":"About this vignette","what":"Analysis Goals","title":"RNA-seq-analysis","text":"main objectives analysis : Identify genes significant temporal changes: Among thousands genes measured, goal identify exhibit significant changes expression time. Cluster genes based temporal patterns: Genes showing significant temporal changes (hits) grouped clusters based time-dependent expression patterns. Perform gene set enrichment analysis: cluster, gene set enrichment analysis conducted identify whether specific biological pathways processes - downregulated response feeding processes influenced temperature shift. Assess impact temperature shifts temporal patterns: analysis determine whether temporal patterns gene expression affected temperature shift, .e., whether gene expression dynamics differ time temperature shift conditions compared controls.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq-analysis.html","id":"note","dir":"Articles","previous_headings":"About this vignette > Analysis Goals","what":"Note","title":"RNA-seq-analysis","text":"documentation SplineOmics package functions can viewed ","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq-analysis.html","id":"load-the-packages","dir":"Articles","previous_headings":"","what":"Load the packages","title":"RNA-seq-analysis","text":"","code":"library(SplineOmics) library(readr) # For reading the meta CSV file library(here)  # For managing filepaths #> here() starts at /home/thomas/Documents/PhD/projects/DGTX/SplineOmics_hub/SplineOmics library(dplyr) # For data manipulation #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(knitr) # For Showing the head of the data and the meta tables."},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq-analysis.html","id":"load-the-files","dir":"Articles","previous_headings":"","what":"Load the files","title":"RNA-seq-analysis","text":"","code":"data <- readRDS(xzfile(system.file(   \"extdata\",   \"rna_seq_data.rds.xz\",   package = \"SplineOmics\" )))  meta <- readr::read_csv(   system.file(     \"extdata\",     \"rna_seq_meta.csv\",     package = \"SplineOmics\"   ),   show_col_types = FALSE )"},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq-analysis.html","id":"show-top-rows-of-data","dir":"Articles","previous_headings":"Load the files","what":"Show top rows of data","title":"RNA-seq-analysis","text":"data: numeric matrix row represents gene (features) column corresponds sample. row names matrix contain gene identifiers, columns aligned sample metadata meta. matrix contains expression values 136 samples. Note study conducted blinded manner, samples randomly distributed across two plates RNA-seq analysis. result, sample numbers (e.g., 1, 2, 3, etc.) sequential order respect time, condition, plate. data analysis involving splines time, essential sort samples based time establish valid temporal sequence. Additionally, organizing data way improves clarity ensures consistency. Within time point, samples sorted condition (e.g., constant temp_shift) , subsequently, plate (e.g., plate_1 plate_2).","code":"kable(   head(data),   format = \"markdown\"   )"},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq-analysis.html","id":"show-top-rows-of-meta","dir":"Articles","previous_headings":"Load the files","what":"Show top rows of meta","title":"RNA-seq-analysis","text":"meta: data frame containing metadata information samples data. row meta corresponds column data, ensuring 1:1 alignment metadata entries expression data samples. columns meta describe various attributes samples, SampleNr, Reactor, Time, Condition, Plate.","code":"kable(   head(meta),   format = \"markdown\"   )"},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq-analysis.html","id":"preprocess-the-data","dir":"Articles","previous_headings":"","what":"Preprocess the data","title":"RNA-seq-analysis","text":"Filter data rows (genes) zero counts across samples. step standard preprocessing procedure RNA-seq data analysis, genes zero counts samples provide information downstream analyses.","code":"rows_before <- nrow(data)  # Filter data rows data <- data[rowSums(data) > 0, ]  rows_after <- nrow(data) rows_removed <- rows_before - rows_after  cat(sprintf(   \"Rows before filtering: %d\\nRows after filtering: %d\\nRows removed: %d\\n\",    rows_before,   rows_after,   rows_removed   )) #> Rows before filtering: 1000 #> Rows after filtering: 944 #> Rows removed: 56"},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq-analysis.html","id":"perform-eda-exploratory-data-analysis","dir":"Articles","previous_headings":"","what":"Perform EDA (exploratory data analysis)","title":"RNA-seq-analysis","text":"can see HTML report explore_data() function batch-corrected data, report batch-corrected data.","code":"report_info <- list(   omics_data_type = \"RNA\",   data_description = \"RNA-seq data of CHO cells\",   data_collection_date = \"December 2024\",   analyst_name = \"Thomas Rauter\",   contact_info = \"thomas.rauter@plus.ac.at\",   project_name = \"DGTX\" )  report_dir <- here::here(   \"results\",   \"explore_data\" ) splineomics <- SplineOmics::create_splineomics(   data = data,   meta = meta,   report_info = report_info,   condition = \"Condition\",    # Column of meta that contains the levels.   meta_batch_column = \"Plate\" # Remove batch effect for plotting. ) plots <- SplineOmics::explore_data(   splineomics = splineomics,    report_dir = report_dir )"},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq-analysis.html","id":"run-limma-spline-analysis","dir":"Articles","previous_headings":"","what":"Run limma spline analysis","title":"RNA-seq-analysis","text":"example, skipping finding best hyperparameters screen_limma_hyperparams() function, already clear idea use. Lets define parameters put SplineOmics object: Preprocess RNA-seq data limma::voom. method transforms raw RNA-seq counts log-counts per million (logCPM) modeling mean-variance relationship. assigns precision weights observation, ensuring accurate linear modeling RNA-seq data, often exhibits heteroscedasticity (varying variance across expression levels). normalize data, TMM (Trimmed Mean M-values) normalization applied using DGEList object edgeR package, correcting library size differences compositional biases. random effects included design, function automatically uses voomWithDreamWeights variancePartition package instead. method extends voom incorporating random effects model, allowing precise handling complex experimental designs repeated measures hierarchical structures. calculated weights account fixed random effects, providing robust results differential expression analysis. can customize normalization method providing specific normalization function normalize_func argument preprocess_rna_seq_data() function. details use feature, please refer function documentation available ‘References’ website. Additionally, use preprocess_rna_seq_data() optional RNA-seq data. Alternatively, can use limma::voom function directly pass resulting voom object rna_seq_data argument create_splineomics() update_splineomics(). Alongside , must pass $E data matrix data argument. general, long data argument contains actual data matrix rna_seq_data argument contains object compatible limma, data correctly processed. Run run_limma_splines() function: output function run_limma_splines() named list, element specific “category” results. Refer document explanation different result categories. elements list, containing elements respective limma topTables, either level comparison two levels. element “time_effect” list, element topTable p-value feature respective level reported. element “avrg_diff_conditions” list contains elements topTables, represent comparison average differences levels. element “interaction_condition_time” list contains elements topTables, represent interaction levels (includes time average differences)","code":"spline_params <- list(   spline_type = c(\"n\"),    # natural cubic splines   dof = c(3L)              # Degree of freedom of 3 for the splines. )  design <- \"~ 1 + Condition*Time + Plate + (1|Reactor)\"  splineomics <- SplineOmics::update_splineomics(   splineomics = splineomics,   data = data,   design = design,    # dream_params = dream_params,   if we would want to adjust dream()   # means limma \"borrows\" statistical power from the other levels   mode = \"integrated\",    spline_params = spline_params,   bp_cfg = c(     n_cores = 1,     blas_threads = 1     )     ) splineomics <- SplineOmics::preprocess_rna_seq_data(   splineomics = splineomics ) #>  #> Make sure that the design formula contains no interaction between the condition and time for mode == isolated, and that it contains an interaction for mode == integrated. Otherwise, you will get an uncaught error of 'coefficients not estimable' or 'subscript out of bounds' (or any other hard to understand error). #> Preprocessing RNA-seq data (normalization + voom)... #> [WARNING] use_array_weights = TRUE is ignored for mixed modelRNA-seq. #> voomWithDreamWeights already accounts for heteroscedasticity across.both genes and samples #>  #> NOTE: If you manually stop run_limma_splines() in RStudio and used, parallelization for variancePartition::dream(), then those parallelized processes may continue running. Use your system's process manager to terminate them manually! #> Info Finished preprocessing RNA-seq data in 0.2 minutes splineomics <- SplineOmics::run_limma_splines(   splineomics = splineomics ) #> Hint: The data contains negative values. This may occur if the data has been transformed (e.g., log-transformed or normalized) and is valid in such cases. Ensure that the data preprocessing aligns with your analysis requirements. #>  #> Make sure that the design formula contains no interaction between the condition and time for mode == isolated, and that it contains an interaction for mode == integrated. Otherwise, you will get an uncaught error of 'coefficients not estimable' or 'subscript out of bounds' (or any other hard to understand error). #>  #> Fitting global model... #>  #> NOTE: If you manually stop run_limma_splines() in RStudio and used, parallelization for variancePartition::dream(), then those parallelized processes may continue running. Use your system's process manager to terminate them manually! #> Info Finished limma spline analysis in 0.6 min"},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq-analysis.html","id":"build-limma-report","dir":"Articles","previous_headings":"","what":"Build limma report","title":"RNA-seq-analysis","text":"topTables three limma result categories can used generate p-value histograms volcano plots. can view generated analysis report create_limma_report function .","code":"plots <- SplineOmics::create_limma_report(   splineomics = splineomics,   report_dir = withr::local_tempdir() ) #> Hint: The data contains negative values. This may occur if the data has been transformed (e.g., log-transformed or normalized) and is valid in such cases. Ensure that the data preprocessing aligns with your analysis requirements. #>  #> Make sure that the design formula contains no interaction between the condition and time for mode == isolated, and that it contains an interaction for mode == integrated. Otherwise, you will get an uncaught error of 'coefficients not estimable' or 'subscript out of bounds' (or any other hard to understand error). #>  #>  Info Limma report generation completed successfully. #>  Your HTML reports are located in the directory:  /tmp/RtmpDLFyu6/file9d3567d75494 . #>  Please note that due to embedded files, the reports might be flagged as #>  harmful by other software. Rest assured that they provide no harm."},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq-analysis.html","id":"cluster-the-hits-significant-features","dir":"Articles","previous_headings":"","what":"Cluster the hits (significant features)","title":"RNA-seq-analysis","text":"obtained limma spline results, can cluster hits based temporal pattern (spline shape). define hit setting adj. p-value threshold every level. Hits features (genes ) adj. p-value threshold. Hierarchical clustering used place every hit one many clusters specified specific level. can view generated analysis report cluster_hits function . discussed , three limma result categories. cluster_hits() report shows results three, present (category 2 3 can generated design formula contains interaction effect).","code":"adj_pthresholds <- c(      0.05,       0.05      )  nr_clusters <- list(   constant = 4,    temp_shift = 4    )  report_dir <- here::here(   \"results\",   \"clustering_reports\" )  # treatment_labels allows to place vertical dashed lines into the plots, that # indicate a treatment, such as \"temp shift\" in this experiment. For each level, # the treatment can be specified individually. For the \"double spline plots\",  # where two levels are combined into one plot, treatment lines can also be  # defined. The correct fieldname for those is {first_level}_{second_level},  # with first_level being the level of the two occuring first in the respective # meta column, and second_level the one that occurs after.  # Here, we don't want a treatment line for the constant level, since no  # treatment was applied. To achieve that, we simply set it to NA or leave it # out.  treatment_labels <- list(   # constant = NA,    temp_shift = \"temp shift\",     constant_temp_shift = \"temp shift\"    )  # treatment_timepoints allows to specify the timepoint, at which the vertical # dashed treatment line is placed. Again, for the constant level, we don't # have a treatment, so we also do not specify a timepoint. treatment_timepoints <- list(   # constant = NA,   temp_shift = 146,     constant_temp_shift = 146   )  plot_info <- list( # For the spline plots   y_axis_label = \"log2 counts\",   time_unit = \"hours\",    # When you simply want to add a given treatment line to all conditions (   # including all double spline plot comparisons) then you can do it in the    # following way (commented out here):    # treatment_labels = list(\"temp shift\"), # add for all conditions   # treatment_timepoints = list(146)       # temp shift was at 146 hours.   treatment_labels = treatment_labels,   treatment_timepoints = treatment_timepoints )  genes <- rownames(data) genes <- sub(\"_\\\\d+$\", \"\", genes)   # remove the _1 part from the end  plot_options <- list(   # When meta_replicate_column is not there, all datapoints are blue.   meta_replicate_column = \"Reactor\" # Colors the data points based on Reactor )  clustering_results <- SplineOmics::cluster_hits(   splineomics = splineomics,   adj_pthresholds = adj_pthresholds,   nr_clusters = nr_clusters,   genes = genes,   plot_info = plot_info,   report = TRUE,   max_hit_number = 20,          # maximum number of plots per result category   plot_options = plot_options,   report_dir = withr::local_tempdir(),   adj_pthresh_avrg_diff_conditions = 0.05,   adj_pthresh_interaction_condition_time = 0.05 ) #> Hint: The data contains negative values. This may occur if the data has been transformed (e.g., log-transformed or normalized) and is valid in such cases. Ensure that the data preprocessing aligns with your analysis requirements. #>  #> Make sure that the design formula contains no interaction between the condition and time for mode == isolated, and that it contains an interaction for mode == integrated. Otherwise, you will get an uncaught error of 'coefficients not estimable' or 'subscript out of bounds' (or any other hard to understand error). #>  #> Warning: Not all names in treatment_labels and treatment_timepoints are present in the condition column of the meta data. #>  - Offending treatment_labels: constant_temp_shift #>  - Offending treatment_timepoints: constant_temp_shift #> Note: If these elements belong to the double spline plots, this is acceptable and this warning can be ignored! #>  #>  Performing the clustering... #> For the level:  constant #> For the level:  temp_shift #> Generating heatmap... #> Generating cluster mean splines for level:  constant #> Generating spline plots... #> Generating cluster mean splines for level:  temp_shift #> Generating spline plots... #> Generating report. This takes a few seconds. #>  #>  Info Clustering the hits completed successfully. #>  Your HTML reports are located in the directory:  /tmp/RtmpDLFyu6/file9d3569318934 . #>  Please note that due to embedded files, the reports might be flagged as #>  harmful by other software. Rest assured that they provide no harm. #> Running this function took 0.5 min"},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq-analysis.html","id":"perform-gene-set-enrichment-analysis-gsea","dir":"Articles","previous_headings":"","what":"Perform gene set enrichment analysis (GSEA)","title":"RNA-seq-analysis","text":"clustered hits identified, subsequent step gain biological insights perform GSEA. , respective genes can assigned clustered hit, GSEA can carried . proceed, Enrichr databases choice need downloaded: Per default file placed current working directory, root dir R project. run GSEA, downloaded database file loaded dataframe. , optionally, clusterProfiler parameters report dir can specified. function create_gsea_report() runs GSEA using clusterProfiler, generates HTML report returns GSEA dotplots R. function runs clusterProfiler clusters levels, generates HTML report: can view generated analysis report run_gsea function .","code":"# Specify which databases you want to download from Enrichr gene_set_lib <- c(   \"WikiPathways_2019_Human\",   \"NCI-Nature_2016\",   \"TRRUST_Transcription_Factors_2019\",   \"MSigDB_Hallmark_2020\",   \"GO_Cellular_Component_2018\",   \"CORUM\",   \"KEGG_2019_Human\",   \"TRANSFAC_and_JASPAR_PWMs\",   \"ENCODE_and_ChEA_Consensus_TFs_from_ChIP-X\",   \"GO_Biological_Process_2018\",   \"GO_Molecular_Function_2018\",   \"Human_Gene_Atlas\" )  SplineOmics::download_enrichr_databases(   gene_set_lib = gene_set_lib,   output_dir = here::here(),   # output into the current working dir (default)   filename = \"databases.tsv\"   # just the name of the file, not the full path ) # Specify the filepath of the TSV file with the database info downloaded_dbs_filepath <- here::here(   \"databases.tsv\"   )  # Load the file databases <- read.delim(   downloaded_dbs_filepath,   sep = \"\\t\",   stringsAsFactors = FALSE )  # Specify the clusterProfiler parameters clusterProfiler_params <- list(   pvalueCutoff = 0.05,   pAdjustMethod = \"BH\",   minGSSize = 10,   maxGSSize = 500,   qvalueCutoff = 0.2 )  report_dir <- here::here(   \"results\",   \"gsea_reports\" ) result <- SplineOmics::run_gsea(   # A dataframe with three columns: feature, cluster, and gene. Feature contains   # the integer index of the feature, cluster the integer specifying the cluster   # number, and gene the string of the gene, such as \"CLSTN2\".   cluster_table = clustering_results[[\"cluster_table\"]],   databases = databases,   clusterProfiler_params = clusterProfiler_params,   report_info = report_info,   cluster_hits_report_name = \"not meaningful here\",   report_dir = report_dir )"},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq-analysis.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"RNA-seq-analysis","text":"","code":"#> R version 4.5.1 (2025-06-13) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.5 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.10.0  #> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=de_AT.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=de_AT.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=de_AT.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=de_AT.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: Europe/Vienna #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices datasets  utils     methods   base      #>  #> other attached packages: #> [1] knitr_1.50        dplyr_1.1.4       here_1.0.1        readr_2.1.5       #> [5] SplineOmics_0.3.1 #>  #> loaded via a namespace (and not attached): #>   [1] RColorBrewer_1.1-3       rstudioapi_0.17.1        jsonlite_2.0.0           #>   [4] shape_1.4.6.1            magrittr_2.0.3           farver_2.1.2             #>   [7] nloptr_2.2.1             rmarkdown_2.29           GlobalOptions_0.1.2      #>  [10] fs_1.6.6                 ragg_1.4.0               vctrs_0.6.5              #>  [13] minqa_1.2.8              base64enc_0.1-3          htmltools_0.5.8.1        #>  [16] progress_1.2.3           broom_1.0.8              Formula_1.2-5            #>  [19] variancePartition_1.38.0 sass_0.4.10              KernSmooth_2.23-26       #>  [22] bslib_0.9.0              htmlwidgets_1.6.4        desc_1.4.3               #>  [25] pbkrtest_0.5.4           plyr_1.8.9               cachem_1.1.0             #>  [28] lifecycle_1.0.4          iterators_1.0.14         pkgconfig_2.0.3          #>  [31] Matrix_1.7-3             R6_2.6.1                 fastmap_1.2.0            #>  [34] rbibutils_2.3            clue_0.3-66              digest_0.6.37            #>  [37] numDeriv_2016.8-1.1      colorspace_2.1-1         S4Vectors_0.46.0         #>  [40] rprojroot_2.1.0          textshaping_1.0.1        labeling_0.4.3           #>  [43] abind_1.4-8              compiler_4.5.1           withr_3.0.2              #>  [46] bit64_4.6.0-1            aod_1.3.3                doParallel_1.0.17        #>  [49] backports_1.5.0          BiocParallel_1.42.1      carData_3.0-5            #>  [52] gplots_3.2.0             MASS_7.3-65              rjson_0.2.23             #>  [55] corpcor_1.6.10           gtools_3.9.5             caTools_1.18.3           #>  [58] tools_4.5.1              zip_2.3.3                remaCor_0.0.18           #>  [61] glue_1.8.0               nlme_3.1-168             grid_4.5.1               #>  [64] cluster_2.1.8.1          reshape2_1.4.4           generics_0.1.4           #>  [67] gtable_0.3.6             tzdb_0.5.0               tidyr_1.3.1              #>  [70] hms_1.1.3                car_3.1-3                BiocGenerics_0.54.0      #>  [73] ggrepel_0.9.6            foreach_1.5.2            pillar_1.11.0            #>  [76] stringr_1.5.1            vroom_1.6.5              limma_3.64.1             #>  [79] circlize_0.4.16          splines_4.5.1            lattice_0.22-5           #>  [82] renv_1.1.4               gmp_0.7-5                bit_4.6.0                #>  [85] tidyselect_1.2.1         ComplexHeatmap_2.24.1    locfit_1.5-9.12          #>  [88] pbapply_1.7-2            reformulas_0.4.1         IRanges_2.42.0           #>  [91] edgeR_4.6.3              svglite_2.2.1            RhpcBLASctl_0.23-42      #>  [94] stats4_4.5.1             xfun_0.52                Biobase_2.68.0           #>  [97] statmod_1.5.0            matrixStats_1.5.0        stringi_1.8.7            #> [100] yaml_2.3.10              boot_1.3-31              evaluate_1.0.4           #> [103] codetools_0.2-19         tibble_3.3.0             BiocManager_1.30.26      #> [106] cli_3.6.5                systemfonts_1.2.3        Rdpack_2.6.4             #> [109] jquerylib_0.1.4          Rcpp_1.1.0               EnvStats_3.1.0           #> [112] png_0.1-8                parallel_4.5.1           pkgdown_2.1.3            #> [115] ggplot2_3.5.2            prettyunits_1.2.0        ClusterR_1.3.3           #> [118] bitops_1.0-9             lme4_1.1-37              mvtnorm_1.3-3            #> [121] lmerTest_3.1-3           scales_1.4.0             purrr_1.1.0              #> [124] crayon_1.5.3             writexl_1.5.4            fANCOVA_0.6-1            #> [127] GetoptLong_1.0.5         rlang_1.1.6"},{"path":"https://csbg.github.io/SplineOmics/articles/design_limma_design_formula.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Designing a Limma Design Formula","text":"limma package powerful tool analyzing gene expression data, particularly context microarrays RNA-seq. critical part limma analysis design formula, specifies experimental conditions contrasts interested . vignette provides guide construct limma design formula correctly, examples best practices.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/design_limma_design_formula.html","id":"understanding-the-design-matrix","dir":"Articles","previous_headings":"","what":"Understanding the Design Matrix","title":"Designing a Limma Design Formula","text":"design matrix crucial component differential expression analysis using limma. defines relationships samples experimental conditions (factors) investigation. well-constructed design matrix allows limma correctly model effects factors estimate differential expression.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/design_limma_design_formula.html","id":"basic-design-formula","dir":"Articles","previous_headings":"Understanding the Design Matrix","what":"Basic Design Formula","title":"Designing a Limma Design Formula","text":"simplest form, design formula includes one factor, treatment vs. control. experiment involves comparing two conditions (e.g., treated vs. untreated), can create design formula like : , condition factor variable metadata (meta) represents experimental groups. Important Points: ~ 0 + condition syntax tells R create design matrix without intercept (.e., matrix level factor condition represented column). approach helpful want make direct comparisons conditions. Including Multiple Factors experiment includes one factor, time points treatments, can include design formula: formula assumes effects treatment time additive (interaction). suspect interaction treatment time might important, can include interaction term: Interaction Term: treatment * time term includes main effects treatment time interaction. Blocking Factors experiments, might technical biological replicates, blocking factors (e.g., batch effects). can include blocking factors design formula: formula accounts treatment batch effects, ensuring analysis confounded batch effects.","code":"design <- model.matrix(~ 0 + condition, data = meta) design <- model.matrix(~ 0 + treatment + time, data = meta) design <- model.matrix(~ 0 + treatment * time, data = meta) design <- model.matrix(~ 0 + treatment + batch, data = meta)"},{"path":"https://csbg.github.io/SplineOmics/articles/design_limma_design_formula.html","id":"creating-contrasts","dir":"Articles","previous_headings":"","what":"Creating Contrasts","title":"Designing a Limma Design Formula","text":"defining design matrix, likely want make specific comparisons conditions. contrasts come . example, compare treated vs. untreated, can define contrast matrix:","code":"contrast <- makeContrasts(   treated_vs_untreated = treatmenttreated - treatmentuntreated,   levels = design )"},{"path":"https://csbg.github.io/SplineOmics/articles/design_limma_design_formula.html","id":"practical-example","dir":"Articles","previous_headings":"","what":"Practical Example","title":"Designing a Limma Design Formula","text":"Let’s say experiment two treatments (B) two time points (early late). metadata might look like : design formula : contrast compare treatment early time point treatment B late time point :","code":"meta <- data.frame(   sample = c(\"S1\", \"S2\", \"S3\", \"S4\"),   treatment = factor(c(\"A\", \"A\", \"B\", \"B\")),   time = factor(c(\"early\", \"late\", \"early\", \"late\")) ) design <- model.matrix(~ 0 + treatment * time, data = meta) contrast <- makeContrasts(   A_early_vs_B_late = (treatmentA:timeearly) - (treatmentB:timelate),   levels = design )"},{"path":"https://csbg.github.io/SplineOmics/articles/design_limma_design_formula.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Designing a Limma Design Formula","text":"Starting ~ 0 means intercept (.e., including baseline group model). Starting ~ 1 (just ~) includes intercept (baseline group). Factors separated + indicate additive effects. example, ~ 0 + factor1 + factor2 means modeling effects factor1 factor2 additively, without considering interactions. * symbol used model interactions factors. example, ~ 0 + factor1 * factor2 include factor1, factor2, interaction (factor1:factor2). Alternatively, can specify interaction explicitly :. example, ~ 0 + factor1 + factor2 + factor1:factor2 equivalent ~ 0 + factor1 * factor2.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/design_limma_design_formula.html","id":"some-examples","dir":"Articles","previous_headings":"Summary","what":"Some examples:","title":"Designing a Limma Design Formula","text":"~ 0 + factor1 + factor2: Additive model without intercept. ~ 1 + factor1 + factor2: Additive model intercept. ~ 0 + factor1 * factor2: Model main effects interaction, intercept. ~ 1 + factor1 * factor2: Model intercept, main effects, interaction.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/design_limma_design_formula.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Designing a Limma Design Formula","text":"","code":"## R version 4.5.1 (2025-06-13) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 22.04.5 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.10.0  ## LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=de_AT.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=de_AT.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=de_AT.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=de_AT.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: Europe/Vienna ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices datasets  utils     methods   base      ##  ## loaded via a namespace (and not attached): ##  [1] digest_0.6.37       desc_1.4.3          R6_2.6.1            ##  [4] fastmap_1.2.0       xfun_0.52           cachem_1.1.0        ##  [7] knitr_1.50          htmltools_0.5.8.1   rmarkdown_2.29      ## [10] lifecycle_1.0.4     cli_3.6.5           sass_0.4.10         ## [13] pkgdown_2.1.3       textshaping_1.0.1   jquerylib_0.1.4     ## [16] renv_1.1.4          systemfonts_1.2.3   compiler_4.5.1      ## [19] rstudioapi_0.17.1   tools_4.5.1         ragg_1.4.0          ## [22] bslib_0.9.0         evaluate_1.0.4      yaml_2.3.10         ## [25] BiocManager_1.30.26 jsonlite_2.0.0      htmlwidgets_1.6.4   ## [28] rlang_1.1.6         fs_1.6.6"},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"about-this-tutorial","dir":"Articles","previous_headings":"","what":"About this tutorial","title":"get-started","text":"tutorial intends showcase explain capabilities SplineOmics package walking real complete example, start finish.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"example-overview","dir":"Articles","previous_headings":"About this tutorial","what":"Example Overview","title":"get-started","text":"example involves time-series proteomics experiment, CHO (chinese hamster ovary) cells cultivated three bioreactors (three biological replicates). experiment includes following setup: Samples taken exponential stationary growth phases. 60 minutes feeding 15, 60, 90, 120, 240 minutes feeding","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"analysis-goals","dir":"Articles","previous_headings":"About this tutorial","what":"Analysis Goals","title":"get-started","text":"main goals analysis : Identify proteins significant temporal changes: 7162 cellular proteins, objective detect proteins show significant change time CHO cells fed (.e., impact feeding). Cluster hits based temporal patterns: proteins (hits) significant temporal changes clustered according time-based patterns. Perform gene set enrichment analysis: cluster, gene set enrichment analysis performed determine specific biological processes - downregulated feeding.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"note","dir":"Articles","previous_headings":"About this tutorial","what":"Note","title":"get-started","text":"documentation SplineOmics package functions can viewed ","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"load-the-packages","dir":"Articles","previous_headings":"","what":"Load the packages","title":"get-started","text":"","code":"library(SplineOmics) library(here) # For managing filepaths #> here() starts at /home/thomas/Documents/PhD/projects/DGTX/SplineOmics_hub/SplineOmics library(dplyr) # For data manipulation #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(knitr) # For Showing the head of the data and the meta tables."},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"load-the-files","dir":"Articles","previous_headings":"","what":"Load the files","title":"get-started","text":"example, proteomics_data.rds file contains numeric values (intensities) also feature descriptions, gene protein name (= annotation part). Usually, load data example Excel file, .rds file compressed, reason format chosen limit size SplineOmics package. file meta.xlsx contains meta information, descriptions columns numeric values data. (example files part package don’t present system). Please note dataset actual experimental dataset, annotation information, gene names, removed since yet published time making SplineOmics package public. Instead, dataset includes randomly generated gene symbols gene names corresponding Cricetulus griseus (Chinese Hamster) row. intended demonstrate functionality package. , dataset subsamples 1165 proteins limit size package. left part data contains numeric values, right part annotation info, can copied separate dataframe, shown .","code":"data <- readRDS(xzfile(system.file(   \"extdata\",   \"proteomics_data.rds.xz\",   package = \"SplineOmics\" )))  meta <- read.csv(   system.file(     \"extdata\",     \"proteomics_meta.csv\",     package = \"SplineOmics\"   ),   stringsAsFactors = FALSE )  # Extract the annotation part from the dataframe. first_na_col <- which(is.na(data[1, ]))[1] annotation <- data |>   dplyr::select((first_na_col + 1):ncol(data)) |>   dplyr::slice(-c(1:3))"},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"show-top-rows-of-data","dir":"Articles","previous_headings":"Load the files","what":"Show top rows of data","title":"get-started","text":"","code":"kable(   head(data),   format = \"markdown\"   )"},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"show-top-rows-of-meta","dir":"Articles","previous_headings":"Load the files","what":"Show top rows of meta","title":"get-started","text":"","code":"kable(   head(meta),   format = \"markdown\"   )"},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"show-top-rows-of-annotation","dir":"Articles","previous_headings":"Load the files","what":"Show top rows of annotation","title":"get-started","text":"Three comments characteristics input data : data must contain NA values special values, must consist numbers. example, original proteomics data contained NA values, resolved case imputation (replacing NA values numbers). features data ideally normally distributed analyzed limma, fits linear model feature. models rely statistical tests assume normality. Although limma can still function data normally distributed, resulting p-values may become less reliable. reason, strongly recommended transform data using techniques log2 transformation features deviate normality. Proper transformation helps ensure assumptions underlying statistical tests met, leading accurate trustworthy results. samples data independent . Linear models, used limma, assume observations (samples) independent. dependency samples (e.g., repeated measurements subject), assumption violated, can lead incorrect statistical inferences.","code":"kable(   head(annotation),   format = \"markdown\"   )"},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"bring-the-inputs-into-the-standardized-format","dir":"Articles","previous_headings":"Load the files","what":"Bring the Inputs into the Standardized Format","title":"get-started","text":"Since data format required SplineOmics package, needs processing. SplineOmics package requires data numeric matrix, element allowed anything else number. can done commands R, file specific structure, function extract_data() can handle easily","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"usage-of-the-extract_data-function","dir":"Articles","previous_headings":"Load the files > Bring the Inputs into the Standardized Format","what":"Usage of the extract_data() function","title":"get-started","text":"extract_data() can: Extract data matrix field specifying location corners matrix. Create column headers information written cells respective columns data matrix field. annotation columns specified, rowheaders increasing numbers. annotation columns specified (like \"First.Protein.Description\" \"ID\" example), combined form rowheaders (feature names).","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"usage-in-plotting","dir":"Articles","previous_headings":"Load the files > Bring the Inputs into the Standardized Format","what":"Usage in Plotting","title":"get-started","text":"generated rowheaders used label plots feature shown individually, : Spline plots datapoints individual feature.","code":"data <- SplineOmics::extract_data(   # The dataframe with the numbers on the left and info on the right.   data = data,   # Use this annotation column for the feature names.   feature_name_columns = c(\"Gene_name\"),   use_row_index = TRUE,   top_row = 4,   bottom_row = 1165,   right_col = 37,   left_col = 2 )"},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"perform-eda-exploratory-data-analysis","dir":"Articles","previous_headings":"","what":"Perform EDA (exploratory data analysis)","title":"get-started","text":"Now data required format (numeric matrix) can go . first step analyzing data typically Exploratory Data Analysis (EDA). EDA involves summarizing main characteristics data, often visualizations.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"common-eda-plots","dir":"Articles","previous_headings":"Perform EDA (exploratory data analysis)","what":"Common EDA Plots","title":"get-started","text":"common types EDA plots include: Density distributions Boxplots PCA (Principal Component Analysis) Correlation heatmaps , can generate plots lines R code. However, prefer, convenience, explore_data() function can handle .","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"using-explore_data-for-eda","dir":"Articles","previous_headings":"Perform EDA (exploratory data analysis)","what":"Using explore_data() for EDA","title":"get-started","text":"SplineOmics package provides function explore_data() perform EDA. function requires following arguments: data: numeric data matrix. meta: metadata table. condition: name column metadata contains levels experiment (e.g., “Exponential” “Stationary”). report_info: list contains general information analysis, name analyst datatype (e.g. proteomics)","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"optional-arguments","dir":"Articles","previous_headings":"Perform EDA (exploratory data analysis)","what":"Optional Arguments","title":"get-started","text":"addition required arguments, explore_data() offers several optional arguments: meta_batch_column: name column contains first batch effect. meta_batch2_column: name column contains second batch effect. least one batch column provided, function : Use removeBatchEffect() function limma remove batch effect data plotting. Generate two EDA HTML reports: one uncorrected data one batch-corrected data.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"output-and-report-options","dir":"Articles","previous_headings":"Perform EDA (exploratory data analysis)","what":"Output and Report Options","title":"get-started","text":"default, reports saved current working directory, location can changed using report_dir argument. function also returns plots generated analysis, can modify according needs. want report generated, can set report argument FALSE (example just want figures R environment)","code":"# Those fields are mandatory, because we believe that when such a report is # opened after half a year, those infos can be very helpful. report_info <- list(   omics_data_type = \"PTX\",   data_description = \"Proteomics data of CHO cells\",   data_collection_date = \"February 2024\",   analyst_name = \"Thomas Rauter\",   contact_info = \"thomas.rauter@plus.ac.at\",   project_name = \"DGTX\" )  report_dir <- here::here(   \"results\",   \"explore_data\" )"},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"splineomics-object","dir":"Articles","previous_headings":"Perform EDA (exploratory data analysis)","what":"SplineOmics Object","title":"get-started","text":"SplineOmics package, multiple functions take arguments input. make easier avoid errors, decided arguments provided individually functions, stored R6 object (type ‘SplineOmics’) object passed functions. Additionally, functions generate intermediate output, just necessary next function workflow, also just passed along updating SplineOmics object. don’t worry .","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"functionality","dir":"Articles","previous_headings":"Perform EDA (exploratory data analysis) > SplineOmics Object","what":"Functionality","title":"get-started","text":"SplineOmics object can seen container necessary arguments stored. function retrieves required arguments object potentially adds new data results back .","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"documentation","dir":"Articles","previous_headings":"Perform EDA (exploratory data analysis) > SplineOmics Object","what":"Documentation","title":"get-started","text":"documentation function creates SplineOmics object can found documentation function updates [documentation function takes SplineOmics object input specifies arguments must present SplineOmics object passed respective function.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"required-arguments-create_splineomics","dir":"Articles","previous_headings":"Perform EDA (exploratory data analysis)","what":"Required Arguments create_splineomics()","title":"get-started","text":"data: matrix data meta: Metadata associated data. condition: Meta column name levels (e.g., Exponential Stationary).","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"optional-arguments-create_splineomics","dir":"Articles","previous_headings":"Perform EDA (exploratory data analysis)","what":"Optional Arguments create_splineomics()","title":"get-started","text":"rna_seq_data: object containing preprocessed RNA-seq data, output limma::voom function. annotation: dataframe feature descriptions data. report_info: list containing general information analysis. meta_batch_column: Column meta batch information. meta_batch2_column: Column secondary meta batch information. design: limma design formula spline_params: Parameters spline functions. Now SplineOmics object defined, can perform exploratory data analysis. can see HTML report explore_data() function batch-corrected data, report batch-corrected data. Note report linked vignette might created older version SplineOmics, updated yet. EDA plots can tell range things. plots HTML report grouped three categories: Distribution Variability Analysis, Time Series Analysis, Dimensionality Reduction Clustering. look correlation heatmaps HTML report, can see samples E12_TP05_Exponential E10_TP10_Stationary stick . Seeing , might want remove data. can test happens , along testing hyperparameter choices influence results, package function screen_limma_hyperparams().","code":"# splineomics now contains the SplineOmics object. splineomics <- SplineOmics::create_splineomics(   data = data,   meta = meta,   annotation = annotation,   report_info = report_info,   condition = \"Phase\", # Column of meta that contains the levels.   meta_batch_column = \"Reactor\" # For batch effect removal )  # Special print.SplineOmics function leads to selective printing print(splineomics) #> data:SplineOmics Object #> ------------------- #> Number of features (rows): 1162  #> Number of samples (columns): 36  #> Meta data columns: 5  #> First few meta columns: #>              Sample.ID Reactor Time.Point       Phase Time #> 1 E09_TP01_Exponential     E09       TP01 Exponential  -60 #> 2 E10_TP01_Exponential     E10       TP01 Exponential  -60 #> 3 E12_TP01_Exponential     E12       TP01 Exponential  -60 #> Condition: Phase  #> No RNA-seq data provided. #> Annotation provided with 1162 entries. #> No spline parameters set. #> P-value adjustment method: BH plots <- SplineOmics::explore_data(   splineomics = splineomics, # SplineOmics object   report_dir = withr::local_tempdir() ) #> Making density plots... #> Making violin plots... #> Making PCA plots... #> Making MDS plots... #> Making correlation heatmaps... #> Subsampled to top 1000 most variable features (after filtering rows with > 20% missing) for correlation heatmap. #> Making mean correlation with time plots... #> Making lag1 differences plots... #> Making first lag auto-correlation with time plots... #> Making cv plots... #> Making density plots... #> Making violin plots... #> Making PCA plots... #> Making MDS plots... #> Making correlation heatmaps... #> Subsampled to top 1000 most variable features (after filtering rows with > 20% missing) for correlation heatmap. #> Making mean correlation with time plots... #> Making lag1 differences plots... #> Making first lag auto-correlation with time plots... #> Making cv plots... #>  #>  Info Exploratory data analysis completed successfully. #>  Your HTML reports are located in the directory:  /tmp/RtmpBi8LMR/file9a9e59932df0 . #>  Please note that due to embedded files, the reports might be flagged as #>  harmful by other software. Rest assured that they provide no harm."},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"run-limma-spline-analysis","dir":"Articles","previous_headings":"","what":"Run limma spline analysis","title":"get-started","text":"Now decide parameters run limma spline analysis. design formula, must specify either ‘isolated’ ‘integrated’. Isolated means limma determines results level using data level. Integrated means limma determines results levels using full dataset (levels). integrated mode, condition column (Phase) must included design. Isolated means limma uses part dataset belongs level obtain results level. generate limma result categories 2 3 () Run run_limma_splines() function updated SplineOmics object: output function run_limma_splines() named list, element specific “category” results. Refer document explanation different result categories. elements list, containing elements respective limma topTables, either level comparison two levels. element “time_effect” list, element topTable p-value feature respective level reported. element “avrg_diff_conditions” list contains elements topTables, represent comparison average differences levels. element “interaction_condition_time” list contains elements topTables, represent interaction levels (includes time average differences)","code":"splineomics <- SplineOmics::update_splineomics(   splineomics = splineomics,   design = \"~ 1 + Phase*Time + Reactor\", # best design formula   mode = \"integrated\", # means limma uses the full data for each condition.   # States explicitly that there is no problem of heteroscedasticity and    # therefore, this does not need to be adressed. Setting it to TRUE would mean   # the opposite, and when setting it to NULL, it means it should be handled    # implicitly. For details, see Reference   # documentation of the create_splineomics() function.   use_array_weights = FALSE,   spline_params = list(     spline_type = c(\"n\"), # natural cubic splines (take these if unsure)     dof = c(2L) # If you are unsure about which dof, start with 2 and increase   ) ) splineomics <- SplineOmics::run_limma_splines(   splineomics = splineomics ) #>  #> Make sure that the design formula contains no interaction between the condition and time for mode == isolated, and that it contains an interaction for mode == integrated. Otherwise, you will get an uncaught error of 'coefficients not estimable' or 'subscript out of bounds' (or any other hard to understand error). #>  #> Fitting global model... #> Info Finished limma spline analysis in 0.0 min"},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"build-limma-report","dir":"Articles","previous_headings":"","what":"Build limma report","title":"get-started","text":"topTables three limma result categories can used generate p-value histograms volcano plots. can view generated analysis report create_limma_report function . report contains p-value histograms three limma result categories volcano plot category 2. Embedded file downloadable limma topTables results category 1 mode ‘isolated’ also results category 2 3 mode ‘integrated’. Note upcoming cluster_hits() function report, embedded file contain clustered significant features result category 1.","code":"plots <- SplineOmics::create_limma_report(   splineomics = splineomics,   report_dir = withr::local_tempdir() ) #>  #> Make sure that the design formula contains no interaction between the condition and time for mode == isolated, and that it contains an interaction for mode == integrated. Otherwise, you will get an uncaught error of 'coefficients not estimable' or 'subscript out of bounds' (or any other hard to understand error). #>  #>  Info Limma report generation completed successfully. #>  Your HTML reports are located in the directory:  /tmp/RtmpBi8LMR/file9a9e32010308 . #>  Please note that due to embedded files, the reports might be flagged as #>  harmful by other software. Rest assured that they provide no harm."},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"cluster-the-hits-significant-features","dir":"Articles","previous_headings":"","what":"Cluster the hits (significant features)","title":"get-started","text":"obtained limma spline results, can cluster hits based temporal pattern (spline shape). define hit setting adj. p-value threshold every level. Hits features (e.g. proteins) adj. p-value threshold. Hierarchical clustering used place every hit one many clusters specified specific level. Run function: can view generated analysis report cluster_hits function . discussed , three limma result categories. cluster_hits() report shows results three, present (category 2 3 can generated design formula contains interaction effect).","code":"# Important note: When you define parameters for the levels, always define them # in the order those levels appear in the meta condition column! Otherwise,  # there will be a mixup!  adj_pthresholds <- c(    0.05,    0.05  )  # The amount of clusters can be a fixed number (e.g. 6) or a range. When you # specify a range (e.g. 2:3, which corresponds to 2 3 in the vector) then the  # cluster_hits() function tries all those cluster numbers and picks the one with # the highest silhouette score (automatic cluster number identification). When # you don't want to have a clustering for a level, write 1 for the cluster  # number for that level. nr_clusters <- list(   Exponential = 6,   # specifically 6 clusters for the exponential phase level   Stationary = 2:3   # range of cluster numbers for the stationary phase level )  plot_info <- list( # For the spline plots   y_axis_label = \"log2 intensity\",   time_unit = \"min\", # our measurements were in minutes   treatment_labels = list(\"feeding\"), # add this for all conditions   treatment_timepoints = list(0) # Feeding was at 0 minutes. )  # Like this you can add individual treatment labels to your plots: # treatment_labels = list( #   exponential = \"treatment 1\", # One treatment in exp #   stationary = c(\"treatment 2\", \"treatment 3\"),  # Two treatments in stat #   additional_condition = NA  # No treatment in the hypothetical third condition #   ) # # treatment_timepoints = list( #   exponential = 0, #   stationary = c(100, 140),  # Two treatments also need two timepoints #   additional_condition = NA #   ) # # or set a treatment for ALL conditions (still always make a list): # # treatment_labels = list(\"treatment\") # treatment_timepoints = list(120) # # or set multiple treatments for ALL conditions: # # treatment_labels = list(c(\"treatment1\", \"treatment2\")) # treatment_timepoints = list(c(120, 90))   # Get all the gene names. They are used for generating files # which contents can be directly used as the input for the Enrichr webtool, # if you prefer to manually perform the enrichment. Those files are # embedded in the output HTML report and can be downloaded from there. gene_column_name <- \"Gene_symbol\" genes <- annotation[[gene_column_name]]  plot_options <- list(   # When meta_replicate_column is not there, all datapoints are blue.   meta_replicate_column = \"Reactor\", # Colors the data points based on Reactor   cluster_heatmap_columns = FALSE # Per default FALSE, just for demonstration ) report_dir <- file.path(tempdir(), \"splineomics_report\") dir.create(report_dir, showWarnings = FALSE, recursive = TRUE)  clustering_results <- SplineOmics::cluster_hits(   splineomics = splineomics,   adj_pthresholds = adj_pthresholds,   nr_clusters = nr_clusters,   genes = genes,   plot_info = plot_info,   plot_options = plot_options,   report = TRUE,   report_dir = report_dir,   adj_pthresh_avrg_diff_conditions = 0.05,   adj_pthresh_interaction_condition_time = 0.05 ) #>  #> Make sure that the design formula contains no interaction between the condition and time for mode == isolated, and that it contains an interaction for mode == integrated. Otherwise, you will get an uncaught error of 'coefficients not estimable' or 'subscript out of bounds' (or any other hard to understand error). #>  #>  Performing the clustering... #> For the level:  Exponential #> For the level:  Stationary #> Generating heatmap... #> Generating cluster mean splines for level:  Exponential #> Generating spline plots... #> Generating cluster mean splines for level:  Stationary #> Generating spline plots... #> Generating report. This takes a few seconds. #>  #>  Info Clustering the hits completed successfully. #>  Your HTML reports are located in the directory:  /tmp/RtmpBi8LMR/splineomics_report . #>  Please note that due to embedded files, the reports might be flagged as #>  harmful by other software. Rest assured that they provide no harm. #> Running this function took 0.1 min"},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"perform-overrepresentation-analysis-ora","dir":"Articles","previous_headings":"","what":"Perform overrepresentation analysis (ORA)","title":"get-started","text":"clustered hits identified, subsequent step gain biological insights perform ORA , respective genes can assigned clustered hit, ORA can carried . proceed, Enrichr databases choice need downloaded: Per default file placed current working directory, root dir R project. run ORA, downloaded database file loaded dataframe. , optionally, clusterProfiler parameters report dir can specified. function run_ora() runs ORA using clusterProfiler, generates HTML report returns ORA dotplots R. function runs clusterProfiler clusters levels, generates HTML report: can view generated analysis report run_ora function . report first shows enrichment results, 2 genes supported term, tabular format. table terms < 2 genes supporting can downloaded clicking button table. dotplots , every row term specific database, columns respective clusters. color scale contains info odds ratio size -log10 adj. p-value. terms > 2 genes support included plot. , cluster, just maximally 5 terms shown (terms highest odds ratios). Note example cluster 1 already 5 terms, cluster 2 , gets term also found cluster 1, term included sixth term cluster 1, way maximum 5 can exceeded. phase, like stationary , lead enrichment results, stated red message.","code":"# Create a temporary directory for R CMD check results_dir <- file.path(tempdir(), \"ora\") dir.create(report_dir, showWarnings = FALSE, recursive = TRUE)  # Specify which databases you want to download from Enrichr gene_set_lib <- c(   \"WikiPathways_2019_Human\",   \"NCI-Nature_2016\",   \"TRRUST_Transcription_Factors_2019\",   \"MSigDB_Hallmark_2020\",   \"GO_Cellular_Component_2018\",   \"CORUM\",   \"KEGG_2019_Human\",   \"TRANSFAC_and_JASPAR_PWMs\",   \"ENCODE_and_ChEA_Consensus_TFs_from_ChIP-X\",   \"GO_Biological_Process_2018\",   \"GO_Molecular_Function_2018\",   \"Human_Gene_Atlas\" )  SplineOmics::download_enrichr_databases(   gene_set_lib = gene_set_lib,   output_dir = results_dir,   filename = \"databases.tsv\" ) # Specify the filepath of the TSV file with the database info downloaded_dbs_filepath <- file.path(results_dir, \"databases.tsv\")  # Load the file databases <- read.delim(   downloaded_dbs_filepath,   sep = \"\\t\",   stringsAsFactors = FALSE )  # Specify the clusterProfiler parameters clusterProfiler_params <- list(   pvalueCutoff = 0.05,   pAdjustMethod = \"BH\",   minGSSize = 10,   maxGSSize = 500,   qvalueCutoff = 0.2 ) result <- SplineOmics::run_ora(   cluster_table = clustering_results[[\"cluster_table\"]],   databases = databases,   clusterProfiler_params = clusterProfiler_params,   report_info = report_info,   cluster_hits_report_name = \"report name\",   report_dir =  withr::local_tempdir() )"},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"perform-ora-with-the-bioconductor-database","dir":"Articles","previous_headings":"","what":"Perform ORA with the Bioconductor database","title":"get-started","text":"ORA can also performed database format DB, Geneset, Gene (see documentation run_ora function). BioConductor databases example , SplineOmics also contains function conveniently download .","code":"SplineOmics::download_bioconductor_database(   organism_db = \"org.Mm.eg.db\",   output_dir = results_dir,   filename = \"bioconductor_database.tsv\" ) # Specify the filepath of the TSV file with the database info downloaded_dbs_filepath <- file.path(   results_dir,   \"bioconductor_database.tsv\"   )  # Load the file databases <- read.delim(   downloaded_dbs_filepath,   sep = \"\\t\",   stringsAsFactors = FALSE )  # Specify the clusterProfiler parameters clusterProfiler_params <- list(   pvalueCutoff = 0.05,   pAdjustMethod = \"BH\",   minGSSize = 10,   maxGSSize = 500,   qvalueCutoff = 0.2 )  mapping_cfg = list(   method = \"gprofiler\",   from_species = \"cgchok1gshd\",   to_species   = \"mmusculus\"   )  genes_clean <- genes[!grepl(\"-\", genes)]  enrichGO_cfg = list(   GO_BP = list(     OrgDb = org.Mm.eg.db,     keyType = \"SYMBOL\",     ontology = \"BP\"   ),   GO_MF = list(     OrgDb = org.Mm.eg.db,     keyType = \"SYMBOL\",     ontology = \"MF\"   ),   GO_CC = list(     OrgDb = org.Mm.eg.db,     keyType = \"SYMBOL\",     ontology = \"CC\"   ) ) result <- SplineOmics::run_ora(   cluster_table = clustering_results[[\"cluster_table\"]],   databases = databases,   clusterProfiler_params = clusterProfiler_params,   universe = genes_clean,   mapping_cfg = mapping_cfg,   enrichGO_cfg = enrichGO_cfg,   report_info = report_info,   cluster_hits_report_name = \"report\",   report_dir = results_dir )"},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"get-started","text":"example showed functionalities SplineOmics package. can also run datatypes , including timeseries RNA-seq glycan data (, refer documentation README file GitHub page Usage/RNA-seq Glycan Data). hope SplineOmics package makes scientific data analysis easier. face problems (bugs code) satisfied documentation, open issue GitHub check options Feedback section README GitHub. Thank !","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"get-started","text":"","code":"#> R version 4.5.1 (2025-06-13) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.5 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.10.0  #> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=de_AT.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=de_AT.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=de_AT.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=de_AT.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: Europe/Vienna #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices datasets  utils     methods   base      #>  #> other attached packages: #> [1] knitr_1.50        dplyr_1.1.4       here_1.0.1        SplineOmics_0.3.1 #>  #> loaded via a namespace (and not attached): #>   [1] Rdpack_2.6.4             bitops_1.0-9             pbapply_1.7-2            #>   [4] writexl_1.5.4            rlang_1.1.6              magrittr_2.0.3           #>   [7] clue_0.3-66              GetoptLong_1.0.5         matrixStats_1.5.0        #>  [10] compiler_4.5.1           reshape2_1.4.4           png_0.1-8                #>  [13] systemfonts_1.2.3        vctrs_0.6.5              stringr_1.5.1            #>  [16] pkgconfig_2.0.3          shape_1.4.6.1            crayon_1.5.3             #>  [19] fastmap_1.2.0            backports_1.5.0          labeling_0.4.3           #>  [22] caTools_1.18.3           rmarkdown_2.29           nloptr_2.2.1             #>  [25] ragg_1.4.0               purrr_1.1.0              xfun_0.52                #>  [28] cachem_1.1.0             jsonlite_2.0.0           progress_1.2.3           #>  [31] EnvStats_3.1.0           remaCor_0.0.18           gmp_0.7-5                #>  [34] BiocParallel_1.42.1      broom_1.0.8              parallel_4.5.1           #>  [37] prettyunits_1.2.0        cluster_2.1.8.1          R6_2.6.1                 #>  [40] stringi_1.8.7            bslib_0.9.0              RColorBrewer_1.1-3       #>  [43] limma_3.64.1             car_3.1-3                boot_1.3-31              #>  [46] ClusterR_1.3.3           numDeriv_2016.8-1.1      jquerylib_0.1.4          #>  [49] Rcpp_1.1.0               iterators_1.0.14         base64enc_0.1-3          #>  [52] IRanges_2.42.0           Matrix_1.7-3             splines_4.5.1            #>  [55] tidyselect_1.2.1         rstudioapi_0.17.1        abind_1.4-8              #>  [58] yaml_2.3.10              doParallel_1.0.17        gplots_3.2.0             #>  [61] codetools_0.2-19         plyr_1.8.9               lmerTest_3.1-3           #>  [64] lattice_0.22-5           tibble_3.3.0             withr_3.0.2              #>  [67] Biobase_2.68.0           evaluate_1.0.4           desc_1.4.3               #>  [70] zip_2.3.3                circlize_0.4.16          pillar_1.11.0            #>  [73] BiocManager_1.30.26      carData_3.0-5            KernSmooth_2.23-26       #>  [76] renv_1.1.4               foreach_1.5.2            stats4_4.5.1             #>  [79] reformulas_0.4.1         generics_0.1.4           rprojroot_2.1.0          #>  [82] S4Vectors_0.46.0         hms_1.1.3                ggplot2_3.5.2            #>  [85] scales_1.4.0             aod_1.3.3                minqa_1.2.8              #>  [88] gtools_3.9.5             RhpcBLASctl_0.23-42      glue_1.8.0               #>  [91] tools_4.5.1              fANCOVA_0.6-1            variancePartition_1.38.0 #>  [94] lme4_1.1-37              mvtnorm_1.3-3            fs_1.6.6                 #>  [97] grid_4.5.1               tidyr_1.3.1              rbibutils_2.3            #> [100] colorspace_2.1-1         nlme_3.1-168             Formula_1.2-5            #> [103] cli_3.6.5                textshaping_1.0.1        svglite_2.2.1            #> [106] ComplexHeatmap_2.24.1    corpcor_1.6.10           gtable_0.3.6             #> [109] sass_0.4.10              digest_0.6.37            BiocGenerics_0.54.0      #> [112] pbkrtest_0.5.4           ggrepel_0.9.6            rjson_0.2.23             #> [115] htmlwidgets_1.6.4        farver_2.1.2             htmltools_0.5.8.1        #> [118] pkgdown_2.1.3            lifecycle_1.0.4          GlobalOptions_0.1.2      #> [121] statmod_1.5.0            MASS_7.3-65"},{"path":"https://csbg.github.io/SplineOmics/articles/glycan-analysis.html","id":"about-this-vignette","dir":"Articles","previous_headings":"","what":"About this vignette","title":"Glycan-analysis","text":"tutorial intends showcase explain capabilities SplineOmics package walking real complete glycan analysis example, start finish. SplineOmics explained detail get-started vignette, proteomics example covered. vignette focused showing glycan data can used, , less details overall package provided .","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/glycan-analysis.html","id":"data-overview","dir":"Articles","previous_headings":"About this vignette","what":"Data Overview","title":"Glycan-analysis","text":"dataset originates time-series glycan experiment designed study Chinese Hamster Ovary (CHO) cells. data compositional, meaning observed glycoform abundances represent parts whole constrained constant-sum constraint, making standard statistical analyses inappropriate without appropriate log-ratio transformations. experiment involved cultivating cells eight bioreactors, four bioreactors subjected temperature shift 146 hours (experimental condition) remaining four bioreactors maintained without temperature shift (control condition).","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/glycan-analysis.html","id":"timepoints","dir":"Articles","previous_headings":"About this vignette > Data Overview","what":"Timepoints","title":"Glycan-analysis","text":"Samples collected 7 distinct time points throughout experiment, specifically: \"120h\", \"144h\", \"168h\", \"192h\", \"216h\", \"288h\", \"336h\" cultivation start. time point sampled eight bioreactors, E17_336 missing, therefore resulting total 55 samples.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/glycan-analysis.html","id":"effects-in-the-experiment-reactor-and-batch","dir":"Articles","previous_headings":"About this vignette > Data Overview","what":"Effects in the Experiment: Reactor and Batch","title":"Glycan-analysis","text":"experiment, two effects consider: Reactor Batch. refers different bioreactors used cell cultivation, can exhibit substantial variability. reactor assigned single condition: either constant temperature temperature-shifted. result, condition reactor confounded. Reactor treated fixed effect simply remove influence. Instead, treated random effect, allows us model variability appropriately. refers two separate glycan analysis batches. Batch considered batch effect respect condition (constant temperature vs. temperature-shifted). Since Condition Reactor confounded, variability due reactors directly separated condition. Instead, linear mixed models (LMMs) used attribute reactor random effect, allowing us account variability isolating effects condition. approach ensures analysis appropriately handles hierarchical structure data avoids incorrect conclusions. vignette, demonstrate use linear mixed models address challenges properly account reactor plate effects.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/glycan-analysis.html","id":"further-info","dir":"Articles","previous_headings":"About this vignette > Data Overview","what":"Further info","title":"Glycan-analysis","text":"data matrix comprises glycoforms rows (G0/G0 none/G0F) samples columns, providing glycoform measurements time points. glycoform row stands combination sugars (glycans) can attached left right side product antibody, produced CHO cell cultivation. example G0/G0 means glycan G0 attached sides, none/G0F means left side, glycan, right side, G0F glycan. goal experiment investigate effect temperature shift CHO cell cultivation antibody glycan dynamics time. Note: original dataset, yet published time vignette’s creation. demonstration purposes, glycans randomly shuffled, 2% randomly added substracted value.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/glycan-analysis.html","id":"analysis-goals","dir":"Articles","previous_headings":"About this vignette","what":"Analysis Goals","title":"Glycan-analysis","text":"main objectives analysis : Identify glycans significant temporal changes: Among glycoforms measured, goal identify exhibit significant changes abundance time. Cluster glycans based temporal patterns: Glycoforms showing significant temporal changes (hits) grouped clusters based time-dependent expression patterns. Assess impact temperature shifts temporal patterns: analysis determine whether temporal patterns glycoform abundance affected temperature shift, .e., whether glycoform abundance dynamics differ time temperature shift conditions compared controls.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/glycan-analysis.html","id":"note","dir":"Articles","previous_headings":"About this vignette > Analysis Goals","what":"Note","title":"Glycan-analysis","text":"documentation SplineOmics package functions can viewed ","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/glycan-analysis.html","id":"load-the-packages","dir":"Articles","previous_headings":"","what":"Load the packages","title":"Glycan-analysis","text":"","code":"library(SplineOmics) library(here) # For managing filepaths #> here() starts at /home/thomas/Documents/PhD/projects/DGTX/SplineOmics_hub/SplineOmics library(dplyr) # For data manipulation #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(knitr) # For Showing the head of the data and the meta tables. library(compositions)  # For clr transforming the glycan data #> Welcome to compositions, a package for compositional data analysis. #> Find an intro with \"? compositions\" #>  #> Attaching package: 'compositions' #> The following objects are masked from 'package:stats': #>  #>     anova, cor, cov, dist, var #> The following object is masked from 'package:graphics': #>  #>     segments #> The following objects are masked from 'package:base': #>  #>     %*%, norm, scale, scale.default"},{"path":"https://csbg.github.io/SplineOmics/articles/glycan-analysis.html","id":"load-the-files","dir":"Articles","previous_headings":"","what":"Load the files","title":"Glycan-analysis","text":"","code":"data <- read.csv(   system.file(     \"extdata\",     \"glycan_data.csv\",     package = \"SplineOmics\"   ),   stringsAsFactors = FALSE )  meta <- read.csv(   system.file(     \"extdata\",     \"glycan_meta.csv\",     package = \"SplineOmics\"   ),   stringsAsFactors = FALSE )  # Set the first column as row names and remove it from the dataframe rownames(data) <- data[[1]]  # Assign first column as row names data <- data[, -1]  # Remove the first column   # Make data to a numeric matrix (required by SplineOmics) data <- data.matrix(data)"},{"path":"https://csbg.github.io/SplineOmics/articles/glycan-analysis.html","id":"show-top-rows-of-data","dir":"Articles","previous_headings":"Load the files","what":"Show top rows of data","title":"Glycan-analysis","text":"","code":"knitr::kable(   head(data),   format = \"markdown\"   )"},{"path":"https://csbg.github.io/SplineOmics/articles/glycan-analysis.html","id":"show-top-rows-of-meta","dir":"Articles","previous_headings":"Load the files","what":"Show top rows of meta","title":"Glycan-analysis","text":"","code":"knitr::kable(   head(meta),   format = \"markdown\"   )"},{"path":"https://csbg.github.io/SplineOmics/articles/glycan-analysis.html","id":"perform-eda-exploratory-data-analysis","dir":"Articles","previous_headings":"","what":"Perform EDA (exploratory data analysis)","title":"Glycan-analysis","text":"Compositional data, glycan profiles expressed relative abundances, inherently constrained constant sum therefore reside simplex rather Euclidean space. violates assumptions standard statistical methods. address , applied centered log-ratio (CLR) transformation, appropriately maps data real space accounting compositional structure. studies apply simple log-transformation stabilize variance, approach ignores relative nature data may lead biased misleading results. CLR transformation thus appropriate statistically sound choice downstream modeling. can see HTML report explore_data() function batch-corrected data, report batch-corrected data.","code":"# Those fields are mandatory, because we believe that when such a report is # opened after half a year, those infos can be very helpful. report_info <- list(   omics_data_type = \"Glycan\",   data_description = \"clr transformed timeseries fractional abundance glycoform data of CHO cells, batch corrected\",   data_collection_date = \"September 2024\",   analyst_name = \"Thomas Rauter\",   contact_info = \"thomas.rauter@plus.ac.at\",   project_name = \"DGTX\" )  report_dir <- here::here(   \"results\",   \"explore_data\" ) # TRANSPOSE: make samples rows, features columns data_t <- t(data)  # Handle zeros (simple pseudocount, crude but common) data_t[data_t == 0] <- 1e-6  # Apply CLR clr_data_t <- compositions::clr(data_t)  # Transpose back to original shape: features as rows, samples as columns clr_data <- t(clr_data_t) clr_data <- unclass(clr_data) # splineomics now contains the SplineOmics object. splineomics <- SplineOmics::create_splineomics(   data = clr_data,   meta = meta,   report_info = report_info,   condition = \"Condition\", # Column of meta that contains the levels.   meta_batch_column = \"Batch\" # For batch effect removal in the plots )  # Special print.SplineOmics function leads to selective printing print(splineomics) #> data:SplineOmics Object #> ------------------- #> Number of features (rows): 10  #> Number of samples (columns): 55  #> Meta data columns: 5  #> First few meta columns: #>   sample_name Reactor Time Condition Batch #> 1     E13_120     E13  120  constant     1 #> 2     E13_144     E13  144  constant     1 #> 3     E13_168     E13  168  constant     1 #> Condition: Condition  #> No RNA-seq data provided. #> No annotation provided. #> No spline parameters set. #> P-value adjustment method: BH plots <- SplineOmics::explore_data(   splineomics = splineomics, # SplineOmics object   report_dir = report_dir )"},{"path":"https://csbg.github.io/SplineOmics/articles/glycan-analysis.html","id":"run-limma-spline-analysis","dir":"Articles","previous_headings":"","what":"Run limma spline analysis","title":"Glycan-analysis","text":"example, skipping finding best hyperparameters screen_limma_hyperparams() function, already clear idea use. Lets define parameters put SplineOmics object: term ‘(1|Reactor)’ design formula random effects. Therefore, linear mixed models use model Reactor random effect. Run run_limma_splines() function updated SplineOmics object: Note dataset, Wilcoxon signed rank exact test revealed problem heteroscedasticity data. means variance samples significantly higher stationary phase compared exponential phase. violation assumption homoscedasticity linear models, means derived p-values trustworthy. adress issue, limma function (arrayWeights) downweights samples higher variance, use automatically. , eBayes function limma robust = TRUE argument avoids using variance “outliers” variance shrinkage.","code":"splineomics <- SplineOmics::update_splineomics(   splineomics = splineomics,   use_array_weights = FALSE,   # Reactor as random effect.   design = \"~ 1 + Condition*Time + Batch + (1|Reactor)\",    mode = \"integrated\", # means limma uses the full data for each condition.   spline_params = list(     spline_type = c(\"n\"), # natural cubic splines (take these if unsure)     dof = c(2L) # If you are unsure about which dof, start with 2 and increase   ) ) splineomics <- SplineOmics::run_limma_splines(   splineomics = splineomics ) #> Hint: The data contains negative values. This may occur if the data has been transformed (e.g., log-transformed or normalized) and is valid in such cases. Ensure that the data preprocessing aligns with your analysis requirements. #>  #> Make sure that the design formula contains no interaction between the condition and time for mode == isolated, and that it contains an interaction for mode == integrated. Otherwise, you will get an uncaught error of 'coefficients not estimable' or 'subscript out of bounds' (or any other hard to understand error). #>  #> Fitting global model... #>  #> NOTE: If you manually stop run_limma_splines() in RStudio and used, parallelization for variancePartition::dream(), then those parallelized processes may continue running. Use your system's process manager to terminate them manually! #> Info Finished limma spline analysis in 0.0 min"},{"path":"https://csbg.github.io/SplineOmics/articles/glycan-analysis.html","id":"build-limma-report","dir":"Articles","previous_headings":"","what":"Build limma report","title":"Glycan-analysis","text":"topTables three limma result categories can used generate p-value histograms volcano plots. can view generated analysis report create_limma_report function .","code":"plots <- SplineOmics::create_limma_report(   splineomics = splineomics,   report_dir = withr::local_tempdir() ) #> Hint: The data contains negative values. This may occur if the data has been transformed (e.g., log-transformed or normalized) and is valid in such cases. Ensure that the data preprocessing aligns with your analysis requirements. #>  #> Make sure that the design formula contains no interaction between the condition and time for mode == isolated, and that it contains an interaction for mode == integrated. Otherwise, you will get an uncaught error of 'coefficients not estimable' or 'subscript out of bounds' (or any other hard to understand error). #>  #>  Info Limma report generation completed successfully. #>  Your HTML reports are located in the directory:  /tmp/Rtmp99o4vc/file9b0748dd67f0 . #>  Please note that due to embedded files, the reports might be flagged as #>  harmful by other software. Rest assured that they provide no harm."},{"path":"https://csbg.github.io/SplineOmics/articles/glycan-analysis.html","id":"cluster-the-hits-significant-features","dir":"Articles","previous_headings":"","what":"Cluster the hits (significant features)","title":"Glycan-analysis","text":"obtained limma spline results, can cluster hits based temporal pattern (spline shape). define hit setting adj. p-value threshold every level. Hits features (e.g. proteins) adj. p-value threshold. Hierarchical clustering used place every hit one many clusters specified specific level. can view generated analysis report cluster_hits function . discussed , three limma result categories. cluster_hits() report shows results three, present (category 2 3 can generated design formula contains interaction effect).","code":"adj_pthresholds <- c( # 0.05 for both levels   0.05, # exponential   0.05 # stationary )  nr_clusters <- list(   constant = 2,    tshifted = 2    )  # treatment_labels allows to place vertical dashed lines into the plots, that # indicate a treatment, such as \"temp shift\" in this experiment. For each level, # the treatment can be specified individually. For the \"double spline plots\",  # where two levels are combined into one plot, treatment lines can also be  # defined. The correct fieldname for those is {first_level}_{second_level},  # with first_level being the level of the two occuring first in the respective # meta column, and second_level the one that occurs after.  # Here, we don't want a treatment line for the constant level, since no  # treatment was applied. To achieve that, we simply set it to NA or leave it # out.  treatment_labels <- list(   # constant = NA,    tshifted = \"temp shift\",     constant_tshifted = \"temp shift\"    )  # treatment_timepoints allows to specify the timepoint, at which the vertical # dashed treatment line is placed. Again, for the constant level, we don't # have a treatment, so we also do not specify a timepoint. treatment_timepoints <- list(   # constant = NA,   tshifted = 146,     constant_tshifted = 146   )  plot_info <- list( # For the spline plots   y_axis_label = \"Glycan fractional abundance\",   time_unit = \"hours\", # our measurements were in minutes   treatment_labels = treatment_labels,   treatment_timepoints = treatment_timepoints )  # Those are not genes for this glycan analysis here, but this argument expects # the feature names (which usually are gene names, which is why it is called  # like this. genes <- rownames(data)  plot_options <- list(   # When meta_replicate_column is not there, all datapoints are blue.   meta_replicate_column = \"Reactor\", # Colors the data points based on Reactor   cluster_heatmap_columns = FALSE # Per default FALSE, just for demonstration )  clustering_results <- SplineOmics::cluster_hits(   splineomics = splineomics,   adj_pthresholds = adj_pthresholds,   nr_clusters = nr_clusters,   genes = genes,   plot_info = plot_info,   plot_options = plot_options,   report_dir = withr::local_tempdir(),   report = TRUE,   adj_pthresh_avrg_diff_conditions = 0.05,   adj_pthresh_interaction_condition_time = 0.05 ) #> Hint: The data contains negative values. This may occur if the data has been transformed (e.g., log-transformed or normalized) and is valid in such cases. Ensure that the data preprocessing aligns with your analysis requirements. #>  #> Make sure that the design formula contains no interaction between the condition and time for mode == isolated, and that it contains an interaction for mode == integrated. Otherwise, you will get an uncaught error of 'coefficients not estimable' or 'subscript out of bounds' (or any other hard to understand error). #>  #> Warning: Not all names in treatment_labels and treatment_timepoints are present in the condition column of the meta data. #>  - Offending treatment_labels: constant_tshifted #>  - Offending treatment_timepoints: constant_tshifted #> Note: If these elements belong to the double spline plots, this is acceptable and this warning can be ignored! #>  #>  Performing the clustering... #> For the level:  constant #> For the level:  tshifted #> Generating heatmap... #> Generating cluster mean splines for level:  constant #> Generating spline plots... #> Generating cluster mean splines for level:  tshifted #> Generating spline plots... #> Generating report. This takes a few seconds. #>  #>  Info Clustering the hits completed successfully. #>  Your HTML reports are located in the directory:  /tmp/Rtmp99o4vc/file9b07494eeec0 . #>  Please note that due to embedded files, the reports might be flagged as #>  harmful by other software. Rest assured that they provide no harm. #> Running this function took 0.1 min"},{"path":"https://csbg.github.io/SplineOmics/articles/glycan-analysis.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Glycan-analysis","text":"","code":"#> R version 4.5.1 (2025-06-13) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.5 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.10.0  #> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=de_AT.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=de_AT.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=de_AT.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=de_AT.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: Europe/Vienna #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices datasets  utils     methods   base      #>  #> other attached packages: #> [1] compositions_2.0-8 knitr_1.50         dplyr_1.1.4        here_1.0.1         #> [5] SplineOmics_0.3.1  #>  #> loaded via a namespace (and not attached): #>   [1] RColorBrewer_1.1-3       tensorA_0.36.2.1         rstudioapi_0.17.1        #>   [4] jsonlite_2.0.0           shape_1.4.6.1            magrittr_2.0.3           #>   [7] farver_2.1.2             nloptr_2.2.1             rmarkdown_2.29           #>  [10] GlobalOptions_0.1.2      fs_1.6.6                 ragg_1.4.0               #>  [13] vctrs_0.6.5              minqa_1.2.8              base64enc_0.1-3          #>  [16] htmltools_0.5.8.1        progress_1.2.3           broom_1.0.8              #>  [19] Formula_1.2-5            variancePartition_1.38.0 sass_0.4.10              #>  [22] KernSmooth_2.23-26       bslib_0.9.0              htmlwidgets_1.6.4        #>  [25] desc_1.4.3               pbkrtest_0.5.4           plyr_1.8.9               #>  [28] cachem_1.1.0             lifecycle_1.0.4          iterators_1.0.14         #>  [31] pkgconfig_2.0.3          Matrix_1.7-3             R6_2.6.1                 #>  [34] fastmap_1.2.0            rbibutils_2.3            clue_0.3-66              #>  [37] digest_0.6.37            numDeriv_2016.8-1.1      colorspace_2.1-1         #>  [40] S4Vectors_0.46.0         rprojroot_2.1.0          textshaping_1.0.1        #>  [43] labeling_0.4.3           abind_1.4-8              compiler_4.5.1           #>  [46] aod_1.3.3                withr_3.0.2              doParallel_1.0.17        #>  [49] backports_1.5.0          BiocParallel_1.42.1      carData_3.0-5            #>  [52] gplots_3.2.0             MASS_7.3-65              bayesm_3.1-6             #>  [55] rjson_0.2.23             corpcor_1.6.10           gtools_3.9.5             #>  [58] caTools_1.18.3           tools_4.5.1              zip_2.3.3                #>  [61] remaCor_0.0.18           glue_1.8.0               nlme_3.1-168             #>  [64] grid_4.5.1               cluster_2.1.8.1          reshape2_1.4.4           #>  [67] generics_0.1.4           gtable_0.3.6             tidyr_1.3.1              #>  [70] hms_1.1.3                car_3.1-3                BiocGenerics_0.54.0      #>  [73] ggrepel_0.9.6            foreach_1.5.2            pillar_1.11.0            #>  [76] stringr_1.5.1            limma_3.64.1             robustbase_0.99-4-1      #>  [79] circlize_0.4.16          splines_4.5.1            lattice_0.22-5           #>  [82] renv_1.1.4               gmp_0.7-5                tidyselect_1.2.1         #>  [85] ComplexHeatmap_2.24.1    pbapply_1.7-2            reformulas_0.4.1         #>  [88] IRanges_2.42.0           svglite_2.2.1            RhpcBLASctl_0.23-42      #>  [91] stats4_4.5.1             xfun_0.52                Biobase_2.68.0           #>  [94] statmod_1.5.0            matrixStats_1.5.0        DEoptimR_1.1-3-1         #>  [97] stringi_1.8.7            yaml_2.3.10              boot_1.3-31              #> [100] evaluate_1.0.4           codetools_0.2-19         tibble_3.3.0             #> [103] BiocManager_1.30.26      cli_3.6.5                systemfonts_1.2.3        #> [106] Rdpack_2.6.4             jquerylib_0.1.4          Rcpp_1.1.0               #> [109] EnvStats_3.1.0           png_0.1-8                parallel_4.5.1           #> [112] pkgdown_2.1.3            ggplot2_3.5.2            prettyunits_1.2.0        #> [115] ClusterR_1.3.3           bitops_1.0-9             lme4_1.1-37              #> [118] mvtnorm_1.3-3            lmerTest_3.1-3           scales_1.4.0             #> [121] purrr_1.1.0              crayon_1.5.3             writexl_1.5.4            #> [124] fANCOVA_0.6-1            GetoptLong_1.0.5         rlang_1.1.6"},{"path":"https://csbg.github.io/SplineOmics/articles/limma_result_categories.html","id":"limma-result-categories","dir":"Articles","previous_headings":"","what":"limma Result Categories","title":"limma_result_categories","text":"limma analysis results can divided three categories, defined document: Time Effect: category focuses changes feature (e.g. protein) value occur time within single condition. Average Difference Conditions: category compares average feature values levels within condition, regardless time. Interaction Condition Time: category examines interaction time condition. identifies features whose value changes differently time depending condition.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/limma_result_categories.html","id":"legend","dir":"Articles","previous_headings":"limma Result Categories","what":"Legend:","title":"limma_result_categories","text":"hit feature (e.g. protein) significantly changed time. Levels different factors condition experiment. example, bioreactor phase condition, exponential stationary levels within condition.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/limma_result_categories.html","id":"category-1-time-effect","dir":"Articles","previous_headings":"limma Result Categories","what":"Category 1 (time effect)","title":"limma_result_categories","text":"Temporal pattern within level given feature → Hit","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/limma_result_categories.html","id":"example-of-a-hit","dir":"Articles","previous_headings":"limma Result Categories > Category 1 (time effect)","what":"Example of a Hit","title":"limma_result_categories","text":"hit feature shows clear temporal pattern time. Clear temporal pattern time","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/limma_result_categories.html","id":"example-of-no-hit","dir":"Articles","previous_headings":"limma Result Categories > Category 1 (time effect)","what":"Example of No Hit","title":"limma_result_categories","text":"clear temporal pattern","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/limma_result_categories.html","id":"category-2-average-difference-conditions","dir":"Articles","previous_headings":"limma Result Categories","what":"Category 2 (average difference conditions)","title":"limma_result_categories","text":"Overall mean difference levels given feature → Hit","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/limma_result_categories.html","id":"example-of-a-hit-1","dir":"Articles","previous_headings":"limma Result Categories > Category 2 (average difference conditions)","what":"Example of a Hit","title":"limma_result_categories","text":"clear temporal pattern levels overall mean difference ","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/limma_result_categories.html","id":"example-of-no-hit-1","dir":"Articles","previous_headings":"limma Result Categories > Category 2 (average difference conditions)","what":"Example of No Hit","title":"limma_result_categories","text":"Clear temporal pattern levels overall mean difference feature value .","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/limma_result_categories.html","id":"category-3-interaction-condition-time","dir":"Articles","previous_headings":"limma Result Categories","what":"Category 3 (interaction condition & time)","title":"limma_result_categories","text":"Treatment interacting time feature (time effect changing treatment, feature must different temporal patterns conditions/levels) → Hit","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/limma_result_categories.html","id":"examples-of-hits","dir":"Articles","previous_headings":"limma Result Categories > Category 3 (interaction condition & time)","what":"Examples of Hits","title":"limma_result_categories","text":"Different temporal patterns observed level –> hit category 3. Different temporal patterns feature levels. Different temporal patterns feature levels.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/limma_result_categories.html","id":"example-of-no-hit-2","dir":"Articles","previous_headings":"limma Result Categories > Category 3 (interaction condition & time)","what":"Example of No Hit","title":"limma_result_categories","text":"Overall temporal pattern feature levels.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/limma_result_categories.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"limma_result_categories","text":"","code":"## R version 4.5.1 (2025-06-13) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 22.04.5 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.10.0  ## LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=de_AT.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=de_AT.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=de_AT.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=de_AT.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: Europe/Vienna ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices datasets  utils     methods   base      ##  ## loaded via a namespace (and not attached): ##  [1] digest_0.6.37       desc_1.4.3          R6_2.6.1            ##  [4] fastmap_1.2.0       xfun_0.52           cachem_1.1.0        ##  [7] knitr_1.50          htmltools_0.5.8.1   rmarkdown_2.29      ## [10] lifecycle_1.0.4     cli_3.6.5           sass_0.4.10         ## [13] pkgdown_2.1.3       textshaping_1.0.1   jquerylib_0.1.4     ## [16] renv_1.1.4          systemfonts_1.2.3   compiler_4.5.1      ## [19] rstudioapi_0.17.1   tools_4.5.1         ragg_1.4.0          ## [22] bslib_0.9.0         evaluate_1.0.4      yaml_2.3.10         ## [25] BiocManager_1.30.26 jsonlite_2.0.0      htmlwidgets_1.6.4   ## [28] rlang_1.1.6         fs_1.6.6"},{"path":"https://csbg.github.io/SplineOmics/articles/methylation_data_analysis.html","id":"about-this-vignette","dir":"Articles","previous_headings":"","what":"About this vignette","title":"methylation-data-analysis","text":"tutorial intends showcase explain capabilities SplineOmics package walking real complete methylation data analysis example, start finish. SplineOmics explained detail get-started vignette, proteomics example covered. vignette focused showing methylation data can used, , less details overall package provided . , vignette minimalistic ones, functionalities vignettes used explanations repeated .","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/methylation_data_analysis.html","id":"data-overview","dir":"Articles","previous_headings":"About this vignette","what":"Data Overview","title":"methylation-data-analysis","text":"dataset originates time-series methylation data experiment designed study Chinese Hamster Ovary (CHO) cells. experiment involved cultivating cells eight bioreactors, four bioreactors subjected temperature shift 146 hours (experimental condition) remaining four bioreactors maintained without temperature shift (control condition).","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/methylation_data_analysis.html","id":"timepoints","dir":"Articles","previous_headings":"About this vignette > Data Overview","what":"Timepoints","title":"methylation-data-analysis","text":"Samples collected 19 distinct time points throughout experiment, specifically: \"48h\", \"72h\", \"96h\", \"120h\", \"144h\", \"168h\", \"192h\", \"216h\", \"240h\", \"264h\", \"268h\", \"288h\", \"312h\", \"336h\", \"360h\", \"384h\", \"408h\", \"432h\", \"456h\", cultivation start. time point sampled eight bioreactors, resulting total 130 samples.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/methylation_data_analysis.html","id":"additonal-effects-in-the-experiment-reactor-and-group","dir":"Articles","previous_headings":"About this vignette > Data Overview","what":"Additonal effects in the experiment: Reactor and Group","title":"methylation-data-analysis","text":"experiment, two effects consider: Reactor Group. refers different bioreactors used cell cultivation, can exhibit substantial variability. reactor assigned single condition: either constant temperature temperature-shifted. result, reactor blocked effect. Reactor treated fixed effect simply remove influence. Instead, treated random effect, allows us model variability appropriately. refers two separate groups bioreactors run. apparatus containes 4 bioreactors, amount can run simultaneosly. 4 run initial 4. Group considered batch effect respect condition (constant temperature vs. temperature-shifted). Since reactor blocked effect, variability due reactors directly separated condition. Instead, linear mixed models (LMMs) used attribute reactor random effect, allowing us account variability isolating effects condition. approach ensures analysis appropriately handles hierarchical structure data avoids incorrect conclusions.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/methylation_data_analysis.html","id":"note","dir":"Articles","previous_headings":"About this vignette > Data Overview","what":"Note","title":"methylation-data-analysis","text":"documentation SplineOmics package functions can viewed ","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/methylation_data_analysis.html","id":"load-the-packages","dir":"Articles","previous_headings":"","what":"Load the packages","title":"methylation-data-analysis","text":"","code":"# library(SplineOmics) library(devtools) #> Loading required package: usethis devtools::load_all() #> ℹ Loading SplineOmics library(readr) # For reading the meta CSV file #>  #> Attaching package: 'readr' #> The following objects are masked from 'package:testthat': #>  #>     edition_get, local_edition library(here)  # For managing filepaths #> here() starts at /home/thomas/Documents/PhD/projects/DGTX/SplineOmics_hub/SplineOmics library(dplyr) # For data manipulation #>  #> Attaching package: 'dplyr' #> The following object is masked from 'package:testthat': #>  #>     matches #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(knitr) # For Showing the head of the data and the meta tables."},{"path":"https://csbg.github.io/SplineOmics/articles/methylation_data_analysis.html","id":"load-the-files","dir":"Articles","previous_headings":"","what":"Load the files","title":"methylation-data-analysis","text":"","code":"data_df <- readRDS(xzfile(system.file(   \"extdata\",   \"methylation_data.rds.xz\",   package = \"SplineOmics\" )))  meta <- readr::read_csv(   system.file(     \"extdata\",     \"methylation_meta.csv\",     package = \"SplineOmics\"   ),   show_col_types = FALSE )"},{"path":"https://csbg.github.io/SplineOmics/articles/methylation_data_analysis.html","id":"show-top-rows-of-data","dir":"Articles","previous_headings":"Load the files","what":"Show top rows of data","title":"methylation-data-analysis","text":"","code":"kable(   head(data),   format = \"markdown\"   )"},{"path":"https://csbg.github.io/SplineOmics/articles/methylation_data_analysis.html","id":"show-top-rows-of-meta","dir":"Articles","previous_headings":"Load the files","what":"Show top rows of meta","title":"methylation-data-analysis","text":"","code":"kable(   head(meta),   format = \"markdown\"   ) data <- SplineOmics::extract_data(   # The dataframe with the numbers on the left and info on the right.   data = data_df,   # Use this annotation column for the feature names.   feature_name_columns = c(\"feature_names\"),   top_row = 1,   bottom_row = 300,   right_col = 131,   left_col = 2 )"},{"path":"https://csbg.github.io/SplineOmics/articles/methylation_data_analysis.html","id":"perform-eda-exploratory-data-analysis","dir":"Articles","previous_headings":"","what":"Perform EDA (exploratory data analysis)","title":"methylation-data-analysis","text":"","code":"report_info <- list(   omics_data_type = \"EPI\",   data_description = \"Methylation data of CHO cells\",   data_collection_date = \"December 2024\",   analyst_name = \"Thomas Rauter\",   contact_info = \"thomas.rauter@plus.ac.at\",   project_name = \"DGTX\" )  report_dir <- here::here(   \"results\",   \"explore_data\" ) splineomics <- SplineOmics::create_splineomics(   data = data,   meta = meta,   report_info = report_info,   condition = \"Condition\",           # Column of meta that contains the levels.   meta_batch_column = \"Group\"        # Remove batch effect for plotting. ) plots <- SplineOmics::explore_data(   splineomics = splineomics,    report_dir = withr::local_tempdir() ) #> Warning: The data contains missing values (NA). Ensure that imputation or handling of missing values aligns with your analysis requirements. Note that limma can  handle missing values (it just ignores them), and therefore  also SplineOmics can handle them. #> Making density plots... #> Making violin plots... #> Making PCA plots... #> 25 rows with missing values removed before PCA. #> Making MDS plots... #> 25 rows with missing values removed before MDS #> Making correlation heatmaps... #> Making mean correlation with time plots... #> Making lag1 differences plots... #> Making first lag auto-correlation with time plots... #> 25 rows with missing values removed before first lag autocorrelation plot #> Making cv plots... #> Warning: Removed 367 rows containing non-finite outside the scale range #> (`stat_density()`). #> Warning: Removed 177 rows containing non-finite outside the scale range #> (`stat_density()`). #> Warning: Removed 190 rows containing non-finite outside the scale range #> (`stat_density()`). #> Warning: Removed 177 rows containing non-finite outside the scale range #> (`stat_ydensity()`). #> Warning: Removed 177 rows containing non-finite outside the scale range #> (`stat_boxplot()`). #> Warning: Removed 190 rows containing non-finite outside the scale range #> (`stat_ydensity()`). #> Warning: Removed 190 rows containing non-finite outside the scale range #> (`stat_boxplot()`). #> Making density plots... #> Making violin plots... #> Making PCA plots... #> 25 rows with missing values removed before PCA. #> Making MDS plots... #> 25 rows with missing values removed before MDS #> Making correlation heatmaps... #> Making mean correlation with time plots... #> Making lag1 differences plots... #> Making first lag auto-correlation with time plots... #> 25 rows with missing values removed before first lag autocorrelation plot #> Making cv plots... #> Warning: Removed 367 rows containing non-finite outside the scale range #> (`stat_density()`). #> Warning: Removed 177 rows containing non-finite outside the scale range #> (`stat_density()`). #> Warning: Removed 190 rows containing non-finite outside the scale range #> (`stat_density()`). #> Warning: Removed 177 rows containing non-finite outside the scale range #> (`stat_ydensity()`). #> Warning: Removed 177 rows containing non-finite outside the scale range #> (`stat_boxplot()`). #> Warning: Removed 190 rows containing non-finite outside the scale range #> (`stat_ydensity()`). #> Warning: Removed 190 rows containing non-finite outside the scale range #> (`stat_boxplot()`). #>  #>  Info Exploratory data analysis completed successfully. #>  Your HTML reports are located in the directory:  /tmp/RtmptBgELq/file9be966982ae4 . #>  Please note that due to embedded files, the reports might be flagged as #>  harmful by other software. Rest assured that they provide no harm."},{"path":"https://csbg.github.io/SplineOmics/articles/methylation_data_analysis.html","id":"run-limma-spline-analysis","dir":"Articles","previous_headings":"","what":"Run limma spline analysis","title":"methylation-data-analysis","text":"example, skipping finding best hyperparameters screen_limma_hyperparams() function, already clear idea use. Lets define parameters put SplineOmics object: Run run_limma_splines() function:","code":"spline_params <- list(   spline_type = c(\"n\"),    # natural cubic splines   dof = c(3L)              # Degree of freedom of 3 for the splines. )  design <- \"~ 1 + Condition*Time + Group + (1|Reactor)\"  splineomics <- SplineOmics::update_splineomics(   splineomics = splineomics,   data = data,   design = design,    mode = \"integrated\",    spline_params = spline_params,   bp_cfg = c(       # For parallel computing for variancePartition::dream (lmm)     n_cores = 1,        # For the vignette, just use one core.         blas_threads = 1     ) ) splineomics <- SplineOmics::run_limma_splines(   splineomics = splineomics ) #> Warning: The data contains missing values (NA). Ensure that imputation or handling of missing values aligns with your analysis requirements. Note that limma can  handle missing values (it just ignores them), and therefore  also SplineOmics can handle them. #>  #> Make sure that the design formula contains no interaction between the condition and time for mode == isolated, and that it contains an interaction for mode == integrated. Otherwise, you will get an uncaught error of 'coefficients not estimable' or 'subscript out of bounds' (or any other hard to understand error). #> Using arrayWeights strategy for heteroscedasticity adjustment. #>  #> Fitting global model... #>  #> NOTE: If you manually stop run_limma_splines() in RStudio and used, parallelization for variancePartition::dream(), then those parallelized processes may continue running. Use your system's process manager to terminate them manually! #> Warning in variancePartition::dream(exprObj = data, formula = stats::as.formula(design), : Model failed for 8 responses. #>   See errors with attr(., 'errors') #> Info Finished limma spline analysis in 0.2 min"},{"path":"https://csbg.github.io/SplineOmics/articles/methylation_data_analysis.html","id":"build-limma-report","dir":"Articles","previous_headings":"","what":"Build limma report","title":"methylation-data-analysis","text":"topTables three limma result categories can used generate p-value histograms volcano plots.","code":"plots <- SplineOmics::create_limma_report(   splineomics = splineomics,   report_dir = withr::local_tempdir() ) #> Warning: The data contains missing values (NA). Ensure that imputation or handling of missing values aligns with your analysis requirements. Note that limma can  handle missing values (it just ignores them), and therefore  also SplineOmics can handle them. #>  #> Make sure that the design formula contains no interaction between the condition and time for mode == isolated, and that it contains an interaction for mode == integrated. Otherwise, you will get an uncaught error of 'coefficients not estimable' or 'subscript out of bounds' (or any other hard to understand error). #>  #>  Info Limma report generation completed successfully. #>  Your HTML reports are located in the directory:  /tmp/RtmptBgELq/file9be96f50094e . #>  Please note that due to embedded files, the reports might be flagged as #>  harmful by other software. Rest assured that they provide no harm."},{"path":"https://csbg.github.io/SplineOmics/articles/methylation_data_analysis.html","id":"cluster-the-hits-significant-features","dir":"Articles","previous_headings":"","what":"Cluster the hits (significant features)","title":"methylation-data-analysis","text":"","code":"adj_pthresholds <- c(      0.05,   # constant (temperature)      0.05    # temp_shift )  nr_clusters <- list(   Constant   = 2:6,                       Temp..Shifted = 2:6    )  report_dir <- here::here(   \"results\",   \"clustering_reports\" )  treatment_labels <- list(   # constant = NA,    temp_shift = \"temp shift\",     constant_temp_shift = \"temp shift\"    )  # treatment_timepoints allows to specify the timepoint, at which the vertical # dashed treatment line is placed. Again, for the constant level, we don't # have a treatment, so we also do not specify a timepoint. treatment_timepoints <- list(   # constant = NA,   temp_shift = 146,     constant_temp_shift = 146   )  plot_info <- list( # For the spline plots   y_axis_label = \"beta value\",   time_unit = \"hours\",    treatment_labels = treatment_labels,   treatment_timepoints = treatment_timepoints )  genes <- rownames(data)  plot_options <- list(   # When meta_replicate_column is not there, all datapoints are blue.   meta_replicate_column = \"Reactor\" # Colors the data points based on Reactor )  clustering_results <- SplineOmics::cluster_hits(   splineomics = splineomics,   adj_pthresholds = adj_pthresholds,   nr_clusters = nr_clusters,   genes = genes,   plot_info = plot_info,   report = TRUE,   plot_options = plot_options,   report_dir = withr::local_tempdir(),   adj_pthresh_avrg_diff_conditions = 0.05,   adj_pthresh_interaction_condition_time = 0.05 ) #> Warning: The data contains missing values (NA). Ensure that imputation or handling of missing values aligns with your analysis requirements. Note that limma can  handle missing values (it just ignores them), and therefore  also SplineOmics can handle them. #>  #> Make sure that the design formula contains no interaction between the condition and time for mode == isolated, and that it contains an interaction for mode == integrated. Otherwise, you will get an uncaught error of 'coefficients not estimable' or 'subscript out of bounds' (or any other hard to understand error). #>  #> Warning: Not all names in treatment_labels and treatment_timepoints are present in the condition column of the meta data. #>  - Offending treatment_labels: temp_shift, constant_temp_shift #>  - Offending treatment_timepoints: temp_shift, constant_temp_shift #> Note: If these elements belong to the double spline plots, this is acceptable and this warning can be ignored! #>  #>  Performing the clustering... #> For the level:  Constant #> For the level:  Temp..Shifted #> Generating heatmap... #> Generating cluster mean splines for level:  Constant #> Generating spline plots... #> Generating cluster mean splines for level:  Temp..Shifted #> Generating spline plots... #> Generating report. This takes a few seconds. #>  #>  Info Clustering the hits completed successfully. #>  Your HTML reports are located in the directory:  /tmp/RtmptBgELq/file9be9267465fb . #>  Please note that due to embedded files, the reports might be flagged as #>  harmful by other software. Rest assured that they provide no harm. #> Running this function took 0.3 min"},{"path":"https://csbg.github.io/SplineOmics/articles/methylation_data_analysis.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"methylation-data-analysis","text":"","code":"#> R version 4.5.1 (2025-06-13) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.5 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.10.0  #> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=de_AT.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=de_AT.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=de_AT.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=de_AT.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: Europe/Vienna #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices datasets  utils     methods   base      #>  #> other attached packages: #> [1] knitr_1.50        dplyr_1.1.4       here_1.0.1        readr_2.1.5       #> [5] SplineOmics_0.3.1 testthat_3.2.3    devtools_2.4.5    usethis_3.1.0     #>  #> loaded via a namespace (and not attached): #>   [1] RColorBrewer_1.1-3       rstudioapi_0.17.1        jsonlite_2.0.0           #>   [4] shape_1.4.6.1            magrittr_2.0.3           farver_2.1.2             #>   [7] nloptr_2.2.1             rmarkdown_2.29           GlobalOptions_0.1.2      #>  [10] fs_1.6.6                 ragg_1.4.0               vctrs_0.6.5              #>  [13] memoise_2.0.1            minqa_1.2.8              base64enc_0.1-3          #>  [16] progress_1.2.3           htmltools_0.5.8.1        broom_1.0.8              #>  [19] Formula_1.2-5            variancePartition_1.38.0 sass_0.4.10              #>  [22] KernSmooth_2.23-26       bslib_0.9.0              htmlwidgets_1.6.4        #>  [25] desc_1.4.3               pbkrtest_0.5.4           plyr_1.8.9               #>  [28] cachem_1.1.0             mime_0.13                lifecycle_1.0.4          #>  [31] iterators_1.0.14         pkgconfig_2.0.3          Matrix_1.7-3             #>  [34] R6_2.6.1                 fastmap_1.2.0            rbibutils_2.3            #>  [37] shiny_1.11.1             clue_0.3-66              digest_0.6.37            #>  [40] numDeriv_2016.8-1.1      colorspace_2.1-1         S4Vectors_0.46.0         #>  [43] rprojroot_2.1.0          pkgload_1.4.0            textshaping_1.0.1        #>  [46] labeling_0.4.3           abind_1.4-8              compiler_4.5.1           #>  [49] remotes_2.5.0            bit64_4.6.0-1            aod_1.3.3                #>  [52] withr_3.0.2              doParallel_1.0.17        backports_1.5.0          #>  [55] BiocParallel_1.42.1      carData_3.0-5            pkgbuild_1.4.8           #>  [58] gplots_3.2.0             MASS_7.3-65              sessioninfo_1.2.3        #>  [61] rjson_0.2.23             corpcor_1.6.10           gtools_3.9.5             #>  [64] caTools_1.18.3           tools_4.5.1              zip_2.3.3                #>  [67] httpuv_1.6.16            remaCor_0.0.18           glue_1.8.0               #>  [70] nlme_3.1-168             promises_1.3.3           grid_4.5.1               #>  [73] cluster_2.1.8.1          reshape2_1.4.4           generics_0.1.4           #>  [76] gtable_0.3.6             tzdb_0.5.0               tidyr_1.3.1              #>  [79] hms_1.1.3                car_3.1-3                BiocGenerics_0.54.0      #>  [82] ggrepel_0.9.6            foreach_1.5.2            pillar_1.11.0            #>  [85] stringr_1.5.1            vroom_1.6.5              limma_3.64.1             #>  [88] later_1.4.2              circlize_0.4.16          splines_4.5.1            #>  [91] lattice_0.22-5           bit_4.6.0                renv_1.1.4               #>  [94] gmp_0.7-5                tidyselect_1.2.1         ComplexHeatmap_2.24.1    #>  [97] pbapply_1.7-2            miniUI_0.1.2             reformulas_0.4.1         #> [100] IRanges_2.42.0           svglite_2.2.1            RhpcBLASctl_0.23-42      #> [103] stats4_4.5.1             xfun_0.52                Biobase_2.68.0           #> [106] statmod_1.5.0            brio_1.1.5               matrixStats_1.5.0        #> [109] stringi_1.8.7            yaml_2.3.10              boot_1.3-31              #> [112] evaluate_1.0.4           codetools_0.2-19         tibble_3.3.0             #> [115] BiocManager_1.30.26      cli_3.6.5                xtable_1.8-4             #> [118] systemfonts_1.2.3        Rdpack_2.6.4             jquerylib_0.1.4          #> [121] Rcpp_1.1.0               EnvStats_3.1.0           png_0.1-8                #> [124] parallel_4.5.1           ellipsis_0.3.2           pkgdown_2.1.3            #> [127] ggplot2_3.5.2            prettyunits_1.2.0        ClusterR_1.3.3           #> [130] profvis_0.4.0            urlchecker_1.0.1         bitops_1.0-9             #> [133] lme4_1.1-37              mvtnorm_1.3-3            lmerTest_3.1-3           #> [136] scales_1.4.0             writexl_1.5.4            purrr_1.1.0              #> [139] crayon_1.5.3             fANCOVA_0.6-1            GetoptLong_1.0.5         #> [142] rlang_1.1.6"},{"path":"https://csbg.github.io/SplineOmics/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Thomas Rauter. Author, maintainer.","code":""},{"path":"https://csbg.github.io/SplineOmics/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rauter T (2025). SplineOmics: Streamlines process analysing omics timeseries data splines. R package version 0.3.1, https://csbg.github.io/SplineOmics.","code":"@Manual{,   title = {SplineOmics: Streamlines the process of analysing omics timeseries data with splines},   author = {Thomas Rauter},   year = {2025},   note = {R package version 0.3.1},   url = {https://csbg.github.io/SplineOmics}, }"},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"splineomics","dir":"","previous_headings":"","what":"Streamlines the process of analysing omics timeseries data with splines","title":"Streamlines the process of analysing omics timeseries data with splines","text":"R package SplineOmics finds significant features (hits) time-series -omics data using splines limma hypothesis testing. clusters hits based spline shape showing results summary HTML reports. graphical abstract shows full workflow streamlined SplineOmics: Graphical Abstract SplineOmics Workflow","code":""},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"table-of-contents","dir":"","previous_headings":"","what":"Table of Contents","title":"Streamlines the process of analysing omics timeseries data with splines","text":"📘 Introduction 🐳 Docker Container 🎓 Tutorial 📋 Details 🧬 RNA-seq Glycan Data 📦 Dependencies 📚 Reading ❓ Getting Help 💬 Feedback 📜 License 🎓 Citation 🌟 Contributors 🙏 Acknowledgements","code":""},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"blue_book-introduction","dir":"","previous_headings":"","what":"📘 Introduction","title":"Streamlines the process of analysing omics timeseries data with splines","text":"Welcome SplineOmics, R package designed streamline analysis -omics time-series data, followed automated HTML report generation.","code":""},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"is-the-splineomics-package-of-use-for-me","dir":"","previous_headings":"📘 Introduction","what":"Is the SplineOmics package of use for me?","title":"Streamlines the process of analysing omics timeseries data with splines","text":"-omics data time, package help run limma splines, decide parameters use, perform clustering, run GSEA show result plots HTML reports. time-series data valid input limma package also valid input SplineOmics package (transcriptomics, proteomics, phosphoproteomics, metabolomics, glycan fractional abundances, etc.). Note: far, package tested datasets 2 conditions. theory, also work conditions, unexpected errors can arise.","code":""},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"what-do-i-need-precisely","dir":"","previous_headings":"📘 Introduction","what":"What do I need precisely?","title":"Streamlines the process of analysing omics timeseries data with splines","text":"Data: data matrix row feature (e.g., protein, metabolite, etc.) column sample taken specific time. data must NA values, normally distributed features dependence samples. Meta: table metadata columns/samples data matrix (e.g., batch, time point, etc.) Annotation (optional): table identifiers rows/features data matrix (e.g., gene protein name).","code":""},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"capabilities","dir":"","previous_headings":"📘 Introduction","what":"Capabilities","title":"Streamlines the process of analysing omics timeseries data with splines","text":"SplineOmics, can: Automatically perform exploratory data analysis: explore_data() function generates HTML report, containing various plots, density, PCA, correlation heatmap plots (example report). Explore various limma splines hyperparameters: Test combinations hyperparameters, different datasets, limma design formulas, degrees freedom, p-value thresholds, etc., using screen_limma_hyperparams() function (example report (along encoding)). Perform limma spline analysis: Use run_limma_splines() function perform limma analysis splines optimal hyperparameters identified (example report). Cluster significant features: Cluster significant features (hits) identified spline analysis cluster_hits() function (example report). Run GSEA clustered hits: Perform gene set enrichment analysis (GSEA) using clustered hits create_gsea_report() function (example report).","code":""},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"wrench-installation","dir":"","previous_headings":"","what":"🔧 Installation","title":"Streamlines the process of analysing omics timeseries data with splines","text":"Follow steps install SplineOmics package GitHub repository R environment. Note Carefully read terminal messages installations. can happen installations fail due missing dependencies, must resolve using commands necessarily written .","code":""},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"prerequisites","dir":"","previous_headings":"🔧 Installation","what":"Prerequisites","title":"Streamlines the process of analysing omics timeseries data with splines","text":"Ensure R installed system. , download install CRAN. RStudio recommended user-friendly experience R. Download install RStudio posit.co.","code":""},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"installation-steps","dir":"","previous_headings":"🔧 Installation","what":"Installation Steps","title":"Streamlines the process of analysing omics timeseries data with splines","text":"Note Windows Users: installation Windows, might see message indicating Rtools installed, typically required compiling R packages source. However, installation, Rtools necessary, can safely ignore message. Open RStudio R console new existing project folder. Create virtual environment renv Install BiocManager Bioconductor dependencies (already installed) Install required Bioconductor packages Install remotes GitHub package installation Install SplineOmics package GitHub non-Bioconductor dependencies, using remotes Verify installation SplineOmics package","code":"renv::init() install.packages(\"BiocManager\") BiocManager::install(   c(\"ComplexHeatmap\", \"limma\", \"variancePartition\")   # force = TRUE   # when encountering issues ) install.packages(\"remotes\") remotes::install_github(   \"csbg/SplineOmics\",   # GitHub repository   ref = \"v0.3.1\",       # Specify the tag to install, e.g. v0.3.1 (check GitHub for the newest version!)   dependencies = TRUE,  # Install all dependencies   upgrade = \"always\"    # Always upgrade dependencies   # force = TRUE        # when encountering issues ) # Verify the installation of the SplineOmics package if (\"SplineOmics\" %in% rownames(installed.packages())) {   message(\"SplineOmics was installed successfully.\") } else {   message(\"SplineOmics installation failed. Please check for errors during installation.\") }"},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"troubleshooting","dir":"","previous_headings":"🔧 Installation","what":"Troubleshooting","title":"Streamlines the process of analysing omics timeseries data with splines","text":"encounter errors related dependencies package versions installation, try updating R RStudio latest versions repeat installation steps. issues specifically related SplineOmics package, check Issues section GitHub repository similar problems post new issue.","code":""},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"whale-docker-container","dir":"","previous_headings":"🔧 Installation","what":"🐳 Docker Container","title":"Streamlines the process of analysing omics timeseries data with splines","text":"Alternatively, can run analysis Docker container. underlying Docker image encapsulates SplineOmics package together necessary environment dependencies. ensures higher levels reproducibility analysis carried consistent environment, independent operating system custom configurations. Please note must Docker Engine installed machine. instructions install , consult official Docker Engine installation guide. information Docker containers can found official Docker page. instructions downloading image SplineOmics package running container, please refer Docker instructions.","code":""},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"troubleshooting-1","dir":"","previous_headings":"🔧 Installation > 🐳 Docker Container","what":"Troubleshooting","title":"Streamlines the process of analysing omics timeseries data with splines","text":"face “permission denied” issues Linux distributions, check vignette.","code":""},{"path":[]},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"mortar_board-tutorial","dir":"","previous_headings":"▶️ Usage","what":"🎓 Tutorial","title":"Streamlines the process of analysing omics timeseries data with splines","text":"tutorial covers real CHO cell time-series proteomics example start end. Note SplineOmics package theory supports experimental design amount conditions. However, far tested datasets contain two conditions. Therefore, ruled bugs occur package used experiments conditions. bug occurs, please raise issue GitHub, adressed.","code":""},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"clipboard-details","dir":"","previous_headings":"▶️ Usage","what":"📋 Details","title":"Streamlines the process of analysing omics timeseries data with splines","text":"detailed description arguments outputs functions package (exported internal functions) can found .","code":""},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"design-limma-design-formula","dir":"","previous_headings":"▶️ Usage > 📋 Details","what":"Design limma design formula","title":"Streamlines the process of analysing omics timeseries data with splines","text":"quick guide design limma design formula can found . explanation three different limma results .","code":""},{"path":[]},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"rna-seq-data","dir":"","previous_headings":"▶️ Usage > 🧬 RNA-seq and Glycan Data","what":"RNA-seq data","title":"Streamlines the process of analysing omics timeseries data with splines","text":"Transcriptomics data must preprocessed limma. need provide appropriate object, voom object, rna_seq_data argument SplineOmics object (see documentation). Along , normalized matrix (e.g., $E slot voom object) must passed data argument. allows flexibility preprocessing; can use method prefer long final object matrix compatible limma. One way preprocess RNA-seq data using preprocess_rna_seq_data() function included SplineOmics package (see documentation). can find example analysis RNA-seq data SplineOmics package.","code":""},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"glycan-fractional-abundance-data","dir":"","previous_headings":"▶️ Usage > 🧬 RNA-seq and Glycan Data","what":"Glycan fractional abundance data","title":"Streamlines the process of analysing omics timeseries data with splines","text":"glycan fractional abundance data matrix, row represents type glycan columns correspond timepoints, must transformed analysis. preprocessing step essential due compositional nature data. compositional data, increase abundance one component (glycan) necessarily results decrease others, introducing dependency among variables can bias analysis. One way address issue applying Centered Log Ratio (CLR) transformation data clr function compositions package: results clr transformed data can harder understand interpret however. prefer ease interpretation fine results contain artifacts due compositional nature data, log2 transform data instead use input SplineOmics package.","code":"library(compositions) clr_transformed_data <- clr(data_matrix)  # use as SplineOmics input log2_transformed_data <- log2(data_matrix)  # use as SplineOmics input"},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"package-dependencies","dir":"","previous_headings":"","what":"📦 Dependencies","title":"Streamlines the process of analysing omics timeseries data with splines","text":"SplineOmics package relies several R packages functionality. list dependencies automatically installed along SplineOmics. already packages installed, ensure date avoid compatibility issues. ComplexHeatmap (>= 2.18.0): creating complex heatmaps advanced features. base64enc (>= 0.1-3): encoding/decoding base64. dendextend (>= 1.17.1): extending dendrogram objects, allowing easier manipulation dendrograms. dplyr (>= 1.1.4): data manipulation. ggplot2 (>= 3.5.1): creating elegant data visualizations using grammar graphics. ggrepel (>= 0.9.5): better label placement ggplot2. (>= 1.0.1): constructing paths project’s files. limma (>= 3.58.1): linear models microarray RNA-seq analysis. openxlsx (>= 4.2.6.1): reading, writing, editing .xlsx files. patchwork (>= 1.2.0): combining multiple ggplot objects single plot. pheatmap (>= 1.0.12): creating aesthetically pleasing heatmaps. progress (>= 1.2.3): adding progress bars loops apply functions. purrr (>= 1.0.2): functional programming tools. rlang (>= 1.1.4): working core language features R. scales (>= 1.3.0): scale functions visualizations. svglite (>= 2.1.3): creating high-quality vector graphics (SVG). tibble (>= 3.2.1): creating tidy data frames. tidyr (>= 1.3.1): tidying data. zip (>= 2.3.1): compressing combining files zip archives.","code":""},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"optional-dependencies","dir":"","previous_headings":"📦 Dependencies","what":"Optional Dependencies","title":"Streamlines the process of analysing omics timeseries data with splines","text":"packages optional needed specific functionality: edgeR (>= 4.0.16): preprocessing RNA-seq data preprocess_rna_seq_data() function. clusterProfiler (>= 4.10.1): run_gsea() function (gene set enrichment analysis). rstudioapi (>= 0.16.0): open_tutorial() function.","code":""},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"r-version","dir":"","previous_headings":"📦 Dependencies","what":"R Version","title":"Streamlines the process of analysing omics timeseries data with splines","text":"Recommended: R 4.3.3 higher","code":""},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"books-further-reading","dir":"","previous_headings":"","what":"📚 Further Reading","title":"Streamlines the process of analysing omics timeseries data with splines","text":"interested gaining deeper understanding methodologies used SplineOmics package, recommended publications: Splines: learn splines, can refer review. limma: read limma R package, can refer publication. PCA: learn PCA, download read document. Hierarchical clustering: get information hierarchical clustering, can refer web article.","code":""},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"question-getting-help","dir":"","previous_headings":"","what":"❓ Getting Help","title":"Streamlines the process of analysing omics timeseries data with splines","text":"encounter bug suggestion improving SplineOmics package, encourage open issue GitHub repository. opening new issue, please check see question bug already reported another user. helps avoid duplicate reports ensures can address problems efficiently. detailed questions, discussions, contributions regarding package’s use development, please refer GitHub Discussions page SplineOmics.","code":""},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"speech_balloon-feedback","dir":"","previous_headings":"","what":"💬 Feedback","title":"Streamlines the process of analysing omics timeseries data with splines","text":"appreciate feedback! Besides raising issues, can provide feedback following ways: Direct Email: Send feedback directly Thomas Rauter. Anonymous Feedback: Use Google Form provide anonymous feedback answering questions. feedback helps us improve project address issues may encounter.","code":""},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"scroll-license","dir":"","previous_headings":"","what":"📜 License","title":"Streamlines the process of analysing omics timeseries data with splines","text":"package licensed MIT License: LICENSE © 2024 Thomas Rauter. rights reserved.","code":""},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"mortar_board-citation","dir":"","previous_headings":"","what":"🎓 Citation","title":"Streamlines the process of analysing omics timeseries data with splines","text":"SplineOmics package currently published peer-reviewed scientific journal similar outlet. However, package helped work, consider citing GitHub repository. cite package, can use citation information provided CITATION.cff file. can also generate citation various formats using CITATION.cff file visiting top right repo clicking “Cite repository” button. Also, like package, consider giving GitHub repository star. support helps us continued development improvement SplineOmics. Thank using package!","code":""},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"star2-contributors","dir":"","previous_headings":"","what":"🌟 Contributors","title":"Streamlines the process of analysing omics timeseries data with splines","text":"Thomas-Rauter - 🚀 Wrote package, developed approach together VSchaepertoens guidance nfortelny skafdasschaf. nfortelny - 🧠 Principal Investigator, provided guidance support overall approach. skafdasschaf - 🔧 Helped reviewing code, delivered improvement suggestions scientific guidance develop approach. VSchaepertoens - ✨ Developed one internal plotting function, well code exploratory data analysis plots, overall approach together Thomas-Rauter.","code":""},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"pray-acknowledgements","dir":"","previous_headings":"","what":"🙏 Acknowledgements","title":"Streamlines the process of analysing omics timeseries data with splines","text":"work carried context DigiTherapeutX project, funded Austrian Science Fund (FWF). research conducted supervision Prof. Nikolaus Fortelny, leads Computational Systems Biology working group Paris Lodron University Salzburg, Austria. can find information Prof. Fortelny’s research group .","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/cluster_hits.html","id":null,"dir":"Reference","previous_headings":"","what":"cluster_hits() — cluster_hits","title":"cluster_hits() — cluster_hits","text":"Performs clustering hits top tables generated differential expression analysis. function filters hits based adjusted p-value thresholds, extracts spline coefficients significant features, normalizes coefficients, applies hierarchical clustering. results, including clustering assignments normalized spline curves, saved specified directory compiled HTML report.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/cluster_hits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cluster_hits() — cluster_hits","text":"","code":"cluster_hits(   splineomics,   nr_clusters,   adj_pthresholds = c(0.05),   adj_pthresh_avrg_diff_conditions = 0.05,   adj_pthresh_interaction_condition_time = 0.05,   min_effect_size = list(time_effect = 0, avg_diff_cond = 0, interaction_cond_time = 0),   genes = NULL,   plot_info = list(y_axis_label = \"Value\", time_unit = \"min\", treatment_labels = NA,     treatment_timepoints = NA),   plot_options = list(cluster_heatmap_columns = FALSE, meta_replicate_column = NULL),   raw_data = NULL,   report_dir = here::here(),   report = TRUE,   max_hit_number = 25 )"},{"path":"https://csbg.github.io/SplineOmics/reference/cluster_hits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cluster_hits() — cluster_hits","text":"splineomics S3 object class `SplineOmics` contains necessary data parameters analysis, including: data: data matrix values. columns   samples (timepoint + replicate combo) rows features   (e.g. genes proteins). meta: dataframe containing metadata corresponding   data, must include 'Time' column columns specified   conditions. general, columns meta correspond   different types metadata, row corresponds column data   (contains metadata sample). annotation: dataframe maps rows data   annotation info, gene name database identifiers. report_info: named list describing experiment.   Must include following fields:     - \"omics_data_type\"     - \"data_description\"     - \"data_collection_date\"     - \"analyst_name\"     - \"contact_info\"     - \"project_name\" May also include following optional fields:     - \"method_description\"     - \"results_summary\"     - \"conclusions\" design: character length 1 representing limma   design formula. mode: Specifies design formula constructed:   either `\"isolated\"` `\"integrated\"`. - `\"isolated\"`: level analyzed independently, using     subset data corresponding level. design formula     include condition variable, since one condition     present subset. - `\"integrated\"`: levels analyzed together single model,     using full dataset. design formula includes condition     variable (optionally interaction terms ) results     estimated jointly across levels. condition: Character vector length 1 specifying column   name meta used define groups analysis. spline_params: list spline parameters analysis. meta_batch_column: character string specifying column   name metadata used batch effect removal. meta_batch2_column: character string specifying second   column name metadata used batch effect removal. limma_splines_result: list data frames, representing    top table differential expression analysis, containing least    'adj.P.Val' expression data columns. feature_name_columns: Character vector strings   specify column original data dataframe used   automatically build feature names extract_data   function. nr_clusters Named list specifying number clusters per   condition level. list must one element per condition   level, element must named exactly   corresponding condition name (e.g., \"condition1\",   \"condition2\"). element's value controls k used k-means level: - Single integer (k > 0, e.g. 3): use exactly     many clusters.   - Integer range (written :, e.g. 2:6):     choose k within range minimizes     Bayesian Information Criterion (BIC) computed k-means fit     range (lower better). Ties broken first     minimum encountered. Notes condition levels must present exactly names. Values must positive integers; ranges must increasing           (e.g. 2:6). BIC computed k-means using Euclidean distance. common           form \\(\\mathrm{BIC} = n \\log(\\mathrm{WCSS}/n) +           k \\log(n)\\, p\\), \\(n\\) number series, \\(p\\)           number timepoints (features), \\(\\mathrm{WCSS}\\)           total within-cluster sum squares fit. Clustering fail requested k strictly           less number available series level. Examples adj_pthresholds Numeric vector p-value thresholds filtering hits top table. adj_pthresh_avrg_diff_conditions p-value threshold results average difference condition limma result. Per default 0 ( turned ). adj_pthresh_interaction_condition_time p-value threshold results interaction condition time limma result. Per default 0 (turned ). min_effect_size named list specifies minimum effect size   thresholds consider feature biologically meaningful, addition   statistical significance. allows users filter \"trivial\"   hits pass adjusted p-value cutoffs show negligible effect sizes. list must contain following elements:   - `time_effect`: Minimum cumulative travel time effects (Category 1).     Features smaller travel ignored even significant.   - `avg_diff_cond`: Minimum absolute effect size average differences     conditions (Category 2). Ensures contrasts     relevant magnitude reported.   - `interaction_cond_time`: Minimum effect size interaction     condition time (Category 3). controls large     differential curve travel must across conditions count hit. Values numeric scalars (typically >0). example:   `min_effect_size = list(time_effect = 1, avg_diff_cond = 1,   interaction_cond_time = 2)` keep features cumulative   travels condition-time differences cutoffs. Use smaller   values (e.g., 0.1) permissive filtering, larger values   conservative thresholds. default 0 three elements. genes character vector gene names corresponding features analyzed. order entries must match feature order data. Gene names standardized (cleaned) ensure compatibility downstream databases used overrepresentation analysis clustering. plot_info List containing elements y_axis_label (string), time_unit (string), treatment_labels (character vector), treatment_timepoints (integer vector). can also NA. list used add info spline plots. time_unit used label x-axis, treatment_labels -timepoints used create vertical dashed lines, indicating positions treatments (feeding, temperature shift, etc.). plot_options named list controlling optional plot customization. list can include one following entries (supplied fall back default values): cluster_heatmap_columns (`logical`, default = FALSE):     Whether cluster columns heatmap. meta_replicate_column (`character(1)`,     default = NULL):     Name column meta encodes replicate information.     supplied, spline plot data points colored replicate, allowing     replicate-level variation assessed. raw_data Optional. Data matrix raw (unimputed) data, still containing NA values. provided, highlights datapoints spline plots originally NA imputed. report_dir Character string specifying directory path HTML report output files saved. Default current working dir. report Boolean TRUE FALSE value specifying report generated. max_hit_number Maximum number hits plotted within cluster. can used limit computation time size HTML report case many hits. Default 25.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/cluster_hits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"cluster_hits() — cluster_hits","text":"named list three elements: cluster_table tibble containing one row per feature_nr metadata     cluster assignments across analysis categories. structure : feature_nr – Numeric feature identifier. feature_name – Preferred feature name, prioritizing         values limma tables, cluster table row         names, falling back numeric feature ID. gene – Preferred gene symbol annotation         table available, otherwise taken cluster tables. cluster_<cond1> / cluster_<cond2> – Cluster         assignments time-effect condition, named according         elements clustered_hits_levels. cluster_cat2 – Present category 2 results         available; combined cluster label form         \"<cluster_<cond1>>_<cluster_<cond2>>\" features         significant category 2. value NA,         feature category 2 hit. cluster_cat3 – Present category 3 results         available; combined cluster label form         \"<cluster_<cond1>>_<cluster_<cond2>>\" features         significant category 3. value NA,         feature category 3 hit. category-specific cluster column (cluster_<cond1>,     cluster_<cond2>, cluster_cat2, cluster_cat3),     value NA indicates feature significant     (hit) category. spline_results named list summarizing fitted spline trajectories, shared     time grid, effect-size based significance flags. Structure: time_grid Numeric vector length \\(T\\) giving         common time points (e.g., hours since cultivation start)         splines predicted. predictions Named list condition (e.g.,         constant, temp_shift). entry numeric         matrix size \\(N \\times T\\) rows corresponding features         columns time_grid. Values predicted spline         trajectories absolute scale used analysis         (e.g., log2-CPM voom). Row order matches feature         order used throughout analysis. time_effect_effect_size Named list condition         numeric vector (length \\(N\\)) per condition giving         cumulative travel (integrated temporal change)         feature’s spline across time_grid. Larger values indicate         stronger within-condition temporal modulation. time_effect_passed_threshold Named list condition         logical vector (length \\(N\\)) per condition indicating         whether corresponding time_effect_effect_size exceeds         user-defined effect-size threshold (.e., time-effect hits). interaction_effect_size Numeric vector (length \\(N\\))         giving differential cumulative travel two         condition-specific splines feature, computed         time_grid. Larger values indicate stronger differences         temporal behaviour conditions (condition–time interaction). interaction_passed_threshold Logical vector (length         \\(N\\)) indicating whether interaction_effect_size         exceeds interaction effect-size threshold (.e., features         significantly different temporal profiles across conditions). Unless stated otherwise, vectors aligned feature order     used prediction matrices; condition names match     levels(meta[[condition]]). plots list plots generated run, corresponding     visualizations shown HTML report produced function.     Additionally, plots list also contains plots showing     consensus clusters potential clustering interaction     condition time (category 3) hits.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/compare_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare hits between two SplineOmics results — compare_results","title":"Compare hits between two SplineOmics results — compare_results","text":"Compares adjusted p-values two SplineOmics result objects across standard categories. Calculates Spearman correlation globally significant hits , generates diagnostic plots, summarizes overlap statistics including Jaccard index hit counts. Note: feature_names columns topTables splineomics1 splineomics2 must names, otherwise, comparisons possible.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/compare_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare hits between two SplineOmics results — compare_results","text":"","code":"compare_results(   splineomics1,   splineomics2,   splineomics1_description = \"SplineOmics_1\",   splineomics2_description = \"SplineOmics_2\",   adj_p_tresh1 = 0.05,   adj_p_tresh2 = 0.05 )"},{"path":"https://csbg.github.io/SplineOmics/reference/compare_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare hits between two SplineOmics results — compare_results","text":"splineomics1 list containing `limma_splines_result` topTables organized category subcategory. splineomics2 structure `splineomics1`; object compare. splineomics1_description Character label used x-axis annotation. splineomics2_description Character label used y-axis annotation. adj_p_tresh1 Numeric p-value threshold calling hits analysis 1. adj_p_tresh2 Numeric p-value threshold calling hits analysis 2.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/compare_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare hits between two SplineOmics results — compare_results","text":"list components: correlation_summary Data frame global hit-level correlations plots Named list ggplot objects hit-subsets. hits_summary Data frame hit counts, overlap, Jaccard index","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/create_limma_report.html","id":null,"dir":"Reference","previous_headings":"","what":"create_limma_report() — create_limma_report","title":"create_limma_report() — create_limma_report","text":"Generates HTML report based results limma analysis splines. report includes various plots sections summarizing analysis results time effects, average differences conditions, interaction effects condition time.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/create_limma_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create_limma_report() — create_limma_report","text":"","code":"create_limma_report(splineomics, adj_pthresh = 0.05, report_dir = here::here())"},{"path":"https://csbg.github.io/SplineOmics/reference/create_limma_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create_limma_report() — create_limma_report","text":"splineomics S3 object class `SplineOmics` contains necessary data parameters analysis, including: limma_splines_result: list containing top tables    differential expression analysis three different limma results. meta: data frame sample metadata. Must contain column                      \"Time\". condition: character string specifying column name                          metadata (meta) defines groups                          analysis. column contains levels                           \"exponential\" \"stationary\" phases,                           \"drug\" \"no_drug\" treatments. annotation: data frame containing feature information,                            gene protein names, associated                            expression data. report_info: list containing metadata analysis                             reporting purposes. adj_pthresh numeric value specifying adjusted p-value threshold significance. Default 0.05. Must > 0 < 1. report_dir string specifying directory report saved. Default current working directory.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/create_limma_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create_limma_report() — create_limma_report","text":"list plots included generated HTML report.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/create_splineomics.html","id":null,"dir":"Reference","previous_headings":"","what":"create_splineomics() — create_splineomics","title":"create_splineomics() — create_splineomics","text":"Creates SplineOmics object containing variables commonly used across multiple functions package. object passed argument functions package.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/create_splineomics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create_splineomics() — create_splineomics","text":"","code":"create_splineomics(   data,   meta,   condition,   rna_seq_data = NULL,   annotation = NULL,   report_info = NULL,   meta_batch_column = NULL,   meta_batch2_column = NULL,   feature_name_columns = NULL,   design = NULL,   use_array_weights = TRUE,   dream_params = NULL,   mode = NULL,   spline_params = NULL,   padjust_method = \"BH\",   bp_cfg = NULL )"},{"path":"https://csbg.github.io/SplineOmics/reference/create_splineomics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create_splineomics() — create_splineomics","text":"data actual omics data. case rna_seq_data argument used, still provide argument. case, input data matrix (example $E part voom object). Assign feature names row headers (otherwise, just numbers feature names). meta Metadata associated omics data. condition condition variable. rna_seq_data object containing preprocessed RNA-seq data, output `limma::voom` similar preprocessing pipeline. argument subjected input control. Rather, regard relies input control `limma::lmfit` function. annotation dataframe feature descriptions data (optional). report_info named list describing experiment. Must include following fields:   - \"omics_data_type\"   - \"data_description\"   - \"data_collection_date\"   - \"analyst_name\"   - \"contact_info\"   - \"project_name\" May also include following optional fields:   - \"method_description\"   - \"results_summary\"   - \"conclusions\" meta_batch_column Column meta batch information (optional). meta_batch2_column Column secondary meta batch information (optional). feature_name_columns Character vector containing column names annotation info describe features. argument used specify HTML report exactly feature names displayed individual spline plot created. Use vector used create row headers data matrix! design design matrix similar object (optional). use_array_weights Boolean flag indicating robust fit strategy deal heteroscedasticity used . set NULL, handeled implicitly based result Levene test. test significant least 10 used. robust strategy uses function voomWithQualityWeights RNA-seq data instead normal voom function. , non-count-based data, function limma::arrayWeights used instead, combined setting robust argument TRUE limma::eBayes function. summary, strategy employed functions downweights samples higher variance. can neccessary, linear models assumption homoscedasticity, means variance (approx.) across datapoints linear model fitted. violated, resulting p-values trusted (common statistical wisdom). dream_params #' named list NULL. NULL, can contain  following named elements: - `dof`: integer greater 1, specifying degrees freedom   dream topTable. - `KenwardRoger`: boolean indicating whether use Kenward-Roger   approximation mixed models. Note random effects now directly specified design formula `dream_params`. mode design formula, must specify either 'isolated' 'integrated' mode. Isolated means limma determines results level using data level. Integrated means limma determines  results levels using full dataset (levels). spline_params Parameters spline functions (optional). Must contain named elements spline_type, must contain either string \"n\" natural cubic splines, \"b\", B-splines, named element degree case B-splines, must contain integer, named element dof, specifying degree freedom, containing integer required natural B-splines. padjust_method Method p-value adjustment, one \"none\", \"BH\", \"\", \"holm\", \"bonferroni\", \"hochberg\", \"hommel\". Defaults \"BH\" (Benjamini-Hochberg). bp_cfg named numeric vector specifying parallelization configuration, expected names `\"n_cores\"` `\"blas_threads\"`. controls many **R worker processes** (`n_cores`) many **BLAS/OpenBLAS threads per process** (`blas_threads`) used parallel computation. `bp_cfg` `NULL`, missing, required fields `NA`, `n_cores` `blas_threads` default `1`. effectively disables parallelization avoids oversubscription CPU threads.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/create_splineomics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create_splineomics() — create_splineomics","text":"SplineOmics object.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/download_bioconductor_database.html","id":null,"dir":"Reference","previous_headings":"","what":"Download Gene Set Annotations from Bioconductor Organism Databases — download_bioconductor_database","title":"Download Gene Set Annotations from Bioconductor Organism Databases — download_bioconductor_database","text":"function extracts gene--ontology mappings specified Bioconductor organism annotation package (e.g., `org.Hs.eg.db`, `org.Mm.eg.db`) saves gene sets `.tsv` file standardized format. output includes mappings Gene Ontology (GO) Biological Process (BP), Molecular Function (MF), Cellular Component (CC), KEGG pathways. resulting file can used directly enrichment functions `clusterProfiler::enricher()` `TERM2GENE`.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/download_bioconductor_database.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download Gene Set Annotations from Bioconductor Organism Databases — download_bioconductor_database","text":"","code":"download_bioconductor_database(   organism_db = \"org.Hs.eg.db\",   output_dir = here::here(),   filename = NULL )"},{"path":"https://csbg.github.io/SplineOmics/reference/download_bioconductor_database.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download Gene Set Annotations from Bioconductor Organism Databases — download_bioconductor_database","text":"organism_db string specifying Bioconductor organism annotation database use (e.g., `\"org.Hs.eg.db\"` human `\"org.Mm.eg.db\"` mouse). output_dir string specifying output directory `.tsv` file saved. Defaults current project directory defined `::()`. filename optional string specifying filename output file. `NULL` (default), filename generated automatically timestamp.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/download_bioconductor_database.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download Gene Set Annotations from Bioconductor Organism Databases — download_bioconductor_database","text":"`data.frame` gene set annotations three columns: DB Ontology/database source, e.g. `\"GO_BP\"`, `\"GO_MF\"`, `\"GO_CC\"`,   `\"KEGG\"` (available). Geneset Ontology term ID pathway ID (e.g. GO ID, KEGG ID). Gene Gene symbol (SYMBOL).","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/download_bioconductor_database.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download Gene Set Annotations from Bioconductor Organism Databases — download_bioconductor_database","text":"TSV three columns: DB Ontology/database source, e.g., \"GO_BP\", \"GO_MF\",   \"GO_CC\", \"KEGG\" (available). Geneset Ontology term ID pathway ID (e.g., GO ID, KEGG ID). Gene Gene symbol (SYMBOL). Note: org.*.eg.db packages longer include KEGG mappings; cases KEGG section empty. addition returning `data.frame`, function also writes table disk `.tsv` file specified `output_dir`.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/download_enrichr_databases.html","id":null,"dir":"Reference","previous_headings":"","what":"Download the Enrichr databases — download_enrichr_databases","title":"Download the Enrichr databases — download_enrichr_databases","text":"function downloads gene sets specified Enrichr databases saves specified output directory .tsv file per default. file named timestamp per default ensure uniqueness (databases stored single file). file 3 columns: DB containing database name, Geneset, genesets, Gene, gene names.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/download_enrichr_databases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download the Enrichr databases — download_enrichr_databases","text":"","code":"download_enrichr_databases(   gene_set_lib,   output_dir = here::here(),   filename = NULL )"},{"path":"https://csbg.github.io/SplineOmics/reference/download_enrichr_databases.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download the Enrichr databases — download_enrichr_databases","text":"gene_set_lib character vector database names download Enrichr, example: c(\"WikiPathways_2019_Human\", \"NCI-Nature_2016\",) output_dir string specifying output directory `.tsv` file saved. Defaults current project directory defined `::()`. filename Name output file (file extension. Due commas present terms, .tsv recommended). left , file named all_databases_timestamp.tsv.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/download_enrichr_databases.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download the Enrichr databases — download_enrichr_databases","text":"`data.frame` gene set annotations three columns: DB Database name (e.g. `\"WikiPathways_2019_Human\"`,   `\"NCI-Nature_2016\"`). Geneset gene set pathway term database. Gene gene contained gene set. addition returning `data.frame`, function also writes table disk `.tsv` file specified `output_dir`.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/explore_data.html","id":null,"dir":"Reference","previous_headings":"","what":"explore_data() — explore_data","title":"explore_data() — explore_data","text":"function automatically generates exploratory data analysis (EDA) plots provided data. include density plots, boxplots, PCA plots, MDS plots, variance explained plots, violin plots, mean correlation time, first lag autocorrelation, lag1 differences, coefficient variation. function returns EDA plots list , default, creates HTML report containing plots, saving specified report directory.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/explore_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"explore_data() — explore_data","text":"","code":"explore_data(splineomics, report_dir = here::here(), report = TRUE)"},{"path":"https://csbg.github.io/SplineOmics/reference/explore_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"explore_data() — explore_data","text":"splineomics named list containing required inputs splineomics workflow. Must contain following elements: data [numeric matrix]     data matrix values. columns     samples (timepoint + replicate combo) rows features     (e.g. genes proteins). meta [dataframe]      dataframe containing metadata corresponding      data, must include 'Time' column columns specified      conditions. general, columns meta correspond      different types metadata, row corresponds column      data (contains metadata sample). annotation [dataframe]     dataframe maps rows data     annotation info, gene name database identifiers. report_info [named list]     named list describing experiment. Must include following fields:   - \"omics_data_type\"   - \"data_description\"   - \"data_collection_date\"   - \"analyst_name\"   - \"contact_info\"   - \"project_name\" May also include following optional fields:   - \"method_description\"   - \"results_summary\"   - \"conclusions\" condition [character]     Character vector length 1 specifying column     name meta used define groups analysis. meta_batch_column [character]     Character vector length 1 specifying column     name meta contains info batch effect. meta_batch2_column [character]     Character vector length 1 specifying column     name meta contains info second batch     effect. report_dir non-empty string specifying report directory. output HTML reports placed . Default current working dir, determined library: ::(). report Boolean TRUE FALSE value, specifying report generated .","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/explore_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"explore_data() — explore_data","text":"list ggplot objects representing various exploratory plots.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/extract_data.html","id":null,"dir":"Reference","previous_headings":"","what":"extract_data() — extract_data","title":"extract_data() — extract_data","text":"function extracts rectangular block dataframe using user-specified top/bottom row indices left/right column identifiers (numeric Excel-style letters). ensures block contains numeric values NAs, returns cleaned matrix.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/extract_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extract_data() — extract_data","text":"","code":"extract_data(   data,   bottom_row,   right_col,   top_row = 1,   left_col = 1,   feature_name_columns = NA,   use_row_index = FALSE )"},{"path":"https://csbg.github.io/SplineOmics/reference/extract_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extract_data() — extract_data","text":"data dataframe containing full input, including annotation columns numeric block extract. bottom_row Integer. Specifies last (bottom) row numeric data block. Must >= `top_row`. right_col format `left_col`. Specifies right-column numeric block. Must >= `left_col` conversion. top_row Integer. Specifies first (top) row numeric data block. Row indexing 1-based. left_col Column specifier left-column data block. Can either:   - integer index (e.g., 2 second column),   - character string using Excel-style letters (e.g., \"\", \"AB\"). Column names (e.g., \"age\") **** allowed . letters numeric indices accepted. feature_name_columns Optional character vector specifying columns `data` used row (feature) names output. `NA`, generic feature names used. use_row_index Logical. TRUE, prepend row index combined feature name ensure uniqueness. Defaults FALSE.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/extract_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"extract_data() — extract_data","text":"numeric matrix cleaned values appropriate column names.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/find_pvc.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Peaks and Valleys in Time-Series Omics Data — find_pvc","title":"Find Peaks and Valleys in Time-Series Omics Data — find_pvc","text":"Identifies significant local peaks valleys (excursions) time-series omics data using Union-Intersection Test (UIT)-based approach. function wraps detection plotting steps, returning visualizations features least one excursion.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/find_pvc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Peaks and Valleys in Time-Series Omics Data — find_pvc","text":"","code":"find_pvc(   splineomics,   alphas = 0.05,   padjust_method = \"BH\",   support = 1,   plot_info = list(y_axis_label = \"Value\", time_unit = \"min\", treatment_labels = NA,     treatment_timepoints = NA),   report_dir = here::here() )"},{"path":"https://csbg.github.io/SplineOmics/reference/find_pvc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Peaks and Valleys in Time-Series Omics Data — find_pvc","text":"splineomics list containing preprocessed time-series input data. Must include named elements `\"data\"` (numeric matrix), `\"meta\"` (metadata data frame `\"Time\"` column), `\"meta_batch_column\"` (name column `meta` identifying replicates batches), `\"padjust_method\"` (string specifying method p-value adjustment). alphas single numeric value named list numeric thresholds used identify significant excursion points. single value provided (either numeric scalar list length 1), threshold applied condition levels. named list provided, must contain one numeric value per condition level, names matching condition levels exactly. input normalized internally ensure consistent per-level access. padjust_method character string specifying method multiple testing correction. Defaults `\"BH\"` (Benjamini-Hochberg). support Minimum amount non-NA values timepoint influenced PVC-test result. example, timepoints 10, 15, 20, etc. support = 1, timepoint 15 given feature, timepoints 10, 15, 20 must least 1 non-NA value. one timepoints feature meet criterium, p-value timepoint 15 feature set NA. plot_info List containing elements y_axis_label (string), time_unit (string), treatment_labels (character vector), treatment_timepoints (integer vector). can also NA. list used add info spline plots. time_unit used label x-axis, treatment_labels -timepoints used create vertical dashed lines, indicating positions treatments (feeding, temperature shift, etc.). report_dir Character string specifying directory path HTML report output files saved.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/find_pvc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Peaks and Valleys in Time-Series Omics Data — find_pvc","text":"named list ggplot objects, element corresponds feature least one detected peak valley. plot shows expression profiles across timepoints, highlights excursion points red, annotates statistically significant excursions significance stars.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/find_pvc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find Peaks and Valleys in Time-Series Omics Data — find_pvc","text":"peak valley defined timepoint whose expression value significantly different immediate neighbors deviates direction - .e., either significantly higher (peak) significantly lower (valley). Statistically, tested using compound contrast limma: (T - T_prev) + (T - T_next) = 2T - T_prev - T_next compound contrast power timepoint `T` outlier compared neighbors direction. resulting p-value FDR-adjusted compared `alpha` threshold. - Performs internal input validation via `check_splineomics_elements()`   `InputControl`. - Detects local excursions using `pvc_test()` function. - Displays number total excursion hits found. - Generates plots using `plot_pvc()`, excursion point   evaluated significance based provided `alpha`.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/make_scatter_plot_html.html","id":null,"dir":"Reference","previous_headings":"","what":"make_scatter_plot_html() — make_scatter_plot_html","title":"make_scatter_plot_html() — make_scatter_plot_html","text":"function used make scatter plots raw data features. generates HTML report fashion functions SplineOmics package contains scatter plots.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/make_scatter_plot_html.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"make_scatter_plot_html() — make_scatter_plot_html","text":"","code":"make_scatter_plot_html(   data,   meta,   output_file = \"scatter_plots_base64.html\",   meta_replicate_column = NULL )"},{"path":"https://csbg.github.io/SplineOmics/reference/make_scatter_plot_html.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"make_scatter_plot_html() — make_scatter_plot_html","text":"data matrix features rows samples columns. Row names feature names. meta data frame meta information. Must contain numeric column \"Time\". output_file name HTML output file. meta_replicate_column Column name column meta contains info replicates, reactor.","code":""},{"path":[]},{"path":"https://csbg.github.io/SplineOmics/reference/make_scatter_plot_html.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"make_scatter_plot_html() — make_scatter_plot_html","text":"","code":"if (FALSE) { # \\dontrun{ # Example Data data <- matrix(rnorm(50), nrow = 5) meta <- data.frame(Time = seq(1, 10, length.out = 10))  # Generate HTML report (only if you want to test it) make_scatter_plot_html(data, meta, \"scatter_report.html\") } # }"},{"path":"https://csbg.github.io/SplineOmics/reference/make_scatter_plots_html.html","id":null,"dir":"Reference","previous_headings":"","what":"make_scatter_plot_html() — make_scatter_plots_html","title":"make_scatter_plot_html() — make_scatter_plots_html","text":"function used make scatter plots raw data features. generates HTML report fashion functions SplineOmics package contains scatter plots.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/make_scatter_plots_html.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"make_scatter_plot_html() — make_scatter_plots_html","text":"","code":"make_scatter_plots_html(   data,   meta,   output_file = \"scatter_report\",   meta_replicate_column = NULL,   features_per_file = 500 )"},{"path":"https://csbg.github.io/SplineOmics/reference/make_scatter_plots_html.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"make_scatter_plot_html() — make_scatter_plots_html","text":"data matrix features rows samples columns. Row names feature names. meta data frame meta information. Must contain numeric column \"Time\". output_file name HTML output file. meta_replicate_column Column name column meta contains info replicates, reactor. features_per_file Integer specifying many features (example proteins) plotted per file. Per default 500.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/open_tutorial.html","id":null,"dir":"Reference","previous_headings":"","what":"open_tutorial() — open_tutorial","title":"open_tutorial() — open_tutorial","text":"function opens `tutorial.Rmd` file RStudio interactive use. Users can run code chunk step step.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/open_tutorial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"open_tutorial() — open_tutorial","text":"","code":"open_tutorial()"},{"path":"https://csbg.github.io/SplineOmics/reference/open_tutorial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"open_tutorial() — open_tutorial","text":"successful, opens `tutorial.Rmd` file RStudio user interact . `rstudioapi` installed available, tutorial file found, error thrown corresponding message.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/preprocess_rna_seq_data.html","id":null,"dir":"Reference","previous_headings":"","what":"preprocess_rna_seq_data() — preprocess_rna_seq_data","title":"preprocess_rna_seq_data() — preprocess_rna_seq_data","text":"`preprocess_rna_seq_data()` function performs essential preprocessing steps raw RNA-seq counts. includes creating `DGEList` object, normalizing counts using default TMM (Trimmed Mean M-values) normalization via `edgeR::calcNormFactors` function, applying `voom` transformation `limma` package obtain log-transformed counts per million (logCPM) associated precision weights. require different normalization method, can supply custom normalization function.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/preprocess_rna_seq_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"preprocess_rna_seq_data() — preprocess_rna_seq_data","text":"","code":"preprocess_rna_seq_data(splineomics, normalize_func = NULL)"},{"path":"https://csbg.github.io/SplineOmics/reference/preprocess_rna_seq_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"preprocess_rna_seq_data() — preprocess_rna_seq_data","text":"splineomics S3 object class `SplineOmics` must contain following elements: data: matrix omics dataset, feature names   optionally row headers (genes rows, samples columns). meta: dataframe containing metadata corresponding   data. dataframe must include 'Time' column column   specified condition. design: character string representing design formula   limma analysis (e.g., '~ 1 + Phase*X + Reactor'). spline_params: list spline parameters used   analysis. can include: spline_type: character string specifying type       spline. Must either 'n' natural cubic splines       'b' B-splines. dof: integer specifying degrees freedom.       Required natural cubic splines B-splines. degree: integer specifying degree spline       (B-splines ). knots: Positions internal knots (B-splines). bknots: Boundary knots (B-splines). use_array_weights: Boolean flag indicating robust fit    strategy deal heteroscedasticity used . set    NULL, handeled implicitly based result Levene    test. test significant least 10    robust strategy used. robust strategy uses function    voomWithQualityWeights RNA-seq data instead normal voom    function. , non-count-based data, function    limma::arrayWeights used instead, combined setting robust    argument TRUE limma::eBayes function. summary, strategy    employed functions downweights samples higher    variance. can neccessary, linear models    assumption homoscedasticity, means variance    (approx.) across datapoints linear model fitted.     violated, resulting p-values trusted    (common statistical wisdom). bp_cfg: named numeric vector specifying parallelization   configuration, expected names `\"n_cores\"` `\"blas_threads\"`. controls many **R worker processes** (`n_cores`) many   **BLAS/OpenBLAS threads per process** (`blas_threads`) used   parallel computation. `bp_cfg` `NULL`, missing, required fields   `NA`, `n_cores` `blas_threads` default `1`. effectively   disables parallelization avoids oversubscription CPU threads. normalize_func optional normalization function. provided, function used normalize `DGEList` object. provided, TMM normalization (via `edgeR::calcNormFactors`) used default. Must take input y : y <- edgeR::DGEList(counts = raw_counts) output y normalized counts.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/preprocess_rna_seq_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"preprocess_rna_seq_data() — preprocess_rna_seq_data","text":"updaed `splineomics` object, now containing `voom` object, includes log2-counts per million (logCPM) matrix observation-specific weights. Additionally, splineparams updated identified optimal dof based LOOCV, dof = 0L (auto-dof)","code":""},{"path":[]},{"path":"https://csbg.github.io/SplineOmics/reference/print.SplineOmics.html","id":null,"dir":"Reference","previous_headings":"","what":"Print function for SplineOmics objects — print.SplineOmics","title":"Print function for SplineOmics objects — print.SplineOmics","text":"function provides summary print SplineOmics object, showing relevant information number features, samples, metadata, RNA-seq data, annotation, spline parameters.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/print.SplineOmics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print function for SplineOmics objects — print.SplineOmics","text":"","code":"# S3 method for class 'SplineOmics' print(x, ...)"},{"path":"https://csbg.github.io/SplineOmics/reference/print.SplineOmics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print function for SplineOmics objects — print.SplineOmics","text":"x SplineOmics object created `create_splineomics` function. ... Additional arguments passed methods.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/print.SplineOmics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print function for SplineOmics objects — print.SplineOmics","text":"function return value. prints summary SplineOmics object.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/print.SplineOmics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print function for SplineOmics objects — print.SplineOmics","text":"function automatically called SplineOmics object printed. provides concise overview object's contents attributes, including dimensions data, available metadata, relevant information annotations spline parameters.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/run_gsea.html","id":null,"dir":"Reference","previous_headings":"","what":"run_gsea() — run_gsea","title":"run_gsea() — run_gsea","text":"function generates Gene Set Enrichment Analysis (GSEA) report based clustered hit levels, gene data, specified databases. accomplishes using R package clusterProfiler. output, receive list plot objects generated, HTML report embedded files containing enrichment results, dotplots visualizing enrichment.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/run_gsea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"run_gsea() — run_gsea","text":"","code":"run_gsea(   levels_clustered_hits,   databases,   report_info,   clusterProfiler_params = NA,   plot_titles = NA,   universe = NULL,   report_dir = here::here() )"},{"path":"https://csbg.github.io/SplineOmics/reference/run_gsea.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"run_gsea() — run_gsea","text":"levels_clustered_hits list dataframes contain clustered hits different levels. clustering_results variable collects output SplineOmics::cluster_hits() function, easy way get clustering_results$clustered_hits_levels. Every element list dataframe, three columns feature, cluster, gene. feature contains index number feature (example protein ), cluster integer specifying cluster feature placed, gene contains gene name. essential gene name matches gene names used databases used enrichment . databases dataframe three columns: DB containing database name, Geneset containng name geneset, Gene, containing name gene. dataframe can obtained specifying desired Enrichr databases downloading example .tsv file help SplineOmics::download_enrichr_databases function, loading .tsv file dataframe. essence, dataframe contains database info used gene set enrichment analysis clusterProfiler function. report_info list containing information report generation, omics_data_type data_description (list used report generating functions package). clusterProfiler_params list specifies parameters clusterProfiler, example: clusterProfiler_params <- list(   pvalueCutoff = 0.05,   pAdjustMethod = \"BH\",   minGSSize = 10,   maxGSSize = 500,   qvalueCutoff = 0.2 ) (parameters can controlled ). names equivalent argument names clusterProfiler, therefore, check documentation clusterProfiler description. argument specified, per default NULL, case default parameters selected, equivalent parameter values shown example definition . plot_titles Titles enrichment dotplots generated HTML report, default NA. universe Enrichment background data, default NULL. parameter clusterProfiler, documentation, please check documentation clusterProfiler R package. report_dir Directory report saved, default `::()`.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/run_gsea.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"run_gsea() — run_gsea","text":"list plot objects, generated GSEA report.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/run_limma_splines.html","id":null,"dir":"Reference","previous_headings":"","what":"run_limma_splines() — run_limma_splines","title":"run_limma_splines() — run_limma_splines","text":"core function, performs limma spline analysis identify  significant time-dependent changes features (e.g., proteins) within omics time-series dataset. evaluates features within condition level levels comparing average differences interactions time condition.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/run_limma_splines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"run_limma_splines() — run_limma_splines","text":"","code":"run_limma_splines(splineomics)"},{"path":"https://csbg.github.io/SplineOmics/reference/run_limma_splines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"run_limma_splines() — run_limma_splines","text":"splineomics S3 object class `SplineOmics` contains following elements: data: matrix omics dataset, feature   names optionally row headers. rna_seq_data: optional object containing preprocessed   RNA-seq data, output `limma::voom` similar    preprocessing pipeline. must provided input    RNA-seq data. meta: dataframe containing metadata corresponding   data, must include 'Time' column column specified   condition. columns meta describe meta info,   time condition, row corresponds column data,   therefore, contains meta info data column. important   meta data matched way. padjust_method: Statistical method used multiple   hypothesis correction. Supported methods include included   p.adjust() function R: \"holm\", \"hochberg\", \"hommel\", \"bonferroni\",   \"BH\" \"fdr\", \"\", \"none\" correction. Default package   \"BH\". design: character string representing limma design   formula, \"~ 1 + Phase*Time + Reactor\" integrated design,   \"~ 1 + Time + Reactor\" isolated design. dream_params: named list NULL. NULL, can                                contain following named      elements:      - `dof`: integer greater 1, specifying degrees freedom       dream topTable. set 0, best dof automatically      found help leave-one--crossvalidation (loocv). dof      lowest error loocv chosen.      - `KenwardRoger`: boolean indicating whether use Kenward-Roger      approximation mixed models.      Note random effects now directly specified design      formula `dream_params`. mode: Specifies design formula constructed:   either `\"isolated\"` `\"integrated\"`. - `\"isolated\"`: level analyzed independently, using     subset data corresponding level. design formula     include condition variable, since one condition     present subset. - `\"integrated\"`: levels analyzed together single model,     using full dataset. design formula includes condition     variable (optionally interaction terms ) results     estimated jointly across levels. condition: character string specifying column name   meta used define groups analysis. condition column   contains levels experiment (control treatment). spline_params: list spline parameters used   analysis, including: spline_type: type spline (e.g., \"n\" natural       splines \"b\" B-splines). dof: Degrees freedom spline. knots: Positions internal knots (B-splines). bknots: Boundary knots (B-splines). degree: Degree spline (B-splines ). use_array_weights: Boolean flag indicating robust fit    strategy deal heteroscedasticity used . set    NULL, handeled implicitly based result Levene    test. test significant least 10    robust strategy used. robust strategy uses function    voomWithQualityWeights RNA-seq data instead normal voom    function. , non-count-based data, function    limma::arrayWeights used instead, combined setting robust    argument TRUE limma::eBayes function. summary, strategy    employed functions downweights samples higher    variance. can neccessary, linear models    assumption homoscedasticity, means variance    (approx.) across datapoints linear model fitted.     violated, resulting p-values trusted    (common statistical wisdom). bp_cfg: named numeric vector specifying parallelization   configuration, expected names `\"n_cores\"` `\"blas_threads\"`. controls many **R worker processes** (`n_cores`) many   **BLAS/OpenBLAS threads per process** (`blas_threads`) used   parallel computation. `bp_cfg` `NULL`, missing, required fields   `NA`, `n_cores` `blas_threads` default `1`. effectively   disables parallelization avoids oversubscription CPU threads.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/run_limma_splines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"run_limma_splines() — run_limma_splines","text":"SplineOmics object, updated list three elements:         - `time_effect`: list top tables level time                          effect.         - `avrg_diff_conditions`: list top tables comparison                                  levels. comparison                                  average difference values.         - `interaction_condition_time`: list top tables                                         comparison levels.                                         comparison interaction                                         condition time.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/run_ora.html","id":null,"dir":"Reference","previous_headings":"","what":"run_ora() — run_ora","title":"run_ora() — run_ora","text":"function generates overrepresentation analysis report based clustered hit levels, gene data, specified databases. accomplishes using R package clusterProfiler. output, receive list plot objects generated, HTML report embedded files containing enrichment results, dotplots visualizing enrichment.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/run_ora.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"run_ora() — run_ora","text":"","code":"run_ora(   cluster_table,   databases,   report_info,   cluster_hits_report_name,   clusterProfiler_params = NA,   mapping_cfg = list(method = \"none\", from_species = NULL, to_species = NULL),   enrichGO_cfg = NULL,   universe = NULL,   report_dir = here::here() )"},{"path":"https://csbg.github.io/SplineOmics/reference/run_ora.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"run_ora() — run_ora","text":"cluster_table tibble containing one row per feature_nr metadata cluster assignments across analysis categories. includes: feature_nr – Numeric feature identifier. feature_name – Preferred feature name source     data, falling back numeric ID none available. gene – Preferred gene symbol annotation     cluster data. cluster_<cond1> / cluster_<cond2> – Cluster     assignments time-effect condition. cluster_cat2 – (Optional) Combined cluster label     category 2 hits form     \"<cluster_<cond1>>_<cluster_<cond2>>\"; NA     feature category 2 hit. cluster_cat3 – (Optional) Combined cluster label     category 3 hits form     \"<cluster_<cond1>>_<cluster_<cond2>>\"; NA     feature category 3 hit. category-specific cluster column, value NA indicates feature significant (hit) category. databases `data.frame` defines gene set collections   tested overrepresentation analysis. Must contain exactly three   columns: DB Character. database identifier (e.g., `\"KEGG\"`, `\"GO_BP\"`,       `\"Reactome\"`). Geneset Character. name gene set pathway within       database. Gene Character. gene identifier belonging gene set       (e.g., gene symbol, Ensembl ID). row corresponds one `(database, geneset, gene)` association.   gene may appear multiple gene sets. report_info list containing information report generation, omics_data_type data_description (list used report generating functions package). cluster_hits_report_name Single character string specifying name cluster_hits() function report, contains results used overprepresentation analysis . Must specified, otherwise, connection documented. clusterProfiler_params named list arguments passed directly corresponding functions clusterProfiler package. Typical entries include pvalueCutoff, pAdjustMethod, minGSSize, maxGSSize, qvalueCutoff. names must match argument names clusterProfiler; see clusterProfiler documentation details. NULL (default), standard clusterProfiler defaults used. mapping_cfg named list controls optional behavior automatically mapping gene symbols across species. useful input gene symbols (e.g., CHO cells) match species used enrichment databases (e.g., human mouse). default, mapping performed gene symbols used -. mapping desired, list must contain following three elements: method Mapping method use. One none (default;   mapping), gprofiler (online, via g:Profiler API),   orthogene (offline, installed). from_species Source species code,   e.g. cgriseus CHO. Must match expected format   selected tool. to_species Target species code,   e.g. hsapiens human. must species used   ORA database must also match expected format   selected tool. enrichGO_cfg named list specifying configuration running GO enrichment Bioconductor's enrichGO. needed want perform GO Biological Process (BP), Molecular Function (MF), Cellular Component (CC) enrichment using Bioconductor's organism databases (e.g., org.Mm.eg.db mouse). list must named according GO ontology, e.g., \"GO_BP\", \"GO_MF\", \"GO_CC\". entry must provide: OrgDb: organism database, e.g., org.Mm.eg.db. keyType: gene identifier type, e.g., \"SYMBOL\". ontology: One \"BP\", \"MF\", \"CC\". enrichGO_cfg NULL (default), Bioconductor-based GO enrichment performed. enrichment runs enricher provided TERM2GENE mappings. universe Enrichment background data. parameter clusterProfiler, documentation, please check documentation clusterProfiler R package. report_dir Directory report saved.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/run_ora.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"run_ora() — run_ora","text":"nested, named list whose top-level elements correspond limma result categories. exact set elements depends mode: mode == \"isolated\" Two elements returned, one per condition level:     time_effect_condition_<level1>     time_effect_condition_<level2>. mode == \"integrated\" two time–effect elements , plus (significant     hits chosen thresholds) two additional elements:     avrg_diff_conditions interaction_condition_time. top‑level result category element list fields: dotplot ggplot object: dot plot     -representation results (clusterProfiler) category. dotplot_nrows Numeric scalar giving suggested plot height     (rows / relative units) prints nicely number     enriched terms shown. ora_results nested list raw enrichment results,     structured : cluster \\(\\rightarrow\\) database cluster category, sublist one entry         per database used enrichment. value entry         either         NA (terms enriched cluster–database)         data.frame returned         clusterProfiler::enricher() enriched terms. summary, full shape :","code":"list(   time_effect_condition_<level1> = list(     dotplot        = ggplot,     dotplot_nrows  = numeric(1),     ora_results    = list(       <cluster_1> = list(<database_1> = NA|data.frame, ...),       <cluster_2> = list(<database_1> = NA|data.frame, ...),       ...     )   ),   time_effect_condition_<level2> = list(...),   avrg_diff_conditions          = list(...), # only if hits (integrated mode)   interaction_condition_time    = list(...)  # only if hits (integrated mode) )"},{"path":[]},{"path":"https://csbg.github.io/SplineOmics/reference/screen_limma_hyperparams.html","id":null,"dir":"Reference","previous_headings":"","what":"screen_limma_hyperparams() — screen_limma_hyperparams","title":"screen_limma_hyperparams() — screen_limma_hyperparams","text":"function screens various combinations hyperparameters limma analysis, including designs, modes, degrees freedom. validates inputs, generates results combinations, plots outcomes. Finally, may also involved generating HTML report part larger analysis workflow.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/screen_limma_hyperparams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"screen_limma_hyperparams() — screen_limma_hyperparams","text":"","code":"screen_limma_hyperparams(   splineomics,   datas,   datas_descr,   metas,   designs,   modes,   spline_test_configs,   report_dir = here::here(),   adj_pthresholds = c(0.05),   rna_seq_datas = NULL,   time_unit = \"min\",   padjust_method = \"BH\" )"},{"path":"https://csbg.github.io/SplineOmics/reference/screen_limma_hyperparams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"screen_limma_hyperparams() — screen_limma_hyperparams","text":"splineomics S3 object class `SplineOmics` contains necessary data parameters analysis, including: condition: string specifying column name meta                           dataframe, contains levels separate                           experiment ('treatment' can condition,                           'drug' 'drug' can levels                           condition). report_info: meta_batch_column: character string specifying meta                                   batch column. meta_batch2_column: character string specifying second                                    meta batch column (limma function                                    removeBatchEffect supports maximum                                    two batch columns.) datas list matrices containing datasets analyzed. datas_descr description object data. metas list data frames containing metadata dataset `datas`. designs character vector design formulas limma analysis. modes character vector must length 'designs'. design formula, must specify either 'isolated' 'integrated'. Isolated means limma determines results level using data level. Integrated means limma determines results levels using full dataset (levels). spline_test_configs configuration object spline tests. report_dir non-empty string specifying report directory. adj_pthresholds numeric vector p-value thresholds significance determination. rna_seq_datas list RNA-seq data objects, voom object derived limma::voom function. time_unit character string specifying time unit label plots. padjust_method character string specifying method p-value adjustment.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/screen_limma_hyperparams.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"screen_limma_hyperparams() — screen_limma_hyperparams","text":"Returns list plots generated limma analysis results.         element list corresponds different combination         hyperparameters.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/update_splineomics.html","id":null,"dir":"Reference","previous_headings":"","what":"update_splineomics() — update_splineomics","title":"update_splineomics() — update_splineomics","text":"Updates SplineOmics object modifying existing fields adding new ones.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/update_splineomics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"update_splineomics() — update_splineomics","text":"","code":"update_splineomics(splineomics, ...)"},{"path":"https://csbg.github.io/SplineOmics/reference/update_splineomics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"update_splineomics() — update_splineomics","text":"splineomics SplineOmics object updated. ... Named arguments new values fields updated added.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/update_splineomics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"update_splineomics() — update_splineomics","text":"updated SplineOmics object.","code":""}]
