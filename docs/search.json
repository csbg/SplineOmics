[{"path":"https://csbg.github.io/SplineOmics/CHANGELOG.html","id":null,"dir":"","previous_headings":"","what":"Changelog","title":"Changelog","text":"notable changes project documented file. format based Keep Changelog, project adheres Semantic Versioning.","code":""},{"path":"https://csbg.github.io/SplineOmics/CHANGELOG.html","id":"template-for-changelog-entries","dir":"","previous_headings":"","what":"Template for Changelog Entries","title":"Changelog","text":"release section follow structure :","code":""},{"path":[]},{"path":"https://csbg.github.io/SplineOmics/CHANGELOG.html","id":"added","dir":"","previous_headings":"Template for Changelog Entries > [Version] - YYYY-MM-DD","what":"Added","title":"Changelog","text":"New features functionality introduced release.","code":""},{"path":"https://csbg.github.io/SplineOmics/CHANGELOG.html","id":"changed","dir":"","previous_headings":"Template for Changelog Entries > [Version] - YYYY-MM-DD","what":"Changed","title":"Changelog","text":"Updates modifications existing features.","code":""},{"path":"https://csbg.github.io/SplineOmics/CHANGELOG.html","id":"fixed","dir":"","previous_headings":"Template for Changelog Entries > [Version] - YYYY-MM-DD","what":"Fixed","title":"Changelog","text":"Bugs resolved.","code":""},{"path":"https://csbg.github.io/SplineOmics/CHANGELOG.html","id":"deprecated","dir":"","previous_headings":"Template for Changelog Entries > [Version] - YYYY-MM-DD","what":"Deprecated","title":"Changelog","text":"Features still functional slated removal future.","code":""},{"path":"https://csbg.github.io/SplineOmics/CHANGELOG.html","id":"removed","dir":"","previous_headings":"Template for Changelog Entries > [Version] - YYYY-MM-DD","what":"Removed","title":"Changelog","text":"Features functionality removed.","code":""},{"path":"https://csbg.github.io/SplineOmics/CHANGELOG.html","id":"security","dir":"","previous_headings":"Template for Changelog Entries > [Version] - YYYY-MM-DD","what":"Security","title":"Changelog","text":"security-related updates patches. Examples: - Added: Introduced new plotting function plotTimeSeries(). - Fixed: Resolved issue causing crashes input data missing values. - Changed: Modified default parameters normalizeData().","code":""},{"path":[]},{"path":"https://csbg.github.io/SplineOmics/CHANGELOG.html","id":"added-1","dir":"","previous_headings":"Template for Changelog Entries > [0.1.2] - 2025-02-11","what":"Added","title":"Changelog","text":"Level name title overall spline plots.","code":""},{"path":"https://csbg.github.io/SplineOmics/CHANGELOG.html","id":"fixed-1","dir":"","previous_headings":"Template for Changelog Entries > [0.1.2] - 2025-02-11","what":"Fixed","title":"Changelog","text":"Small bug made impossible treatment label condition. Small bug allow specify two treatment labels. mode == isolated RNA-seq data. , caused error, splits meta different conditions, data. Now, informs user , user split data outside (just RNA-seq data).","code":""},{"path":"https://csbg.github.io/SplineOmics/CHANGELOG.html","id":"removed-1","dir":"","previous_headings":"Template for Changelog Entries > [0.1.2] - 2025-02-11","what":"Removed","title":"Changelog","text":"open_template() function. function opened template analysis. removed , otherwise, whenever change code, update get-started vignette (tutorial) , twice maintainance effort.","code":""},{"path":[]},{"path":"https://csbg.github.io/SplineOmics/CHANGELOG.html","id":"changed-1","dir":"","previous_headings":"Template for Changelog Entries","what":"Changed","title":"Changelog","text":"design formula must now contain string ‘Time’ rather ‘X’ like . X stood time. change intended make design formula explicit self explanatory. Random effects can now directly specified design formula, rather passed part dream_params.","code":""},{"path":"https://csbg.github.io/SplineOmics/CHANGELOG.html","id":"added-2","dir":"","previous_headings":"Template for Changelog Entries","what":"Added","title":"Changelog","text":"Added linear mixed models modeling random effects. variancePartition package used –> voomWithDreamWeights RNA-seq data processing, dream replacement limma. example, Reactor random effect, can write design formula like : design <- “~ 1 + Condition*Time + Plate + (1|Reactor)” SplineOmics automatically run variancePartition functions voomWithDreamWeights() dream() instead limma::voom lmfit. dream() additional parameters, method degree freedom (different degree freedom used splines package) can pass dream_params argument. See RNA-seq analysis vignette respective function references info. Raw data plotting function –> make_scatter_plot_html() –> see references. Imputed values marked triangle symbols cluster_hits() spline plots raw data passed. Package version written HTML report (tag) session info added embedded text file. Standard error written top “double spline” plots (limma result category 2 3). Used analysis script embedded text file reports. mode (integrated isolated) written top reports separate field. Now 4 significance stars. Treatment lines double spline plots (limma result category 2 3).","code":""},{"path":"https://csbg.github.io/SplineOmics/CHANGELOG.html","id":"fixed-2","dir":"","previous_headings":"Template for Changelog Entries > Added","what":"Fixed","title":"Changelog","text":"smaller visual things HTML reports.","code":""},{"path":[]},{"path":"https://csbg.github.io/SplineOmics/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://csbg.github.io/SplineOmics/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://csbg.github.io/SplineOmics/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://csbg.github.io/SplineOmics/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://csbg.github.io/SplineOmics/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement thomas.rauter@plus.ac.. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://csbg.github.io/SplineOmics/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://csbg.github.io/SplineOmics/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://csbg.github.io/SplineOmics/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://csbg.github.io/SplineOmics/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://csbg.github.io/SplineOmics/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://csbg.github.io/SplineOmics/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"changelog","dir":"Articles","previous_headings":"","what":"Changelog","title":"Changelog","text":"notable changes project documented file. format based Keep Changelog, project adheres Semantic Versioning.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"template-for-changelog-entries","dir":"Articles","previous_headings":"Changelog","what":"Template for Changelog Entries","title":"Changelog","text":"release section follow structure :","code":""},{"path":[]},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"added","dir":"Articles","previous_headings":"Changelog > Template for Changelog Entries > [Version] - YYYY-MM-DD","what":"Added","title":"Changelog","text":"New features functionality introduced release.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"changed","dir":"Articles","previous_headings":"Changelog > Template for Changelog Entries > [Version] - YYYY-MM-DD","what":"Changed","title":"Changelog","text":"Updates modifications existing features.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"fixed","dir":"Articles","previous_headings":"Changelog > Template for Changelog Entries > [Version] - YYYY-MM-DD","what":"Fixed","title":"Changelog","text":"Bugs resolved.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"deprecated","dir":"Articles","previous_headings":"Changelog > Template for Changelog Entries > [Version] - YYYY-MM-DD","what":"Deprecated","title":"Changelog","text":"Features still functional slated removal future.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"removed","dir":"Articles","previous_headings":"Changelog > Template for Changelog Entries > [Version] - YYYY-MM-DD","what":"Removed","title":"Changelog","text":"Features functionality removed.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"security","dir":"Articles","previous_headings":"Changelog > Template for Changelog Entries > [Version] - YYYY-MM-DD","what":"Security","title":"Changelog","text":"security-related updates patches.","code":""},{"path":[]},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"changed-1","dir":"Articles","previous_headings":"Changelog > Template for Changelog Entries > [v0.3.4]","what":"Changed","title":"Changelog","text":"Renamed function download_bioconductor_database() extract_gene_sets(). Stylistic changes cluster_hits HTML report, font sizes plots.","code":""},{"path":[]},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"fixed-1","dir":"Articles","previous_headings":"Changelog > Template for Changelog Entries > [v0.3.3]","what":"Fixed","title":"Changelog","text":"Bugs occuring functions extract_data(), explore_data(), cluster_hits()","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"removed-1","dir":"Articles","previous_headings":"Changelog > Template for Changelog Entries > [v0.3.3]","what":"Removed","title":"Changelog","text":"Removed report argument cluster_hits() run_ora() function. Instead, now, report_dir argument per default NULL, means HTML report generated. directory path provided report_dir argument, HTML report generated.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"added-1","dir":"Articles","previous_headings":"Changelog > Template for Changelog Entries > [v0.3.3]","what":"Added","title":"Changelog","text":"signed r² quality score cluster members now also written downloadable topTables inside cluster_hits() HTML report.","code":""},{"path":[]},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"fixed-2","dir":"Articles","previous_headings":"Changelog > Template for Changelog Entries > [v0.3.2]","what":"Fixed","title":"Changelog","text":"cluster_hits() function now modify gene symbols anymore. , attempted clean removing characters valid making uppercase. implicit behavior (even though user informed) removed favor user now explicitly cleaning responsible .","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"changed-2","dir":"Articles","previous_headings":"Changelog > Template for Changelog Entries > [v0.3.2]","what":"Changed","title":"Changelog","text":"Changed cluster quality metric Silhouette score signed r^2 (variance explained). Silhouette score focuses determining well cluster member fits cluster compared clusters, quantify well cluster centroid represents member (desired). Identifying best amount clusters case user specified range clusters now done Bayesian Information Criterion. order use Silhouette score, new dependency needed, one aim minimize dependencies.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"removed-2","dir":"Articles","previous_headings":"Changelog > Template for Changelog Entries > [v0.3.2]","what":"Removed","title":"Changelog","text":"Removed double spline clustering cat3 now forms clusters combining cluster assignments time effect clusters. done simplify task, one now needs focus nicely clustering time effect hits. Gene check inside run_ora(). Now, user responsible providing appropriate symbols. report argument cluster_hits() run_ora() functions. Boolean argument specifying report generated. Now, removed, functions generate report directory path write provided. Now also default directory path NULL, instead project dir. means per default, HMTL report generated.","code":""},{"path":[]},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"added-2","dir":"Articles","previous_headings":"Changelog > Template for Changelog Entries > [v0.3.1]","what":"Added","title":"Changelog","text":"Effect size computations thresholding splines. enough statistical power, also tiny differences can significant, can make sense determine hits just filtering adj.p-value threshold, also effect size threshold. Therefore, cluster_hits() function now computes spline effect sizes via cumulative travel accepts threshold argument used cutoffs. category 2 average difference conditions, effect size already topTable limma. Double spline clustering hits category 3. clusters assigned hits serve following clustered enrichment. control , new argument cluster_hits() function, nr_clusters_interaction, defined. Cluster quality metric (Silhouette score). Now, HTML reports cluster_hits() function, every hit, Silhouette score reported. Additionally, beginning time effect results sections, histograms show distribution Silhouette scores clusters. functions preprocess_rna_seq_data, run_limma_splines, cluster_hits now report amount time took run.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"fixed-3","dir":"Articles","previous_headings":"Changelog > Template for Changelog Entries > [v0.3.1]","what":"Fixed","title":"Changelog","text":"documentation outdated vague. Improved . smaller things fixed, remnants screen_limma_hyperparams() function code places, input control functions still expected older argument names.","code":""},{"path":[]},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"changed-3","dir":"Articles","previous_headings":"Changelog > Template for Changelog Entries > [0.3.0]","what":"Changed","title":"Changelog","text":"cluster_hits() returns. Now returns plots large table, summarizing clustering results, including results limma result categories 2 3. run_ora() now takes cluster_hits() summary table return input, performs enrichment analysis three limma result categories. info run_ora() reports: HTML reports generated run_ora() function contained little information inputs results ora report connected. adress , ora report now contains downloadable files foreground background genes, reports clusterProfiler parameters used, run_ora() function new argument allows pass string name corresponding cluster_hits() HTML report, contains results basis respective run_ora() report. Separated isolated integrated mode computations: , part code generated limma time_effect category results. used isolated integrated mode, share results. However, meant analysis integrated mode run often necessary, run condition time_effect results, get average diff condition interaction results. unnecessary, since integrated results can derived single global model (help contrasts). Therefore, now completely separated compuations isolated integrated approach, integrated approach, just one global model run three limma result categories extracted help contrasts. Made cluster_hits() usable many hits: Introduced new function argument, called max_hit_number. controls plotting logic report generation, limits amount plots amount detail shown plots maximum number hits per cluster. allows also generate clustering reports analyses many hits, nowbody anyways looks thousands spline plots. Switched hierarchical clustering kmeans. done kmeans much faster (efficient terms computations). Also, now number clusters always specified range (min:max, e.g. 2:4) cluster numbers tried best one identified help silhuette score. Also want just one definite amount clusters, still specify range due technical reasons. Additionally, datasets large, uses minibatch version kmeans, lot faster (sacrificing bit cluster quality).","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"added-3","dir":"Articles","previous_headings":"Changelog > Template for Changelog Entries > [0.3.0]","what":"Added","title":"Changelog","text":"Auto-dof loocv: Introduced new capability, automatically finds best spline dof based error loocv. every linear model fit, performs analytical loocv looks error sum features. every dof 2 min(timepoints, 10). Autodof activated dof = 0L selected. Added cross-species gene mapping: Added optional support automatic gene symbol conversion species via gprofiler2 orthogene. Controlled new mapping_cfg argument run_ora(), enables mapping from_species to_species using either method. conversion applies across cluster hit tables, preserves order, retains unmapped genes. suffix stripping done, users warned trailing _digits detected. qvalue package now optionally required enable stricter FDR filtering enrichment results. Cross-platform memory-safe parallelization support dream() via new helper function bp_setup(). function sets BiocParallel backend using either MulticoreParam (Unix) SnowParam (Windows), based user-supplied configuration (bp_cfg). BLAS threads per worker throttled using RhpcBLASctl avoid oversubscription. Cleanup bpstop() conditionally applied SnowParam backends. Includes validation bp_cfg input. Enables efficient multi-core execution dream() eBayes() preventing system resource exhaustion. download_bioconductor_database() function. one allows conveniently download database specific organism BioConductor (see function documentation). Introduced clusterProfiler::enrichGO() along clusterProfiler::simplify SplineOmics::run_ora(). allows run enrichment BioConductor GO databases enrichGO function, followed simplify function, collapse hierarchical terms. behavior controlled new argument run_ora(), namely enrichGO_cfg (see documentation). Better documentation limma cluster_hits HTML reports heteroscedasticity arguments result Levene test.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"fixed-4","dir":"Articles","previous_headings":"Changelog > Template for Changelog Entries > [0.3.0]","what":"Fixed","title":"Changelog","text":"Red spline curves: , just generated help spline coefficients, intercept. full linear model used limma. Now, generates spline also help variables used linear model. predicted splines now generated beginning cluster_hits() function, used clustering plotting. Wrong coefficients passes topTable() function. limma result category average difference conditions, necessary coefficients passed. , just checked difference conditions reference time point (first timepoint). Now passes necessary coefficients, performs joint F-test get average difference conditions across whole timecourse. use_array_weights argument internally always set FALSE set TRUE user. setting TRUE seemingly effect. now fixed.","code":""},{"path":[]},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"fixed-5","dir":"Articles","previous_headings":"Changelog > Template for Changelog Entries > [0.2.0] - 2025-05-08","what":"Fixed","title":"Changelog","text":"Bug prevented generation double spline plots condition column meta factor instead string. now solved (internally code converts string), condition column factor now cause problems anymore (factor perfectly valid). Bug occured internal clean_gene_symbols() function one gene names NA. Now, cause problem anymore instead gene name respective spline plot write NA. error message clusters specified hits condition cryptic. Now, gives message easy understand. bug input control threw error indicating rows dataset contains just zeros, even though true. running cluster_hits() report = FALSE, many hits, anyways warned user report generation take long. fixed, report = FALSE, report generated, means user warned (just confuse user).","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"changed-4","dir":"Articles","previous_headings":"Changelog > Template for Changelog Entries > [0.2.0] - 2025-05-08","what":"Changed","title":"Changelog","text":"Replicates double spline plots (limma result category 2 3) now shown shapes instead numbers besides data points. now possible imputed values anymore shown shapes plots, like single spline plots (limma result category 1), colors (red = imputed values condition 1, dodgerblue = imputed values condition 2). images HTML reports now considerably smaller, zoomable, option drag within zoomed image. single left-click mouse starts zoom process. , can zoom mouse wheel. reach max zoom, can move image zooming mouse wheel placing mouse one corners. , one can zoom holding left-click pressed dragging (can also let go). SplineOmics can now handle datasets NA values. limma can , since SplineOmics based limma, can principle . issue just checks place prevented NA values entering pipeline, also steps code caused problems, raised warnings, stopped execution facing NA values. Changed extract_data() function can handle missing values correctly, now fully explicit internal magic. less two hits levels cluster_hits() function, function provided message informed threw error. fine just running function generate one result. However, using function outside loop generate multiple results, behavior suboptimal, must captured tryCatch clause. Now, less two hits levels, simply returns NULL, cleaner behavior break loops one result generated. extract_data() function, now work implicit logic, instead explicit logic. , tried automatically find numeric matrix field. Now, requires specific top- bottom row, left right column. marks field matrix . rest logic (logic row name columns) still . make_scatter_plot_html() (now renamed make_scatter_plots_html()). renamed run_gsea() run_ora(), function uses clusterProfiler, performs ora (overrepresentation analysis) gsea (gene set enrichment analysis) stricter sense.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"added-4","dir":"Articles","previous_headings":"Changelog > Template for Changelog Entries","what":"Added","title":"Changelog","text":"find_pvc() function. function performs compount contrast every timepoint triple data (adjacent timepoints) find peaks, valley, cliffs form local temporal patterns. generates HTML report containing findings files also containing plots. New vignette showcasing find_pvc() function. Implicit (default) explicit heteroscedasticity handling linear model input. Controlled robust_fit Boolean flag indicating whether robust modeling strategy used account heteroscedasticity. omitted (.e., robust_fit = NULL), decision made implicitly based result Breusch–Pagan test, applied independently feature. test fits linear model form expression ~ time checks whether residual variance systematically depends fitted values. significant violation homoscedasticity detected sufficient fraction features (default: 10%), robust strategy applied. RNA-seq data, means using voomWithQualityWeights() instead standard voom() function. , non-count-based data, limma::arrayWeights() used model fitting, combined robust = TRUE limma::eBayes(). strategies downweight samples higher residual variance prevent bias linear modeling step, violations homoscedasticity assumption can lead misleading p-values unreliable inference. New note HTML report cluster_hits() function, informs user splines shown plots can appear wrong intercept. can occur batch effect /random effect modeled limma linear mixed models, plotting data batch corrected dedicated limma batch correction function. reason, gap. results fine! Just plotting ! New user-available function called compare_results() allows correlate topTable results two SplineOmics results (example intergrated vs. isolated approach data).","code":""},{"path":[]},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"added-5","dir":"Articles","previous_headings":"Changelog > Template for Changelog Entries > [0.1.2] - 2025-02-11","what":"Added","title":"Changelog","text":"Level name title overall spline plots.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"fixed-6","dir":"Articles","previous_headings":"Changelog > Template for Changelog Entries > [0.1.2] - 2025-02-11","what":"Fixed","title":"Changelog","text":"Small bug made impossible treatment label condition. Small bug allow specify two treatment labels. mode == isolated RNA-seq data. , caused error, splits meta different conditions, data. Now, informs user , user split data outside (just RNA-seq data).","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"removed-3","dir":"Articles","previous_headings":"Changelog > Template for Changelog Entries > [0.1.2] - 2025-02-11","what":"Removed","title":"Changelog","text":"open_template() function. function opened template analysis. removed , otherwise, whenever change code, update get-started vignette (tutorial) , twice maintainance effort.","code":""},{"path":[]},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"changed-5","dir":"Articles","previous_headings":"Changelog > Template for Changelog Entries","what":"Changed","title":"Changelog","text":"design formula must now contain string ‘Time’ rather ‘X’ like . X stood time. change intended make design formula explicit self explanatory. Random effects can now directly specified design formula, rather passed part dream_params.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"added-6","dir":"Articles","previous_headings":"Changelog > Template for Changelog Entries","what":"Added","title":"Changelog","text":"Added linear mixed models modeling random effects. variancePartition package used –> voomWithDreamWeights RNA-seq data processing, dream replacement limma. example, Reactor random effect, can write design formula like : design <- “~ 1 + Condition*Time + Plate + (1|Reactor)” SplineOmics automatically run variancePartition functions voomWithDreamWeights() dream() instead limma::voom lmfit. dream() additional parameters, method degree freedom (different degree freedom used splines package) can pass dream_params argument. See RNA-seq analysis vignette respective function references info. Raw data plotting function –> make_scatter_plot_html() –> see references. Imputed values marked triangle symbols cluster_hits() spline plots raw data passed. Package version written HTML report (tag) session info added embedded text file. Standard error written top “double spline” plots (limma result category 2 3). Used analysis script embedded text file reports. mode (integrated isolated) written top reports separate field. Now 4 significance stars. Treatment lines double spline plots (limma result category 2 3).","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"fixed-7","dir":"Articles","previous_headings":"Changelog > Template for Changelog Entries > Added","what":"Fixed","title":"Changelog","text":"smaller visual things HTML reports.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/CHANGELOG.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Changelog","text":"","code":"## R version 4.5.1 (2025-06-13) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 22.04.5 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.10.0  ## LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=de_AT.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=de_AT.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=de_AT.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=de_AT.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: Europe/Vienna ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices datasets  utils     methods   base      ##  ## loaded via a namespace (and not attached): ##  [1] digest_0.6.37       desc_1.4.3          R6_2.6.1            ##  [4] fastmap_1.2.0       xfun_0.52           cachem_1.1.0        ##  [7] knitr_1.50          htmltools_0.5.8.1   rmarkdown_2.29      ## [10] lifecycle_1.0.4     cli_3.6.5           sass_0.4.10         ## [13] pkgdown_2.1.3       textshaping_1.0.1   jquerylib_0.1.4     ## [16] renv_1.1.5          systemfonts_1.2.3   compiler_4.5.1      ## [19] rstudioapi_0.17.1   tools_4.5.1         ragg_1.4.0          ## [22] bslib_0.9.0         evaluate_1.0.4      yaml_2.3.10         ## [25] BiocManager_1.30.26 jsonlite_2.0.0      htmlwidgets_1.6.4   ## [28] rlang_1.1.6         fs_1.6.6"},{"path":"https://csbg.github.io/SplineOmics/articles/Docker-instructions.html","id":"pulling-the-docker-container","dir":"Articles","previous_headings":"","what":"Pulling the Docker Container","title":"Docker-instructions","text":"pull Docker container, use following command. Make sure check newest version specific version need visiting Docker Hub repository. face ‘permission denied’ issues, check vignette","code":"docker pull thomasrauter/splineomics:latest"},{"path":"https://csbg.github.io/SplineOmics/articles/Docker-instructions.html","id":"running-the-docker-container","dir":"Articles","previous_headings":"","what":"Running the Docker Container","title":"Docker-instructions","text":"run Docker container, can use one following commands, depending operating system. running command, ensure directory containing two subfolders: input output. used transfer files local machine Docker container. Linux macOS (Bash): Windows (PowerShell): container running, open web browser navigate http://localhost:8888. Log using following credentials: Username: rstudio Password: one set -e PASSWORD=123 option (123 case) long container running, can work localhost page RStudio, also SplineOmics package installed. /home/rstudio/ R session working folder. Stop container: Start container :","code":"docker run -it -d \\     -v $(pwd)/input:/home/rstudio/input \\     -v $(pwd)/output:/home/rstudio/output \\     -p 8888:8787 \\     -e PASSWORD=123 \\     --name splineomics \\     thomasrauter/splineomics:latest docker run -it -d `     -v \"${PWD}\\input:/home/rstudio/input\" `     -v \"${PWD}\\output:/home/rstudio/output\" `     -p 8888:8787 `     -e PASSWORD=123 `     --name splineomics `     thomasrauter/splineomics:latest docker stop splineomics docker start splineomics"},{"path":"https://csbg.github.io/SplineOmics/articles/Docker-instructions.html","id":"using-the-docker-desktop-gui-instead","dir":"Articles","previous_headings":"","what":"Using the Docker Desktop gui instead","title":"Docker-instructions","text":"Instead pasting commands Power- Bashshell, can also graphical user interface Docker Desktop. still want use link localhost page provided , set port 8888 (otherwise, change link points port). Additionally, don’t set passwort starting container using GUI, password generated randomly written red logs container.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/Docker-instructions.html","id":"input-and-output-file-management","dir":"Articles","previous_headings":"","what":"Input and Output File Management","title":"Docker-instructions","text":"input output directories local machine mounted corresponding directories inside Docker container. allows seamless file transfer local machine container. Place input files (e.g., data, metadata, annotation files) input directory local machine. files automatically appear /home/rstudio/input inside container. files generated RStudio within container saved /home/rstudio/output. files automatically appear output directory local machine.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/Docker-instructions.html","id":"inspect-docker-container-installations","dir":"Articles","previous_headings":"","what":"Inspect Docker container installations","title":"Docker-instructions","text":"see R packages system installations make Docker container, can run following command terminal RStudio localhost browser page. /home/rstudio/output dir mounted local filesystem, make installation log files available .","code":"cp -r /log home/rstudio/output"},{"path":"https://csbg.github.io/SplineOmics/articles/Docker-instructions.html","id":"installing-additional-r-packages-in-the-container","dir":"Articles","previous_headings":"","what":"Installing additional R packages in the container","title":"Docker-instructions","text":"New R packages can installed normal way: However, note packages installed running container lost container deleted rebuilt.","code":"install.packages(\"package_name\")"},{"path":"https://csbg.github.io/SplineOmics/articles/Docker-instructions.html","id":"permanent-additions","dir":"Articles","previous_headings":"","what":"Permanent additions","title":"Docker-instructions","text":"want permanently add R packages, R scripts, files SplineOmics Docker image, can use base image building new image. ensure changes saved new image, rather lost container deleted. example: Run container new image commands described .","code":"# Use the SplineOmics image as the base image FROM thomasrauter/splineomics:latest  # Install the data.table package permanently RUN R -e \"install.packages('data.table')\"  # Optionally, add custom R scripts to the image COPY your_script.R /home/rstudio/your_script.R  # Set the working directory WORKDIR /home/rstudio  # Expose RStudio Server port EXPOSE 8787  # Start RStudio server CMD [\"/init\"]  # Build new image: # docker build -t your_new_image_name ."},{"path":"https://csbg.github.io/SplineOmics/articles/Docker-instructions.html","id":"creating-a-reproducible-docker-container-with-automated-analysis","dir":"Articles","previous_headings":"","what":"Creating a Reproducible Docker Container with Automated Analysis","title":"Docker-instructions","text":"final analysis script inside Docker container SplineOmics package, want scientists can easily reproduce results running just one line code, follow guide . instruct create new image based container, can save example Docker Hub. Others can download image, run container get exact results got.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/Docker-instructions.html","id":"prepare-your-analysis-and-scripts","dir":"Articles","previous_headings":"Creating a Reproducible Docker Container with Automated Analysis","what":"1. Prepare your analysis and scripts","title":"Docker-instructions","text":"Ensure analysis scripts necessary files saved dedicated directory inside container (e.g., /home/rstudio/analysis/). analysis script take input files directory like /home/rstudio/input/ (already inside container need mounted reproducing analysis) output results /home/rstudio/output/. /home/rstudio/output/ directory mounted local directory user’s machine, making results accessible outside container. Example directory structure:","code":"/home/rstudio/ └── analysis/     ├── final_analysis.R   # Main analysis script     └── helper_functions.R # Supporting scripts"},{"path":"https://csbg.github.io/SplineOmics/articles/Docker-instructions.html","id":"create-an-entry-point-script","dir":"Articles","previous_headings":"Creating a Reproducible Docker Container with Automated Analysis","what":"2. Create an Entry Point Script","title":"Docker-instructions","text":"Create bash script (run_analysis.sh) runs analysis automatically. Example run_analysis.sh: Save script /home/rstudio/.","code":"#!/bin/bash Rscript /home/rstudio/analysis/final_analysis.R tail -f /dev/null  # Keep the container running after analysis"},{"path":"https://csbg.github.io/SplineOmics/articles/Docker-instructions.html","id":"commit-the-container-as-a-new-image-with-an-entry-point","dir":"Articles","previous_headings":"Creating a Reproducible Docker Container with Automated Analysis","what":"3. Commit the Container as a New Image with an Entry Point","title":"Docker-instructions","text":"scripts ready, commit running container new image set new entry point run bash script automatically:","code":"docker commit \\     --change='CMD [\"/bin/bash\", \"/home/rstudio/run_analysis.sh\"]' \\     <container_id> \\     thomasrauter/splineomics-analysis:v1"},{"path":"https://csbg.github.io/SplineOmics/articles/Docker-instructions.html","id":"push-the-new-image-to-docker-hub","dir":"Articles","previous_headings":"Creating a Reproducible Docker Container with Automated Analysis","what":"4. Push the New Image to Docker Hub","title":"Docker-instructions","text":"Push new image Docker Hub others can easily pull reproduce analysis: Others can pull (download) container command:","code":"docker push thomasrauter/splineomics-analysis:v1 docker pull thomasrauter/splineomics-analysis:v1"},{"path":"https://csbg.github.io/SplineOmics/articles/Docker-instructions.html","id":"running-the-container-to-reproduce-the-results","dir":"Articles","previous_headings":"Creating a Reproducible Docker Container with Automated Analysis","what":"5. Running the container to reproduce the results","title":"Docker-instructions","text":"reproduce results, need create local directory results saved mount directory container’s /home/rstudio/output/ directory. Use following command run container ensure results saved local output directory (see commands section Running Docker Container mount output dir current working dir).","code":"docker run -it \\     -v /path/to/local/output:/home/rstudio/output \\     thomasrauter/splineomics-analysis:v1"},{"path":"https://csbg.github.io/SplineOmics/articles/Docker-instructions.html","id":"optional-getting-insights-into-the-full-analysis","dir":"Articles","previous_headings":"Creating a Reproducible Docker Container with Automated Analysis","what":"(Optional) Getting insights into the full analysis","title":"Docker-instructions","text":"Start new container mount empty local directory /home/rstudio/ directory inside container. allows directly access analysis files local machine.","code":"docker run -it \\     -v /path/to/local/dir:/home/rstudio \\     thomasrauter/splineomics-analysis:v1"},{"path":"https://csbg.github.io/SplineOmics/articles/Docker-instructions.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Docker-instructions","text":"","code":"## R version 4.5.1 (2025-06-13) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 22.04.5 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.10.0  ## LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=de_AT.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=de_AT.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=de_AT.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=de_AT.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: Europe/Vienna ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices datasets  utils     methods   base      ##  ## loaded via a namespace (and not attached): ##  [1] digest_0.6.37       desc_1.4.3          R6_2.6.1            ##  [4] fastmap_1.2.0       xfun_0.52           cachem_1.1.0        ##  [7] knitr_1.50          htmltools_0.5.8.1   rmarkdown_2.29      ## [10] lifecycle_1.0.4     cli_3.6.5           sass_0.4.10         ## [13] pkgdown_2.1.3       textshaping_1.0.1   jquerylib_0.1.4     ## [16] renv_1.1.5          systemfonts_1.2.3   compiler_4.5.1      ## [19] rstudioapi_0.17.1   tools_4.5.1         ragg_1.4.0          ## [22] bslib_0.9.0         evaluate_1.0.4      yaml_2.3.10         ## [25] BiocManager_1.30.26 jsonlite_2.0.0      htmlwidgets_1.6.4   ## [28] rlang_1.1.6         fs_1.6.6"},{"path":"https://csbg.github.io/SplineOmics/articles/Docker_permission_denied.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Docker_permission_denied","text":"","code":"#> R version 4.5.1 (2025-06-13) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.5 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.10.0  #> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=de_AT.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=de_AT.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=de_AT.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=de_AT.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: Europe/Vienna #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices datasets  utils     methods   base      #>  #> loaded via a namespace (and not attached): #>  [1] digest_0.6.37       desc_1.4.3          R6_2.6.1            #>  [4] fastmap_1.2.0       xfun_0.52           cachem_1.1.0        #>  [7] knitr_1.50          htmltools_0.5.8.1   rmarkdown_2.29      #> [10] lifecycle_1.0.4     cli_3.6.5           sass_0.4.10         #> [13] pkgdown_2.1.3       textshaping_1.0.1   jquerylib_0.1.4     #> [16] renv_1.1.5          systemfonts_1.2.3   compiler_4.5.1      #> [19] rstudioapi_0.17.1   tools_4.5.1         ragg_1.4.0          #> [22] bslib_0.9.0         evaluate_1.0.4      yaml_2.3.10         #> [25] BiocManager_1.30.26 jsonlite_2.0.0      htmlwidgets_1.6.4   #> [28] rlang_1.1.6         fs_1.6.6"},{"path":"https://csbg.github.io/SplineOmics/articles/PVC_analysis.html","id":"about-this-tutorial","dir":"Articles","previous_headings":"","what":"About this tutorial","title":"PVC_analysis","text":"tutorial demonstrates excursion-analysis capabilities SplineOmics package walking complete, real-world phosphoproteomics example start finish. context time series data, excursion refers transient deviation baseline — concept borrowed signal processing. short-term, local shifts can reveal biologically meaningful events captured global trends. Details excursions detected described section PVC test, method specifically designed identify local patterns. core strength SplineOmics lies modeling global temporal patterns using smoothing splines, many biologically important phenomena present localized events. may well captured standard spline fits due smooth global nature. example, phosphoproteomics data, might observe sharp, temporary phosphorylation spike specific timepoint following stimulus — pattern returns baseline shortly afterward. transient peak can indicate key signaling activation event functionally critical, smoothed diluted traditional spline-based analyses. handle scenarios, developed PVC test (described ), specifically designed detect sharp, local excursions time-resolved omics data.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/PVC_analysis.html","id":"note-1","dir":"Articles","previous_headings":"About this tutorial","what":"Note 1","title":"PVC_analysis","text":"documentation SplineOmics package functions can viewed ","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/PVC_analysis.html","id":"note-2","dir":"Articles","previous_headings":"About this tutorial","what":"Note 2","title":"PVC_analysis","text":"vignette focuses excursion-analysis. general functionalities SplineOmics explained get-started vignette.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/PVC_analysis.html","id":"the-pvc-test","dir":"Articles","previous_headings":"","what":"The PVC Test","title":"PVC_analysis","text":"PVC stands Peak, Valley, Cliff. PVC test method identify distinct local patterns (called excursions) time series data using compound contrast approach within limma framework. context: peak occurs timepoint significantly higher immediate neighbors. valley occurs timepoint significantly lower neighbors. cliff describes sharp directional shift: one neighbor similar value, significantly different (higher lower).","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/PVC_analysis.html","id":"method","dir":"Articles","previous_headings":"The PVC Test","what":"Method","title":"PVC_analysis","text":"PVC analysis implemented rolling, compound contrast applied across time series. Specifically, window three consecutive timepoints evaluated time:(Tᵢ₋₁, Tᵢ, Tᵢ₊₁) Tᵢ center window. first last timepoints excluded analysis, since lack left right neighbors. triplet, contrast defined : 2*Tᵢ - Tᵢ₋₁ - Tᵢ₊₁ contrast measures whether center point Tᵢ deviates neighbors direction: Tᵢ greater neighbors → large positive contrast → indicates peak Tᵢ lower neighbors → large negative contrast → indicates valley Tᵢ lies neighbors → effects cancel → contrast near zero → signal contrast tested using limma, result p-value indicates whether observed pattern statistically significant feature (e.g., gene, phosphosite).","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/PVC_analysis.html","id":"multiple-testing-correction","dir":"Articles","previous_headings":"The PVC Test","what":"Multiple Testing Correction","title":"PVC_analysis","text":"test performed independently center timepoint across features, multiple testing correction applied timepoint level. ensures significance inflated due repeated testing across features. Importantly, PVC assess whether entire feature contains full peak/valley/cliff pattern time — evaluates timepoint independently local patterns.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/PVC_analysis.html","id":"details-about-the-dataset","dir":"Articles","previous_headings":"","what":"Details about the dataset","title":"PVC_analysis","text":"example dataset used involves time-series phosphoproteomics experiment, CHO (chinese hamster ovary) cells cultivated three bioreactors (three biological replicates). experiment includes following setup: Samples taken exponential stationary growth phases. 60 minutes feeding 15, 60, 90, 120, 240 minutes feeding Note dataset truncated 1000 rows file size reasons annotation info, gene name, randomly shuffled.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/PVC_analysis.html","id":"load-the-packages","dir":"Articles","previous_headings":"","what":"Load the packages","title":"PVC_analysis","text":"","code":"library(SplineOmics) library(here) # For managing filepaths #> here() starts at /home/thomas/Documents/PhD/projects/DGTX/SplineOmics_hub/SplineOmics library(dplyr) # For data manipulation #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(knitr) # For Showing the head of the data and the meta tables."},{"path":"https://csbg.github.io/SplineOmics/articles/PVC_analysis.html","id":"load-the-files","dir":"Articles","previous_headings":"","what":"Load the files","title":"PVC_analysis","text":"example, proteomics_data.rds file contains numeric values (intensities) also feature descriptions, gene protein name (= annotation part). Usually, load data example Excel file, .rds file compressed, reason format chosen limit size SplineOmics package. file meta.xlsx contains meta information, descriptions columns numeric values data. (example files part package don’t present system). Please note dataset actual experimental dataset, annotation information, gene names, removed since yet published time making SplineOmics package public. Instead, dataset includes randomly generated gene symbols gene names corresponding Cricetulus griseus (Chinese Hamster) row. intended demonstrate functionality package. left part data contains numeric values, right part annotation info, can copied separate dataframe, shown .","code":"data <- readRDS(xzfile(system.file(     \"extdata\",     \"phosphoproteomics_data.rds.xz\",     package = \"SplineOmics\" )))  meta <- read.csv(     system.file(         \"extdata\",         \"phosphoproteomics_meta.csv\",         package = \"SplineOmics\"     ),     stringsAsFactors = FALSE )  # Extract the annotation part from the dataframe. first_na_col <- which(is.na(data[1, ]))[1] annotation <- data |> dplyr::select((first_na_col + 1):ncol(data))"},{"path":"https://csbg.github.io/SplineOmics/articles/PVC_analysis.html","id":"show-top-rows-of-data","dir":"Articles","previous_headings":"Load the files","what":"Show top rows of data","title":"PVC_analysis","text":"","code":"kable(     head(data),     format = \"markdown\" )"},{"path":"https://csbg.github.io/SplineOmics/articles/PVC_analysis.html","id":"show-top-rows-of-meta","dir":"Articles","previous_headings":"Load the files","what":"Show top rows of meta","title":"PVC_analysis","text":"","code":"kable(     head(meta),     format = \"markdown\" )"},{"path":"https://csbg.github.io/SplineOmics/articles/PVC_analysis.html","id":"show-top-rows-of-annotation","dir":"Articles","previous_headings":"Load the files","what":"Show top rows of annotation","title":"PVC_analysis","text":"","code":"kable(     head(annotation),     format = \"markdown\" )"},{"path":"https://csbg.github.io/SplineOmics/articles/PVC_analysis.html","id":"bring-the-inputs-into-the-standardized-format","dir":"Articles","previous_headings":"Load the files","what":"Bring the Inputs into the Standardized Format","title":"PVC_analysis","text":"","code":"data <- SplineOmics::extract_data(     # The dataframe with the numbers on the left and info on the right.     data = data,     # Use this annotation column for the feature names.     feature_name_columns = c(\"T..Gene\"),     use_row_index = TRUE, # makes the feature names unique with row index     top_row = 1,     bottom_row = 1000,     right_col = 36,     left_col = 1 )"},{"path":"https://csbg.github.io/SplineOmics/articles/PVC_analysis.html","id":"splineomics-object","dir":"Articles","previous_headings":"Load the files","what":"SplineOmics Object","title":"PVC_analysis","text":"","code":"# Those fields are mandatory, because we believe that when such a report is # opened after half a year, those infos can be very helpful. report_info <- list(     omics_data_type = \"PPTX\",     data_description = \"Phosphoproteomics data of CHO cells\",     data_collection_date = \"February 2024\",     analyst_name = \"Thomas Rauter\",     contact_info = \"thomas.rauter@plus.ac.at\",     project_name = \"DGTX\" ) # splineomics now contains the SplineOmics object. splineomics <- SplineOmics::create_splineomics(     data = data,     meta = meta,     annotation = annotation,     report_info = report_info,     condition = \"Phase\", # Column of meta that contains the levels.     meta_batch_column = \"Reactor\", # For batch effect removal )"},{"path":"https://csbg.github.io/SplineOmics/articles/PVC_analysis.html","id":"run-the-pvc-analysis","dir":"Articles","previous_headings":"","what":"Run the PVC-analysis","title":"PVC_analysis","text":"terminal output function gives information total amount excursions found level, also breakdown timepoint type excursion (p = peak, v = valley, b = bottom cliff, t = top cliff, always respective timepoint mentioned row). can see resulting HTML report.","code":"plot_info <- list(     y_axis_label = \"log2 intensity\",     time_unit = \"min\",     treatment_labels = list(         Exponential = \"temp shift\",         Stationary = \"temp shift\"     ),     treatment_timepoints = list(         Exponential = 146,         Stationary = 146     ) ) # Check out the documentation of the function under the Reference tab. excursion_plots <- SplineOmics::find_pvc(     splineomics = splineomics,     alphas = 0.025,     plot_info = plot_info,     report_dir = withr::local_tempdir() ) #> design matrix of interest not specified. Assuming a one-group experiment. #> Warning: Partial NA coefficients for 33 probe(s) #> Warning: Partial NA coefficients for 195 probe(s) #>  #> Detected 6 total pattern hits for condition level: Exponential #>  #> Summary by pattern type: #> p: 2, v: 3, b: 1, t: 0 #>  #> Breakdown by timepoint: #> -60: p=0; v=0; b=0; t=0 #> 15: p=0; v=1; b=0; t=0 #> 60: p=0; v=0; b=1; t=0 #> 90: p=1; v=2; b=0; t=0 #> 120: p=1; v=0; b=0; t=0 #> 240: p=0; v=0; b=0; t=0 #>  #> design matrix of interest not specified. Assuming a one-group experiment. #> Warning: Partial NA coefficients for 55 probe(s) #> Warning: Partial NA coefficients for 199 probe(s) #>  #> Detected 64 total pattern hits for condition level: Stationary #>  #> Summary by pattern type: #> p: 40, v: 22, b: 1, t: 1 #>  #> Breakdown by timepoint: #> -60: p=0; v=0; b=0; t=0 #> 15: p=0; v=0; b=0; t=0 #> 60: p=40; v=22; b=1; t=1 #> 90: p=0; v=0; b=0; t=0 #> 120: p=0; v=0; b=0; t=0 #> 240: p=0; v=0; b=0; t=0 #>  #>  Info PVC report generation completed successfully. #>  Your HTML reports are located in the directory:  /tmp/RtmpULAQZt/file9a5073633358 . #>  Please note that due to embedded files, the reports might be flagged as #>  harmful by other software. Rest assured that they provide no harm."},{"path":"https://csbg.github.io/SplineOmics/articles/PVC_analysis.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"PVC_analysis","text":"","code":"#> R version 4.5.1 (2025-06-13) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.5 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.10.0  #> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=de_AT.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=de_AT.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=de_AT.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=de_AT.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: Europe/Vienna #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices datasets  utils     methods   base      #>  #> other attached packages: #> [1] knitr_1.50        dplyr_1.1.4       here_1.0.1        SplineOmics_0.3.7 #>  #> loaded via a namespace (and not attached): #>   [1] Rdpack_2.6.4             bitops_1.0-9             pbapply_1.7-2            #>   [4] writexl_1.5.4            rlang_1.1.6              magrittr_2.0.3           #>   [7] clue_0.3-66              GetoptLong_1.0.5         matrixStats_1.5.0        #>  [10] compiler_4.5.1           reshape2_1.4.4           png_0.1-8                #>  [13] systemfonts_1.2.3        vctrs_0.6.5              stringr_1.5.1            #>  [16] pkgconfig_2.0.3          shape_1.4.6.1            crayon_1.5.3             #>  [19] fastmap_1.2.0            backports_1.5.0          labeling_0.4.3           #>  [22] caTools_1.18.3           rmarkdown_2.29           nloptr_2.2.1             #>  [25] ragg_1.4.0               purrr_1.1.0              xfun_0.52                #>  [28] cachem_1.1.0             jsonlite_2.0.0           progress_1.2.3           #>  [31] EnvStats_3.1.0           remaCor_0.0.18           gmp_0.7-5                #>  [34] BiocParallel_1.42.1      broom_1.0.8              parallel_4.5.1           #>  [37] prettyunits_1.2.0        cluster_2.1.8.1          R6_2.6.1                 #>  [40] stringi_1.8.7            bslib_0.9.0              RColorBrewer_1.1-3       #>  [43] limma_3.64.1             car_3.1-3                boot_1.3-31              #>  [46] ClusterR_1.3.3           numDeriv_2016.8-1.1      jquerylib_0.1.4          #>  [49] Rcpp_1.1.0               iterators_1.0.14         base64enc_0.1-3          #>  [52] IRanges_2.42.0           Matrix_1.7-3             splines_4.5.1            #>  [55] tidyselect_1.2.1         rstudioapi_0.17.1        abind_1.4-8              #>  [58] yaml_2.3.10              doParallel_1.0.17        gplots_3.2.0             #>  [61] codetools_0.2-19         plyr_1.8.9               lmerTest_3.1-3           #>  [64] lattice_0.22-5           tibble_3.3.0             withr_3.0.2              #>  [67] Biobase_2.68.0           evaluate_1.0.4           desc_1.4.3               #>  [70] zip_2.3.3                circlize_0.4.16          pillar_1.11.0            #>  [73] BiocManager_1.30.26      carData_3.0-5            KernSmooth_2.23-26       #>  [76] renv_1.1.5               foreach_1.5.2            stats4_4.5.1             #>  [79] reformulas_0.4.1         generics_0.1.4           rprojroot_2.1.0          #>  [82] S4Vectors_0.46.0         hms_1.1.3                ggplot2_3.5.2            #>  [85] scales_1.4.0             aod_1.3.3                minqa_1.2.8              #>  [88] gtools_3.9.5             RhpcBLASctl_0.23-42      glue_1.8.0               #>  [91] tools_4.5.1              fANCOVA_0.6-1            variancePartition_1.38.0 #>  [94] lme4_1.1-37              mvtnorm_1.3-3            fs_1.6.6                 #>  [97] grid_4.5.1               tidyr_1.3.1              rbibutils_2.3            #> [100] colorspace_2.1-1         nlme_3.1-168             Formula_1.2-5            #> [103] cli_3.6.5                textshaping_1.0.1        svglite_2.2.1            #> [106] ComplexHeatmap_2.24.1    corpcor_1.6.10           gtable_0.3.6             #> [109] sass_0.4.10              digest_0.6.37            BiocGenerics_0.54.0      #> [112] pbkrtest_0.5.4           ggrepel_0.9.6            rjson_0.2.23             #> [115] htmlwidgets_1.6.4        farver_2.1.2             htmltools_0.5.8.1        #> [118] pkgdown_2.1.3            lifecycle_1.0.4          GlobalOptions_0.1.2      #> [121] statmod_1.5.0            MASS_7.3-65"},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq analysis.html","id":"about-this-vignette","dir":"Articles","previous_headings":"","what":"About this vignette","title":"RNA-seq analysis","text":"tutorial intends showcase explain capabilities SplineOmics package walking real complete RNA-seq example, start finish. SplineOmics explained detail get-started vignette, proteomics example covered. vignette focused showing RNA-seq data can used, , less details overall package provided .","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq analysis.html","id":"data-overview","dir":"Articles","previous_headings":"About this vignette","what":"Data Overview","title":"RNA-seq analysis","text":"dataset originates time-series RNA-seq experiment designed study Chinese Hamster Ovary (CHO) cells. experiment involved cultivating cells eight bioreactors, four bioreactors subjected temperature shift 146 hours (experimental condition) remaining four bioreactors maintained without temperature shift (control condition).","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq analysis.html","id":"timepoints","dir":"Articles","previous_headings":"About this vignette > Data Overview","what":"Timepoints","title":"RNA-seq analysis","text":"Samples collected 17 distinct time points throughout experiment, specifically: \"72h\", \"76h\", \"96h\", \"120h\", \"124h\", \"144h\", \"148h\", \"152h\", \"168h\", \"192h\", \"216h\", \"220h\", \"240h\", \"264h\", \"268h\", \"288h\", \"312h\" cultivation start. time point sampled eight bioreactors, resulting total 136 samples.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq analysis.html","id":"effects-in-the-experiment-reactor-and-plate","dir":"Articles","previous_headings":"About this vignette > Data Overview","what":"Effects in the Experiment: Reactor and Plate","title":"RNA-seq analysis","text":"experiment, two effects consider: Reactor Plate. refers different bioreactors used cell cultivation, can exhibit substantial variability. reactor assigned single condition: either constant temperature temperature-shifted. result, condition reactor confounded. Reactor treated fixed effect simply remove influence. Instead, treated random effect, allows us model variability appropriately. refers two separate plates used RNA-seq analysis samples. fully random design employed distribute samples across two plates, ensuring bias assignment. Plate considered batch effect respect condition (constant temperature vs. temperature-shifted). Since condition reactor confounded, variability due reactors directly separated condition. Instead, linear mixed models (LMMs) used attribute reactor random effect, allowing us account variability isolating effects condition. approach ensures analysis appropriately handles hierarchical structure data avoids incorrect conclusions. vignette, demonstrate use linear mixed models address challenges properly account reactor plate effects.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq analysis.html","id":"further-info","dir":"Articles","previous_headings":"About this vignette > Data Overview","what":"Further info","title":"RNA-seq analysis","text":"data matrix comprises genes rows samples columns, providing gene expression measurements time points. sample initially sequenced three technical replicates across two NovaSeq X flow cells. technical replicates collapsed generate final dataset used analysis. goal experiment investigate effect temperature shift CHO cell cultivation gene expression dynamics time. Note: original dataset, yet published time vignette’s creation. demonstration purposes, genes randomly shuffled, subset data included reduce dataset size.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq analysis.html","id":"analysis-goals","dir":"Articles","previous_headings":"About this vignette","what":"Analysis Goals","title":"RNA-seq analysis","text":"main objectives analysis : Identify genes significant temporal changes: Among thousands genes measured, goal identify exhibit significant changes expression time. Cluster genes based temporal patterns: Genes showing significant temporal changes (hits) grouped clusters based time-dependent expression patterns. Perform gene set enrichment analysis: cluster, gene set enrichment analysis conducted identify whether specific biological pathways processes - downregulated response feeding processes influenced temperature shift. Assess impact temperature shifts temporal patterns: analysis determine whether temporal patterns gene expression affected temperature shift, .e., whether gene expression dynamics differ time temperature shift conditions compared controls.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq analysis.html","id":"load-the-packages","dir":"Articles","previous_headings":"","what":"Load the packages","title":"RNA-seq analysis","text":"","code":"library(SplineOmics) #> Warning: replacing previous import 'limma::topTable' by #> 'variancePartition::topTable' when loading 'SplineOmics' library(readr) # For reading the meta CSV file library(here)  # For managing filepaths #> here() starts at /tmp/RtmpVgXgie library(dplyr) # For data manipulation #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(knitr) # For Showing the head of the data and the meta tables."},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq analysis.html","id":"load-the-files","dir":"Articles","previous_headings":"","what":"Load the files","title":"RNA-seq analysis","text":"","code":"data <- readRDS(xzfile(system.file(   \"extdata\",   \"rna_seq_data.rds.xz\",   package = \"SplineOmics\" )))  meta <- readr::read_csv(   system.file(     \"extdata\",     \"rna_seq_meta.csv\",     package = \"SplineOmics\"   ),   show_col_types = FALSE )"},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq analysis.html","id":"show-top-rows-of-data","dir":"Articles","previous_headings":"Load the files","what":"Show top rows of data","title":"RNA-seq analysis","text":"data: numeric matrix row represents gene (features) column corresponds sample. row names matrix contain gene identifiers, columns aligned sample metadata meta. matrix contains expression values 136 samples. Note study conducted blinded manner, samples randomly distributed across two plates RNA-seq analysis. result, sample numbers (e.g., 1, 2, 3, etc.) sequential order respect time, condition, plate. data analysis involving splines time, essential sort samples based time establish valid temporal sequence. Additionally, organizing data way improves clarity ensures consistency. Within time point, samples sorted condition (e.g., constant temp_shift) , subsequently, plate (e.g., plate_1 plate_2).","code":"kable(   head(data),   format = \"markdown\"   )"},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq analysis.html","id":"show-top-rows-of-meta","dir":"Articles","previous_headings":"Load the files","what":"Show top rows of meta","title":"RNA-seq analysis","text":"meta: data frame containing metadata information samples data. row meta corresponds column data, ensuring 1:1 alignment metadata entries expression data samples. columns meta describe various attributes samples, SampleNr, Reactor, Time, Condition, Plate.","code":"kable(   head(meta),   format = \"markdown\"   )"},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq analysis.html","id":"preprocess-the-data","dir":"Articles","previous_headings":"","what":"Preprocess the data","title":"RNA-seq analysis","text":"Filter data rows (genes) zero counts across samples. step standard preprocessing procedure RNA-seq data analysis, genes zero counts samples provide information downstream analyses.","code":"rows_before <- nrow(data)  # Filter data rows data <- data[rowSums(data) > 0, ]  rows_after <- nrow(data) rows_removed <- rows_before - rows_after  cat(sprintf(   \"Rows before filtering: %d\\nRows after filtering: %d\\nRows removed: %d\\n\",    rows_before,   rows_after,   rows_removed   )) #> Rows before filtering: 1000 #> Rows after filtering: 944 #> Rows removed: 56"},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq analysis.html","id":"perform-eda-exploratory-data-analysis","dir":"Articles","previous_headings":"","what":"Perform EDA (exploratory data analysis)","title":"RNA-seq analysis","text":"can see HTML report explore_data() function batch-corrected data, report batch-corrected data.","code":"report_info <- list(   omics_data_type = \"RNA\",   data_description = \"RNA-seq data of CHO cells\",   data_collection_date = \"December 2024\",   analyst_name = \"Thomas Rauter\",   contact_info = \"thomas.rauter@plus.ac.at\",   project_name = \"DGTX\" )  report_dir <- here::here(   \"results\",   \"explore_data\" ) splineomics <- SplineOmics::create_splineomics(   data = data,   meta = meta,   report_info = report_info,   condition = \"Condition\",    # Column of meta that contains the levels.   meta_batch_column = \"Plate\" # Remove batch effect for plotting. ) plots <- SplineOmics::explore_data(   splineomics = splineomics,    report_dir = report_dir )"},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq analysis.html","id":"run-limma-spline-analysis","dir":"Articles","previous_headings":"","what":"Run limma spline analysis","title":"RNA-seq analysis","text":"example, skipping finding best hyperparameters screen_limma_hyperparams() function, already clear idea use. Lets define parameters put SplineOmics object: Preprocess RNA-seq data limma::voom. method transforms raw RNA-seq counts log-counts per million (logCPM) modeling mean-variance relationship. assigns precision weights observation, ensuring accurate linear modeling RNA-seq data, often exhibits heteroscedasticity (varying variance across expression levels). normalize data, TMM (Trimmed Mean M-values) normalization applied using DGEList object edgeR package, correcting library size differences compositional biases. random effects included design, function automatically uses voomWithDreamWeights variancePartition package instead. method extends voom incorporating random effects model, allowing precise handling complex experimental designs repeated measures hierarchical structures. calculated weights account fixed random effects, providing robust results differential expression analysis. can customize normalization method providing specific normalization function normalize_func argument preprocess_rna_seq_data() function. details use feature, please refer function documentation available ‘References’ website. Additionally, use preprocess_rna_seq_data() optional RNA-seq data. Alternatively, can use limma::voom function directly pass resulting voom object rna_seq_data argument create_splineomics() update_splineomics(). Alongside , must pass $E data matrix data argument. general, long data argument contains actual data matrix rna_seq_data argument contains object compatible limma, data correctly processed. Run run_limma_splines() function updated SplineOmics object: output function run_limma_splines() named list, element specific “category” results. Refer document explanation different result categories. elements list, containing elements respective limma topTables, either level comparison two levels. element “time_effect” list, element topTable p-value feature respective level reported. element “avrg_diff_conditions” list contains elements topTables, represent comparison average differences levels. element “interaction_condition_time” list contains elements topTables, represent interaction levels (includes time average differences)","code":"spline_params = list(   spline_type = c(\"n\"),    # natural cubic splines   dof = c(3L)              # Degree of freedom of 3 for the splines. )  design <- \"~ 1 + Condition*Time + Plate + (1|Reactor)\"  splineomics <- SplineOmics::update_splineomics(   splineomics = splineomics,   data = data,   design = design,    # dream_params = dream_params,   if we would want to adjust dream()   # means limma \"borrows\" statistical power from the other levels   mode = \"integrated\",    spline_params = spline_params ) voom_obj <- SplineOmics::preprocess_rna_seq_data(   splineomics = splineomics ) #> Column 'Plate' of meta will be used to remove the batch effect for the plotting #> Make sure that the design formula contains no interaction between the condition and time for mode == isolated, and that it contains an interaction for mode == integrated. Otherwise, you will get an uncaught error of 'coefficients not estimable' or 'subscript out of bounds'. #> Preprocessing RNA-seq data (normalization + voom)... splineomics <- SplineOmics::update_splineomics(   splineomics = splineomics,   data = voom_obj$E,   rna_seq_data = voom_obj ) splineomics <- SplineOmics::run_limma_splines(   splineomics = splineomics ) #> Hint: The data contains negative values. This may occur if the data has been transformed (e.g., log-transformed or normalized) and is valid in such cases. Ensure that the data preprocessing  aligns with your analysis requirements. #> Column 'Plate' of meta will be used to remove the batch effect for the plotting #> Make sure that the design formula contains no interaction between the condition and time for mode == isolated, and that it contains an interaction for mode == integrated. Otherwise, you will get an uncaught error of 'coefficients not estimable' or 'subscript out of bounds'. #> Info limma spline analysis completed successfully"},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq analysis.html","id":"build-limma-report","dir":"Articles","previous_headings":"","what":"Build limma report","title":"RNA-seq analysis","text":"topTables three limma result categories can used generate p-value histograms volcano plots. can view generated analysis report create_limma_report function .","code":"report_dir <- here::here(   \"results\",   \"limma_reports\" )  plots <- SplineOmics::create_limma_report(   splineomics = splineomics,   report_dir = report_dir )"},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq analysis.html","id":"cluster-the-hits-significant-features","dir":"Articles","previous_headings":"","what":"Cluster the hits (significant features)","title":"RNA-seq analysis","text":"obtained limma spline results, can cluster hits based temporal pattern (spline shape). define hit setting adj. p-value threshold every level. Hits features (genes ) adj. p-value threshold. Hierarchical clustering used place every hit one many clusters specified specific level. Note dataset, vast amount hits. useful thousands individual plots, also takes long time compute resulting HTML large size, want limit hits plotted. several options: Use low adjusted p-value: approach filters significant features (genes) proceeding analysis visualization. Access customize data: Modify dataframes inside SplineOmics object removing selected set features (genes) plotting. Optimize clustering without generating report: Set report argument cluster_hits() function FALSE (default TRUE). skips generation HTML report, significantly speeding computation omitting creation export plots. can view generated analysis report cluster_hits function . discussed , three limma result categories. cluster_hits() report shows results three, present (category 2 3 can generated design formula contains interaction effect).","code":"# Note: The low adj. p-values are to have less results, so that the HTML report # is smaller in file size. adj_pthresholds <- c(   # 0.0000001 for both levels   0.0000001, # constant (temperature)      0.0000001  # temp_shift )  clusters <- c(   4L,  # 4 clusters for constant   4L   # 4 clusters for temp_shift )  report_dir <- here::here(   \"results\",   \"clustering_reports\" )  # treatment_labels allows to place vertical dashed lines into the plots, that # indicate a treatment, such as \"temp shift\" in this experiment. For each level, # the treatment can be specified individually. For the \"double spline plots\",  # where two levels are combined into one plot, treatment lines can also be  # defined. The correct fieldname for those is {first_level}_{second_level},  # with first_level being the level of the two occuring first in the respective # meta column, and second_level the one that occurs after.  # Here, we don't want a treatment line for the constant level, since no  # treatment was applied. To achieve that, we simply set it to NA or leave it # out.  treatment_labels = list(   # constant = NA,    temp_shift = \"temp shift\",     constant_temp_shift = \"temp shift\"    )  # treatment_timepoints allows to specify the timepoint, at which the vertical # dashed treatment line is placed. Again, for the constant level, we don't # have a treatment, so we also do not specify a timepoint. treatment_timepoints = list(   # constant = NA,   temp_shift = 146,     constant_temp_shift = 146   )  plot_info <- list( # For the spline plots   y_axis_label = \"log2 counts\",   time_unit = \"min\", # our measurements were in minutes   # When you simply want to add a given treatment line to all conditions (   # including all double spline plot comparisons) then you can do it in the    # following way (commented out here):    )   # treatment_labels = list(\"temp shift\"), # add for all conditions   # treatment_timepoints = list(146)       # temp shift was at 146 hours.   treatment_labels = treatment_labels,   treatment_timepoints = treatment_timepoints )  genes <- rownames(data)  plot_options <- list(   # When meta_replicate_column is not there, all datapoints are blue.   meta_replicate_column = \"Reactor\" # Colors the data points based on Reactor )  clustering_results <- SplineOmics::cluster_hits(   splineomics = splineomics,   adj_pthresholds = adj_pthresholds,   clusters = clusters,   genes = genes,   plot_info = plot_info,   plot_options = plot_options,   report_dir = report_dir,   adj_pthresh_avrg_diff_conditions = 0.0000001,   adj_pthresh_interaction_condition_time = 0.0000001 )"},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq analysis.html","id":"perform-gene-set-enrichment-analysis-gsea","dir":"Articles","previous_headings":"","what":"Perform gene set enrichment analysis (GSEA)","title":"RNA-seq analysis","text":"clustered hits identified, subsequent step gain biological insights perform GSEA. , respective genes can assigned clustered hit, GSEA can carried . proceed, Enrichr databases choice need downloaded: Per default file placed current working directory, root dir R project. run GSEA, downloaded database file loaded dataframe. , optionally, clusterProfiler parameters report dir can specified. function create_gsea_report() runs GSEA using clusterProfiler, generates HTML report returns GSEA dotplots R. function runs clusterProfiler clusters levels, generates HTML report: can view generated analysis report run_gsea function .","code":"# Specify which databases you want to download from Enrichr gene_set_lib <- c(   \"WikiPathways_2019_Human\",   \"NCI-Nature_2016\",   \"TRRUST_Transcription_Factors_2019\",   \"MSigDB_Hallmark_2020\",   \"GO_Cellular_Component_2018\",   \"CORUM\",   \"KEGG_2019_Human\",   \"TRANSFAC_and_JASPAR_PWMs\",   \"ENCODE_and_ChEA_Consensus_TFs_from_ChIP-X\",   \"GO_Biological_Process_2018\",   \"GO_Molecular_Function_2018\",   \"Human_Gene_Atlas\" )  SplineOmics::download_enrichr_databases(   gene_set_lib = gene_set_lib,   output_dir = here::here(),   # output into the current working dir (default)   filename = \"databases.tsv\"   # just the name of the file, not the full path ) # Specify the filepath of the TSV file with the database info downloaded_dbs_filepath <- here::here(   \"databases.tsv\"   )  # Load the file databases <- read.delim(   downloaded_dbs_filepath,   sep = \"\\t\",   stringsAsFactors = FALSE )  # Specify the clusterProfiler parameters clusterProfiler_params <- list(   pvalueCutoff = 0.05,   pAdjustMethod = \"BH\",   minGSSize = 10,   maxGSSize = 500,   qvalueCutoff = 0.2 )  report_dir <- here::here(   \"results\",   \"gsea_reports\" ) result <- SplineOmics::run_gsea(   # A dataframe with three columns: feature, cluster, and gene. Feature contains   # the integer index of the feature, cluster the integer specifying the cluster   # number, and gene the string of the gene, such as \"CLSTN2\".   levels_clustered_hits = clustering_results$clustered_hits_levels,   databases = databases,   clusterProfiler_params = clusterProfiler_params,   report_info = report_info,   report_dir = report_dir )"},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq analysis.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"RNA-seq analysis","text":"","code":"#> R version 4.3.3 (2024-02-29) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.5 LTS #>  #> Matrix products: default #> BLAS:   /usr/local/R-4.3.3/lib/R/lib/libRblas.so  #> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=de_AT.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=de_AT.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=de_AT.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=de_AT.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: Europe/Vienna #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices datasets  utils     methods   base      #>  #> other attached packages: #> [1] knitr_1.49        dplyr_1.1.4       here_1.0.1        readr_2.1.5       #> [5] SplineOmics_0.1.2 #>  #> loaded via a namespace (and not attached): #>   [1] Rdpack_2.6.2             bitops_1.0-9             gridExtra_2.3            #>   [4] rlang_1.1.5              magrittr_2.0.3           clue_0.3-66              #>   [7] GetoptLong_1.0.5         matrixStats_1.5.0        compiler_4.3.3           #>  [10] reshape2_1.4.4           png_0.1-8                systemfonts_1.2.1        #>  [13] vctrs_0.6.5              stringr_1.5.1            pkgconfig_2.0.3          #>  [16] shape_1.4.6.1            crayon_1.5.3             fastmap_1.2.0            #>  [19] backports_1.5.0          caTools_1.18.3           rmarkdown_2.29           #>  [22] tzdb_0.4.0               nloptr_2.1.1             ragg_1.3.3               #>  [25] bit_4.5.0.1              purrr_1.0.4              xfun_0.50                #>  [28] cachem_1.1.0             jsonlite_1.8.9           progress_1.2.3           #>  [31] EnvStats_3.0.0           remaCor_0.0.18           BiocParallel_1.36.0      #>  [34] broom_1.0.7              parallel_4.3.3           prettyunits_1.2.0        #>  [37] cluster_2.1.6            R6_2.5.1                 bslib_0.9.0              #>  [40] stringi_1.8.4            RColorBrewer_1.1-3       limma_3.58.1             #>  [43] boot_1.3-29              numDeriv_2016.8-1.1      jquerylib_0.1.4          #>  [46] Rcpp_1.0.14              iterators_1.0.14         base64enc_0.1-3          #>  [49] IRanges_2.36.0           Matrix_1.6-5             splines_4.3.3            #>  [52] tidyselect_1.2.1         rstudioapi_0.17.1        yaml_2.3.10              #>  [55] viridis_0.6.5            doParallel_1.0.17        gplots_3.2.0             #>  [58] codetools_0.2-19         plyr_1.8.9               lmerTest_3.1-3           #>  [61] lattice_0.22-5           tibble_3.2.1             withr_3.0.2              #>  [64] Biobase_2.62.0           evaluate_1.0.3           desc_1.4.3               #>  [67] zip_2.3.2                circlize_0.4.16          pillar_1.10.1            #>  [70] BiocManager_1.30.25      KernSmooth_2.23-22       renv_1.1.1               #>  [73] foreach_1.5.2            stats4_4.3.3             reformulas_0.4.0         #>  [76] generics_0.1.3           vroom_1.6.5              rprojroot_2.0.4          #>  [79] S4Vectors_0.40.2         hms_1.1.3                ggplot2_3.5.1            #>  [82] munsell_0.5.1            scales_1.3.0             aod_1.3.3                #>  [85] minqa_1.2.8              gtools_3.9.5             RhpcBLASctl_0.23-42      #>  [88] glue_1.8.0               pheatmap_1.0.12          tools_4.3.3              #>  [91] fANCOVA_0.6-1            dendextend_1.19.0        variancePartition_1.32.5 #>  [94] lme4_1.1-36              openxlsx_4.2.8           locfit_1.5-9.11          #>  [97] mvtnorm_1.3-3            fs_1.6.5                 grid_4.3.3               #> [100] tidyr_1.3.1              rbibutils_2.3            edgeR_4.0.16             #> [103] colorspace_2.1-1         nlme_3.1-164             patchwork_1.3.0          #> [106] cli_3.6.3                textshaping_1.0.0        viridisLite_0.4.2        #> [109] svglite_2.1.3            ComplexHeatmap_2.18.0    corpcor_1.6.10           #> [112] gtable_0.3.6             sass_0.4.9               digest_0.6.37            #> [115] BiocGenerics_0.48.1      pbkrtest_0.5.3           ggrepel_0.9.6            #> [118] rjson_0.2.23             htmlwidgets_1.6.4        farver_2.1.2             #> [121] htmltools_0.5.8.1        pkgdown_2.1.1            lifecycle_1.0.4          #> [124] GlobalOptions_0.1.2      statmod_1.5.0            bit64_4.6.0-1            #> [127] MASS_7.3-60.0.1"},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq-analysis.html","id":"about-this-vignette","dir":"Articles","previous_headings":"","what":"About this vignette","title":"RNA-seq-analysis","text":"tutorial intends showcase explain capabilities SplineOmics package walking real complete RNA-seq example, start finish. SplineOmics explained detail get-started vignette, proteomics example covered. vignette focused showing RNA-seq data can used, , less details overall package provided .","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq-analysis.html","id":"data-overview","dir":"Articles","previous_headings":"About this vignette","what":"Data Overview","title":"RNA-seq-analysis","text":"dataset originates time-series RNA-seq experiment designed study Chinese Hamster Ovary (CHO) cells. experiment involved cultivating cells eight bioreactors, four bioreactors subjected temperature shift 146 hours (experimental condition) remaining four bioreactors maintained without temperature shift (control condition).","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq-analysis.html","id":"timepoints","dir":"Articles","previous_headings":"About this vignette > Data Overview","what":"Timepoints","title":"RNA-seq-analysis","text":"Samples collected 17 distinct time points throughout experiment, specifically: \"72h\", \"76h\", \"96h\", \"120h\", \"124h\", \"144h\", \"148h\", \"152h\", \"168h\", \"192h\", \"216h\", \"220h\", \"240h\", \"264h\", \"268h\", \"288h\", \"312h\" cultivation start. time point sampled eight bioreactors, resulting total 136 samples.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq-analysis.html","id":"additonal-effects-in-the-experiment-reactor-and-plate","dir":"Articles","previous_headings":"About this vignette > Data Overview","what":"Additonal effects in the experiment: Reactor and Plate","title":"RNA-seq-analysis","text":"experiment, two effects consider: Reactor Plate. refers different bioreactors used cell cultivation, can exhibit substantial variability. reactor assigned single condition: either constant temperature temperature-shifted. result, condition reactor confounded. Reactor treated fixed effect simply remove influence. Instead, treated random effect, allows us model variability appropriately. refers two separate plates used RNA-seq analysis samples. fully random design employed distribute samples across two plates, ensuring bias assignment. Plate considered batch effect respect condition (constant temperature vs. temperature-shifted). Since reactor blocked effect, variability due reactors directly separated condition. Instead, linear mixed models (LMMs) used attribute reactor random effect, allowing us account variability isolating effects condition. approach ensures analysis appropriately handles hierarchical structure data avoids incorrect conclusions. vignette, demonstrate use linear mixed models address challenges properly account reactor plate effects.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq-analysis.html","id":"further-info","dir":"Articles","previous_headings":"About this vignette > Data Overview","what":"Further info","title":"RNA-seq-analysis","text":"data matrix comprises genes rows samples columns, providing gene expression measurements time points. sample initially sequenced three technical replicates across two NovaSeq X flow cells. technical replicates collapsed generate final dataset used analysis. goal experiment investigate effect temperature shift CHO cell cultivation gene expression dynamics time. Note: original dataset, yet published time vignette’s creation. demonstration purposes, genes randomly shuffled, subset data included reduce dataset size.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq-analysis.html","id":"analysis-goals","dir":"Articles","previous_headings":"About this vignette","what":"Analysis Goals","title":"RNA-seq-analysis","text":"main objectives analysis : Identify genes significant temporal changes: Among thousands genes measured, goal identify exhibit significant changes expression time. Cluster genes based temporal patterns: Genes showing significant temporal changes (hits) grouped clusters based time-dependent expression patterns. Perform gene set enrichment analysis: cluster, gene set enrichment analysis conducted identify whether specific biological pathways processes - downregulated response feeding processes influenced temperature shift. Assess impact temperature shifts temporal patterns: analysis determine whether temporal patterns gene expression affected temperature shift, .e., whether gene expression dynamics differ time temperature shift conditions compared controls.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq-analysis.html","id":"note","dir":"Articles","previous_headings":"About this vignette > Analysis Goals","what":"Note","title":"RNA-seq-analysis","text":"documentation SplineOmics package functions can viewed ","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq-analysis.html","id":"load-the-packages","dir":"Articles","previous_headings":"","what":"Load the packages","title":"RNA-seq-analysis","text":"","code":"library(SplineOmics) library(readr) # For reading the meta CSV file library(here) # For managing filepaths #> here() starts at /home/thomas/Documents/PhD/projects/DGTX/SplineOmics_hub/SplineOmics library(dplyr) # For data manipulation #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(knitr) # For Showing the head of the data and the meta tables."},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq-analysis.html","id":"load-the-files","dir":"Articles","previous_headings":"","what":"Load the files","title":"RNA-seq-analysis","text":"","code":"data <- readRDS(xzfile(system.file(     \"extdata\",     \"rna_seq_data.rds.xz\",     package = \"SplineOmics\" )))  meta <- readr::read_csv(     system.file(         \"extdata\",         \"rna_seq_meta.csv\",         package = \"SplineOmics\"     ),     show_col_types = FALSE )"},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq-analysis.html","id":"show-top-rows-of-data","dir":"Articles","previous_headings":"Load the files","what":"Show top rows of data","title":"RNA-seq-analysis","text":"data: numeric matrix row represents gene (features) column corresponds sample. row names matrix contain gene identifiers, columns aligned sample metadata meta. matrix contains expression values 136 samples. Note study conducted blinded manner, samples randomly distributed across two plates RNA-seq analysis. result, sample numbers (e.g., 1, 2, 3, etc.) sequential order respect time, condition, plate. data analysis involving splines time, essential sort samples based time establish valid temporal sequence. Additionally, organizing data way improves clarity ensures consistency. Within time point, samples sorted condition (e.g., constant temp_shift) , subsequently, plate (e.g., plate_1 plate_2).","code":"kable(     head(data),     format = \"markdown\" )"},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq-analysis.html","id":"show-top-rows-of-meta","dir":"Articles","previous_headings":"Load the files","what":"Show top rows of meta","title":"RNA-seq-analysis","text":"meta: data frame containing metadata information samples data. row meta corresponds column data, ensuring 1:1 alignment metadata entries expression data samples. columns meta describe various attributes samples, SampleNr, Reactor, Time, Condition, Plate.","code":"kable(     head(meta),     format = \"markdown\" )"},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq-analysis.html","id":"preprocess-the-data","dir":"Articles","previous_headings":"","what":"Preprocess the data","title":"RNA-seq-analysis","text":"Filter data rows (genes) zero counts across samples. step standard preprocessing procedure RNA-seq data analysis, genes zero counts samples provide information downstream analyses.","code":"rows_before <- nrow(data)  # Filter data rows data <- data[rowSums(data) > 0, ]  rows_after <- nrow(data) rows_removed <- rows_before - rows_after  cat(sprintf(     \"Rows before filtering: %d\\nRows after filtering: %d\\nRows removed: %d\\n\",     rows_before,     rows_after,     rows_removed )) #> Rows before filtering: 1000 #> Rows after filtering: 944 #> Rows removed: 56"},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq-analysis.html","id":"perform-eda-exploratory-data-analysis","dir":"Articles","previous_headings":"","what":"Perform EDA (exploratory data analysis)","title":"RNA-seq-analysis","text":"can see HTML report explore_data() function batch-corrected data, report batch-corrected data.","code":"report_info <- list(     omics_data_type = \"RNA\",     data_description = \"RNA-seq data of CHO cells\",     data_collection_date = \"December 2024\",     analyst_name = \"Thomas Rauter\",     contact_info = \"thomas.rauter@plus.ac.at\",     project_name = \"DGTX\" )  report_dir <- here::here(     \"results\",     \"explore_data\" ) splineomics <- SplineOmics::create_splineomics(     data = data,     meta = meta,     report_info = report_info,     condition = \"Condition\", # Column of meta that contains the levels.     meta_batch_column = \"Plate\" # Remove batch effect for plotting. ) plots <- SplineOmics::explore_data(     splineomics = splineomics,     report_dir = report_dir )"},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq-analysis.html","id":"run-limma-spline-analysis","dir":"Articles","previous_headings":"","what":"Run limma spline analysis","title":"RNA-seq-analysis","text":"example, skipping finding best hyperparameters screen_limma_hyperparams() function, already clear idea use. Lets define parameters put SplineOmics object: Preprocess RNA-seq data limma::voom. method transforms raw RNA-seq counts log-counts per million (logCPM) modeling mean-variance relationship. assigns precision weights observation, ensuring accurate linear modeling RNA-seq data, often exhibits heteroscedasticity (varying variance across expression levels). normalize data, TMM (Trimmed Mean M-values) normalization applied using DGEList object edgeR package, correcting library size differences compositional biases. random effects included design, function automatically uses voomWithDreamWeights variancePartition package instead. method extends voom incorporating random effects model, allowing precise handling complex experimental designs repeated measures hierarchical structures. calculated weights account fixed random effects, providing robust results differential expression analysis. can customize normalization method providing specific normalization function normalize_func argument preprocess_rna_seq_data() function. details use feature, please refer function documentation available ‘References’ website. Additionally, use preprocess_rna_seq_data() optional RNA-seq data. Alternatively, can use limma::voom function directly pass resulting voom object rna_seq_data argument create_splineomics() update_splineomics(). Alongside , must pass $E data matrix data argument. general, long data argument contains actual data matrix rna_seq_data argument contains object compatible limma, data correctly processed. Run run_limma_splines() function: output function run_limma_splines() named list, element specific “category” results. Refer document explanation different result categories. elements list, containing elements respective limma topTables, either level comparison two levels. element “time_effect” list, element topTable p-value feature respective level reported. element “avrg_diff_conditions” list contains elements topTables, represent comparison average differences levels. element “interaction_condition_time” list contains elements topTables, represent interaction levels (includes time average differences)","code":"spline_params <- list(     spline_type = c(\"n\"), # natural cubic splines     dof = c(3L) # Degree of freedom of 3 for the splines. )  design <- \"~ 1 + Condition*Time + Plate + (1|Reactor)\"  splineomics <- SplineOmics::update_splineomics(     splineomics = splineomics,     data = data,     design = design,     # dream_params = dream_params,   if we would want to adjust dream()     # means limma \"borrows\" statistical power from the other levels     mode = \"integrated\",     spline_params = spline_params,     bp_cfg = c(         n_cores = 1,         blas_threads = 1     ) ) splineomics <- SplineOmics::preprocess_rna_seq_data(     splineomics = splineomics ) #>  #> Ensure the design has no Condition*Time interaction for mode == 'isolated', and includes it for mode == 'integrated'. #> Preprocessing RNA-seq data (normalization + voom)... #>  #> NOTE: If you manually stop run_limma_splines() in RStudio and  used parallelization for variancePartition::dream(), then those parallelized processes may continue running. Use your system's process manager to terminate them manually! #> Info Finished preprocessing RNA-seq #>         data in 0.2 minutes splineomics <- SplineOmics::run_limma_splines(     splineomics = splineomics ) #> Hint: The data contains negative values.  This may occur if the data has been  transformed (e.g., log-transformed or  normalized) and is valid in such cases.  Ensure that the data preprocessing aligns  with your analysis requirements. #>  #> Ensure the design has no Condition*Time interaction for mode == 'isolated', and includes it for mode == 'integrated'. #>  #> Fitting global model... #>  #> NOTE: If you manually stop run_limma_splines() in RStudio and  used parallelization for variancePartition::dream(), then those parallelized processes may continue running. Use your system's process manager to terminate them manually! #> Warning in .standard_transform(fit_eb, sigma = sqrt(fit_eb$s2.post)): No testable fixed effects were included in the model. #>   Running topTable() will fail. #> Warning in .standard_transform(fit_eb, sigma = sqrt(fit_eb$s2.post)): No testable fixed effects were included in the model. #>   Running topTable() will fail. #> Info Finished limma spline analysis in 0.5 min"},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq-analysis.html","id":"build-limma-report","dir":"Articles","previous_headings":"","what":"Build limma report","title":"RNA-seq-analysis","text":"topTables three limma result categories can used generate p-value histograms volcano plots. can view generated analysis report create_limma_report function .","code":"plots <- SplineOmics::create_limma_report(     splineomics = splineomics,     report_dir = withr::local_tempdir() ) #>  #>  Info Limma report generation completed successfully. #>  Your HTML reports are located in the directory:  /tmp/Rtmp0hAvtb/file9aca26446848 . #>  Please note that due to embedded files, the reports might be flagged as #>  harmful by other software. Rest assured that they provide no harm."},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq-analysis.html","id":"cluster-the-hits-significant-features","dir":"Articles","previous_headings":"","what":"Cluster the hits (significant features)","title":"RNA-seq-analysis","text":"obtained limma spline results, can cluster hits based temporal pattern (spline shape). define hit setting adj. p-value threshold every level. Hits features (genes ) adj. p-value threshold. Hierarchical clustering used place every hit one many clusters specified specific level. can view generated analysis report cluster_hits function . discussed , three limma result categories. cluster_hits() report shows results three, present (category 2 3 can generated design formula contains interaction effect).","code":"adj_pthresholds <- c(     0.05,     0.05 )  nr_clusters <- list(     constant = 4,     temp_shift = 4 )  report_dir <- here::here(     \"results\",     \"clustering_reports\" )  plot_info <- list( # For the spline plots     y_axis_label = \"log2 counts\",     time_unit = \"hours\",     treatment_labels = list(         temp_shift = \"temp shift\",         double_spline_plots = \"temp shift\"     ),     treatment_timepoints = list(         temp_shift = 146,         double_spline_plots = 146     ) )  genes <- rownames(data) genes <- sub(\"_\\\\d+$\", \"\", genes) # remove the _1 part from the end  plot_options <- list(     # When meta_replicate_column is not there, all datapoints are blue.     meta_replicate_column = \"Reactor\" # Colors the data points based on Reactor )  clustering_results <- SplineOmics::cluster_hits(     splineomics = splineomics,     adj_pthresholds = adj_pthresholds,     nr_clusters = nr_clusters,     genes = genes,     plot_info = plot_info,     max_hit_number = 20, # maximum number of plots per result category     plot_options = plot_options,     report_dir = withr::local_tempdir(),     adj_pthresh_avrg_diff_conditions = 0.05,     adj_pthresh_interaction_condition_time = 0.05 ) #> Hint: The data contains negative values.  This may occur if the data has been  transformed (e.g., log-transformed or  normalized) and is valid in such cases.  Ensure that the data preprocessing aligns  with your analysis requirements. #>  #> Ensure the design has no Condition*Time interaction for mode == 'isolated', and includes it for mode == 'integrated'. #>  #>  Performing the clustering... #> For the level:  constant #> For the level:  temp_shift #> Generating heatmap... #> Generating cluster mean splines for level:  constant #> Generating spline plots... #> Generating cluster mean splines for level:  temp_shift #> Generating spline plots... #> Generating report. This takes a few seconds. #>  #>  Info Clustering the hits completed successfully. #>  Your HTML reports are located in the directory:  /tmp/Rtmp0hAvtb/file9aca73f45133 . #>  Please note that due to embedded files, the reports might be flagged as #>  harmful by other software. Rest assured that they provide no harm. #> 25 clusters for the condition effect #>             (interaction between condition and time) #> Running this function took 0.5 min"},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq-analysis.html","id":"perform-gene-set-enrichment-analysis-gsea","dir":"Articles","previous_headings":"","what":"Perform gene set enrichment analysis (GSEA)","title":"RNA-seq-analysis","text":"clustered hits identified, subsequent step gain biological insights perform GSEA. , respective genes can assigned clustered hit, GSEA can carried . proceed, Enrichr databases choice need downloaded: Per default file placed current working directory, root dir R project. run GSEA, downloaded database file loaded dataframe. , optionally, clusterProfiler parameters report dir can specified. function create_gsea_report() runs GSEA using clusterProfiler, generates HTML report returns GSEA dotplots R. function runs clusterProfiler clusters levels, generates HTML report: can view generated analysis report run_gsea function .","code":"# Specify which databases you want to download from Enrichr gene_set_lib <- c(     \"WikiPathways_2019_Human\",     \"NCI-Nature_2016\",     \"TRRUST_Transcription_Factors_2019\",     \"MSigDB_Hallmark_2020\",     \"GO_Cellular_Component_2018\",     \"CORUM\",     \"KEGG_2019_Human\",     \"TRANSFAC_and_JASPAR_PWMs\",     \"ENCODE_and_ChEA_Consensus_TFs_from_ChIP-X\",     \"GO_Biological_Process_2018\",     \"GO_Molecular_Function_2018\",     \"Human_Gene_Atlas\" )  SplineOmics::download_enrichr_databases(     gene_set_lib = gene_set_lib,     output_dir = here::here(), # output into the current working dir (default)     filename = \"databases.tsv\" # just the name of the file, not the full path ) # Specify the filepath of the TSV file with the database info downloaded_dbs_filepath <- here::here(     \"databases.tsv\" )  # Load the file databases <- read.delim(     downloaded_dbs_filepath,     sep = \"\\t\",     stringsAsFactors = FALSE )  # Specify the clusterProfiler parameters clusterProfiler_params <- list(     pvalueCutoff = 0.05,     pAdjustMethod = \"BH\",     minGSSize = 10,     maxGSSize = 500,     qvalueCutoff = 0.2 )  report_dir <- here::here(     \"results\",     \"gsea_reports\" ) result <- SplineOmics::run_gsea(     # A dataframe with three columns: feature, cluster, and gene. Feature     # contains     # the integer index of the feature, cluster the integer specifying the     # cluster     # number, and gene the string of the gene, such as \"CLSTN2\".     cluster_table = clustering_results[[\"cluster_table\"]],     databases = databases,     clusterProfiler_params = clusterProfiler_params,     report_info = report_info,     cluster_hits_report_name = \"not meaningful here\",     report_dir = report_dir )"},{"path":"https://csbg.github.io/SplineOmics/articles/RNA-seq-analysis.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"RNA-seq-analysis","text":"","code":"#> R version 4.5.1 (2025-06-13) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.5 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.10.0  #> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=de_AT.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=de_AT.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=de_AT.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=de_AT.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: Europe/Vienna #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices datasets  utils     methods   base      #>  #> other attached packages: #> [1] knitr_1.50        dplyr_1.1.4       here_1.0.1        readr_2.1.5       #> [5] SplineOmics_0.3.7 #>  #> loaded via a namespace (and not attached): #>   [1] RColorBrewer_1.1-3       rstudioapi_0.17.1        jsonlite_2.0.0           #>   [4] shape_1.4.6.1            magrittr_2.0.3           farver_2.1.2             #>   [7] nloptr_2.2.1             rmarkdown_2.29           GlobalOptions_0.1.2      #>  [10] fs_1.6.6                 ragg_1.4.0               vctrs_0.6.5              #>  [13] minqa_1.2.8              base64enc_0.1-3          htmltools_0.5.8.1        #>  [16] progress_1.2.3           broom_1.0.8              Formula_1.2-5            #>  [19] variancePartition_1.38.0 sass_0.4.10              KernSmooth_2.23-26       #>  [22] bslib_0.9.0              htmlwidgets_1.6.4        desc_1.4.3               #>  [25] pbkrtest_0.5.4           plyr_1.8.9               cachem_1.1.0             #>  [28] lifecycle_1.0.4          iterators_1.0.14         pkgconfig_2.0.3          #>  [31] Matrix_1.7-3             R6_2.6.1                 fastmap_1.2.0            #>  [34] rbibutils_2.3            clue_0.3-66              digest_0.6.37            #>  [37] numDeriv_2016.8-1.1      colorspace_2.1-1         S4Vectors_0.46.0         #>  [40] rprojroot_2.1.0          textshaping_1.0.1        labeling_0.4.3           #>  [43] abind_1.4-8              compiler_4.5.1           withr_3.0.2              #>  [46] bit64_4.6.0-1            aod_1.3.3                doParallel_1.0.17        #>  [49] backports_1.5.0          BiocParallel_1.42.1      carData_3.0-5            #>  [52] gplots_3.2.0             MASS_7.3-65              rjson_0.2.23             #>  [55] corpcor_1.6.10           gtools_3.9.5             caTools_1.18.3           #>  [58] tools_4.5.1              zip_2.3.3                remaCor_0.0.18           #>  [61] glue_1.8.0               nlme_3.1-168             grid_4.5.1               #>  [64] cluster_2.1.8.1          reshape2_1.4.4           generics_0.1.4           #>  [67] gtable_0.3.6             tzdb_0.5.0               tidyr_1.3.1              #>  [70] hms_1.1.3                car_3.1-3                BiocGenerics_0.54.0      #>  [73] ggrepel_0.9.6            foreach_1.5.2            pillar_1.11.0            #>  [76] stringr_1.5.1            vroom_1.6.5              limma_3.64.1             #>  [79] circlize_0.4.16          splines_4.5.1            lattice_0.22-5           #>  [82] renv_1.1.5               gmp_0.7-5                bit_4.6.0                #>  [85] tidyselect_1.2.1         ComplexHeatmap_2.24.1    locfit_1.5-9.12          #>  [88] pbapply_1.7-2            reformulas_0.4.1         IRanges_2.42.0           #>  [91] edgeR_4.6.3              svglite_2.2.1            RhpcBLASctl_0.23-42      #>  [94] stats4_4.5.1             xfun_0.52                Biobase_2.68.0           #>  [97] statmod_1.5.0            matrixStats_1.5.0        stringi_1.8.7            #> [100] yaml_2.3.10              boot_1.3-31              evaluate_1.0.4           #> [103] codetools_0.2-19         tibble_3.3.0             BiocManager_1.30.26      #> [106] cli_3.6.5                systemfonts_1.2.3        Rdpack_2.6.4             #> [109] jquerylib_0.1.4          Rcpp_1.1.0               EnvStats_3.1.0           #> [112] png_0.1-8                parallel_4.5.1           pkgdown_2.1.3            #> [115] ggplot2_3.5.2            prettyunits_1.2.0        ClusterR_1.3.3           #> [118] bitops_1.0-9             lme4_1.1-37              mvtnorm_1.3-3            #> [121] lmerTest_3.1-3           scales_1.4.0             purrr_1.1.0              #> [124] crayon_1.5.3             writexl_1.5.4            fANCOVA_0.6-1            #> [127] GetoptLong_1.0.5         rlang_1.1.6"},{"path":"https://csbg.github.io/SplineOmics/articles/design_limma_design_formula.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Designing a Limma Design Formula","text":"limma package powerful tool analyzing gene expression data, particularly context microarrays RNA-seq. critical part limma analysis design formula, specifies experimental conditions contrasts interested . vignette provides guide construct limma design formula correctly, examples best practices.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/design_limma_design_formula.html","id":"understanding-the-design-matrix","dir":"Articles","previous_headings":"","what":"Understanding the Design Matrix","title":"Designing a Limma Design Formula","text":"design matrix crucial component differential expression analysis using limma. defines relationships samples experimental conditions (factors) investigation. well-constructed design matrix allows limma correctly model effects factors estimate differential expression.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/design_limma_design_formula.html","id":"basic-design-formula","dir":"Articles","previous_headings":"Understanding the Design Matrix","what":"Basic Design Formula","title":"Designing a Limma Design Formula","text":"simplest form, design formula includes one factor, treatment vs. control. experiment involves comparing two conditions (e.g., treated vs. untreated), can create design formula like : , condition factor variable metadata (meta) represents experimental groups. Important Points: ~ 0 + condition syntax tells R create design matrix without intercept (.e., matrix level factor condition represented column). approach helpful want make direct comparisons conditions. Including Multiple Factors experiment includes one factor, time points treatments, can include design formula: formula assumes effects treatment time additive (interaction). suspect interaction treatment time might important, can include interaction term: Interaction Term: treatment * time term includes main effects treatment time interaction. Blocking Factors experiments, might technical biological replicates, blocking factors (e.g., batch effects). can include blocking factors design formula: formula accounts treatment batch effects, ensuring analysis confounded batch effects.","code":"design <- model.matrix(~ 0 + condition, data = meta) design <- model.matrix(~ 0 + treatment + time, data = meta) design <- model.matrix(~ 0 + treatment * time, data = meta) design <- model.matrix(~ 0 + treatment + batch, data = meta)"},{"path":"https://csbg.github.io/SplineOmics/articles/design_limma_design_formula.html","id":"creating-contrasts","dir":"Articles","previous_headings":"","what":"Creating Contrasts","title":"Designing a Limma Design Formula","text":"defining design matrix, likely want make specific comparisons conditions. contrasts come . example, compare treated vs. untreated, can define contrast matrix:","code":"contrast <- makeContrasts(   treated_vs_untreated = treatmenttreated - treatmentuntreated,   levels = design )"},{"path":"https://csbg.github.io/SplineOmics/articles/design_limma_design_formula.html","id":"practical-example","dir":"Articles","previous_headings":"","what":"Practical Example","title":"Designing a Limma Design Formula","text":"Let’s say experiment two treatments (B) two time points (early late). metadata might look like : design formula : contrast compare treatment early time point treatment B late time point :","code":"meta <- data.frame(   sample = c(\"S1\", \"S2\", \"S3\", \"S4\"),   treatment = factor(c(\"A\", \"A\", \"B\", \"B\")),   time = factor(c(\"early\", \"late\", \"early\", \"late\")) ) design <- model.matrix(~ 0 + treatment * time, data = meta) contrast <- makeContrasts(   A_early_vs_B_late = (treatmentA:timeearly) - (treatmentB:timelate),   levels = design )"},{"path":"https://csbg.github.io/SplineOmics/articles/design_limma_design_formula.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Designing a Limma Design Formula","text":"Starting ~ 0 means intercept (.e., including baseline group model). Starting ~ 1 (just ~) includes intercept (baseline group). Factors separated + indicate additive effects. example, ~ 0 + factor1 + factor2 means modeling effects factor1 factor2 additively, without considering interactions. * symbol used model interactions factors. example, ~ 0 + factor1 * factor2 include factor1, factor2, interaction (factor1:factor2). Alternatively, can specify interaction explicitly :. example, ~ 0 + factor1 + factor2 + factor1:factor2 equivalent ~ 0 + factor1 * factor2.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/design_limma_design_formula.html","id":"some-examples","dir":"Articles","previous_headings":"Summary","what":"Some examples:","title":"Designing a Limma Design Formula","text":"~ 0 + factor1 + factor2: Additive model without intercept. ~ 1 + factor1 + factor2: Additive model intercept. ~ 0 + factor1 * factor2: Model main effects interaction, intercept. ~ 1 + factor1 * factor2: Model intercept, main effects, interaction.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/design_limma_design_formula.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Designing a Limma Design Formula","text":"","code":"## R version 4.5.1 (2025-06-13) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 22.04.5 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.10.0  ## LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=de_AT.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=de_AT.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=de_AT.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=de_AT.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: Europe/Vienna ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices datasets  utils     methods   base      ##  ## loaded via a namespace (and not attached): ##  [1] digest_0.6.37       desc_1.4.3          R6_2.6.1            ##  [4] fastmap_1.2.0       xfun_0.52           cachem_1.1.0        ##  [7] knitr_1.50          htmltools_0.5.8.1   rmarkdown_2.29      ## [10] lifecycle_1.0.4     cli_3.6.5           sass_0.4.10         ## [13] pkgdown_2.1.3       textshaping_1.0.1   jquerylib_0.1.4     ## [16] renv_1.1.5          systemfonts_1.2.3   compiler_4.5.1      ## [19] rstudioapi_0.17.1   tools_4.5.1         ragg_1.4.0          ## [22] bslib_0.9.0         evaluate_1.0.4      yaml_2.3.10         ## [25] BiocManager_1.30.26 jsonlite_2.0.0      htmlwidgets_1.6.4   ## [28] rlang_1.1.6         fs_1.6.6"},{"path":[]},{"path":[]},{"path":"https://csbg.github.io/SplineOmics/articles/faq.html","id":"does-splineomics-handle-missing-values","dir":"Articles","previous_headings":"Frequently Asked Questions > FAQ on data pre-processing","what":"Does SplineOmics handle missing values?","title":"FAQ","text":"Yes. SplineOmics can handle missing values gracefully uses limma statistical engine model fitting differential analysis. limma package designed work incomplete expression matrices — missing values simply ignored estimating model parameters computing contrasts, without causing errors. means necessarily need impute remove features missing entries running SplineOmics. However, feature many missing values (example, across samples), consider removing .","code":""},{"path":[]},{"path":"https://csbg.github.io/SplineOmics/articles/faq.html","id":"which-design-formula-should-i-use","dir":"Articles","previous_headings":"Frequently Asked Questions > FAQ on parameter selection","what":"Which design formula should I use?","title":"FAQ","text":"choice design formula depends experimental setup whether want model conditions independently jointly. Isolated designs (interaction condition time) Use want analyse condition completely separately, example, get independent spline fits treatment. case, SplineOmics simply process dataset sequentially convenience, need run code twice. approach ideal expect conditions share information influence one another. Integrated designs (conditions modelled jointly time interaction) Use want fit conditions single model allow time trends differ interaction term condition time. approach, datasets modelled jointly can borrow statistical power , leading stable variance estimates sensitive detection shared temporal patterns. also enables access full range limma result categories, including category 2 category 3 results (see vignette limma result categories).","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/faq.html","id":"should-i-use-b-splines-or-natural-cubic-splines","dir":"Articles","previous_headings":"Frequently Asked Questions > FAQ on parameter selection","what":"Should I use B-splines or natural cubic splines?","title":"FAQ","text":"spline types can model smooth trends across time another continuous variable, differ local flexibility . B-splines locally adaptive: changing one knot affects fitted curve small neighbourhood around knot. makes ideal expect local variations (example, short-term biological responses) want rest curve remain stable. trade-B-splines typically use degrees freedom, model can become complex. Natural cubic splines enforce global smoothness: basis function extends across entire range, adjusting one part curve slightly influences whole fit. use fewer degrees freedom can stable expect overall smooth behaviour, less suitable local detail important. short: > Choose B-splines local flexibility matters, natural cubic > splines want smoother, global trend.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/faq.html","id":"how-many-degrees-of-freedom-should-i-use-for-the-splines","dir":"Articles","previous_headings":"Frequently Asked Questions > FAQ on parameter selection","what":"How many degrees of freedom should I use for the splines?","title":"FAQ","text":"single optimal choice — best number degrees freedom (dof) depends smoothness complexity data. practice, 2 3 degrees freedom work well cases. Using degrees freedom makes spline wigglier increases risk overfitting, using 1 degree freedom usually restrictive capture meaningful trends. set degrees freedom 0, SplineOmics automatically determine optimal value using leave-one-cross-validation, selecting dof provides best predictive performance dataset.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/faq.html","id":"should-i-use-array-weights","dir":"Articles","previous_headings":"Frequently Asked Questions > FAQ on parameter selection","what":"Should I use array weights?","title":"FAQ","text":"Yes, cases recommended. Since SplineOmics builds limma, inherits support array weights, help correct heteroskedasticity (unequal variances) often present time-series data. estimating quality weight sample, SplineOmics can give less influence noisier samples weight consistent ones, resulting smoother spline fits higher statistical power.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/faq.html","id":"how-many-clusters-should-i-use","dir":"Articles","previous_headings":"Frequently Asked Questions > FAQ on parameter selection","what":"How many clusters should I use?","title":"FAQ","text":"universal rule choosing optimal number clusters. Using clusters makes cluster purer — centroid represents members precisely — also makes downstream interpretation complex fragmented. help choice, SplineOmics provides several aids: cluster, reports variance explained cluster centroid, mean value distribution histogram, guidance interpret values. individual feature, shows well represented cluster centroid. can specify range custom set cluster numbers (example, 2–10 {2, 5, 6}), SplineOmics automatically selects best one using Bayesian Information Criterion (BIC): BIC=nobslog(tot_withinnobs)+klog(nobs)×p \\text{BIC} = n_{\\text{obs}}  \\log\\left(\\frac{\\text{tot\\_within}}{n_{\\text{obs}}}\\right)  + k \\log(n_{\\text{obs}}) \\times p model lowest BIC chosen optimal clustering configuration.","code":""},{"path":[]},{"path":"https://csbg.github.io/SplineOmics/articles/faq.html","id":"can-splineomics-handle-datasets-with-more-than-two-conditions","dir":"Articles","previous_headings":"Frequently Asked Questions > General FAQ","what":"Can SplineOmics handle datasets with more than two conditions?","title":"FAQ","text":"directly. SplineOmics designed pairwise comparisons conditions. can, however, analyse experiments two conditions either: using isolated design, condition analysed separately, performing pairwise comparisons among conditions interest. approaches allow explore multiple conditions, integrate single joint model. Integrated designs currently limited comparisons two conditions time.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/faq.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"FAQ","text":"","code":"## R version 4.5.1 (2025-06-13) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 22.04.5 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.10.0  ## LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=de_AT.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=de_AT.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=de_AT.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=de_AT.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: Europe/Vienna ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices datasets  utils     methods   base      ##  ## loaded via a namespace (and not attached): ##  [1] digest_0.6.37       desc_1.4.3          R6_2.6.1            ##  [4] fastmap_1.2.0       xfun_0.52           cachem_1.1.0        ##  [7] knitr_1.50          htmltools_0.5.8.1   rmarkdown_2.29      ## [10] lifecycle_1.0.4     cli_3.6.5           sass_0.4.10         ## [13] pkgdown_2.1.3       textshaping_1.0.1   jquerylib_0.1.4     ## [16] renv_1.1.5          systemfonts_1.2.3   compiler_4.5.1      ## [19] rstudioapi_0.17.1   tools_4.5.1         ragg_1.4.0          ## [22] bslib_0.9.0         evaluate_1.0.4      yaml_2.3.10         ## [25] BiocManager_1.30.26 jsonlite_2.0.0      htmlwidgets_1.6.4   ## [28] rlang_1.1.6         fs_1.6.6"},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"about-this-tutorial","dir":"Articles","previous_headings":"","what":"About this tutorial","title":"get-started","text":"tutorial intends showcase explain capabilities SplineOmics package walking real complete example, start finish.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"example-overview","dir":"Articles","previous_headings":"About this tutorial","what":"Example Overview","title":"get-started","text":"example involves time-series proteomics experiment, CHO (chinese hamster ovary) cells cultivated three bioreactors (three biological replicates). experiment includes following setup: Samples taken exponential stationary growth phases. 60 minutes feeding 15, 60, 90, 120, 240 minutes feeding","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"analysis-goals","dir":"Articles","previous_headings":"About this tutorial","what":"Analysis Goals","title":"get-started","text":"main goals analysis : Identify proteins significant temporal changes: 7162 cellular proteins, objective detect proteins show significant change time CHO cells fed (.e., impact feeding). Cluster hits based temporal patterns: proteins (hits) significant temporal changes clustered according time-based patterns. Perform gene set enrichment analysis: cluster, gene set enrichment analysis performed determine specific biological processes - downregulated feeding.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"note","dir":"Articles","previous_headings":"About this tutorial","what":"Note","title":"get-started","text":"documentation SplineOmics package functions can viewed ","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"load-the-packages","dir":"Articles","previous_headings":"","what":"Load the packages","title":"get-started","text":"","code":"# library(SplineOmics) library(devtools) #> Loading required package: usethis devtools::load_all() #> ℹ Loading SplineOmics library(here) # For managing filepaths #> here() starts at /home/thomas/Documents/PhD/projects/DGTX/SplineOmics_hub/SplineOmics library(dplyr) # For data manipulation #>  #> Attaching package: 'dplyr' #> The following object is masked from 'package:testthat': #>  #>     matches #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(knitr) # For Showing the head of the data and the meta tables. library(org.Mm.eg.db) # BioConductor database #> Loading required package: AnnotationDbi #> Loading required package: stats4 #> Loading required package: BiocGenerics #> Loading required package: generics #>  #> Attaching package: 'generics' #> The following object is masked from 'package:dplyr': #>  #>     explain #> The following objects are masked from 'package:base': #>  #>     as.difftime, as.factor, as.ordered, intersect, is.element, setdiff, #>     setequal, union #>  #> Attaching package: 'BiocGenerics' #> The following object is masked from 'package:dplyr': #>  #>     combine #> The following objects are masked from 'package:SplineOmics': #>  #>     sd, var #> The following objects are masked from 'package:stats': #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from 'package:base': #>  #>     anyDuplicated, aperm, append, as.data.frame, basename, cbind, #>     colnames, dirname, do.call, duplicated, eval, evalq, Filter, Find, #>     get, grep, grepl, is.unsorted, lapply, Map, mapply, match, mget, #>     order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank, #>     rbind, Reduce, rownames, sapply, saveRDS, table, tapply, unique, #>     unsplit, which.max, which.min #> Loading required package: Biobase #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. #> Loading required package: IRanges #> Loading required package: S4Vectors #>  #> Attaching package: 'S4Vectors' #> The following objects are masked from 'package:dplyr': #>  #>     first, rename #> The following object is masked from 'package:SplineOmics': #>  #>     rename #> The following object is masked from 'package:utils': #>  #>     findMatches #> The following objects are masked from 'package:base': #>  #>     expand.grid, I, unname #>  #> Attaching package: 'IRanges' #> The following objects are masked from 'package:dplyr': #>  #>     collapse, desc, slice #>  #> Attaching package: 'AnnotationDbi' #> The following object is masked from 'package:dplyr': #>  #>     select #> The following object is masked from 'package:SplineOmics': #>  #>     select #>"},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"load-the-files","dir":"Articles","previous_headings":"","what":"Load the files","title":"get-started","text":"example, proteomics_data.rds file contains numeric values (intensities) also feature descriptions, gene protein name (= annotation part). Usually, load data example Excel file, .rds file compressed, reason format chosen limit size SplineOmics package. file meta.xlsx contains meta information, descriptions columns numeric values data. (example files part package don’t present system). Please note dataset actual experimental dataset, annotation information, gene names, removed since yet published time making SplineOmics package public. Instead, dataset includes randomly generated gene symbols gene names corresponding Cricetulus griseus (Chinese Hamster) row. intended demonstrate functionality package. , dataset subsamples 1165 proteins limit size package. left part data contains numeric values, right part annotation info, can copied separate dataframe, shown .","code":"data <- readRDS(xzfile(system.file(     \"extdata\",     \"proteomics_data.rds.xz\",     package = \"SplineOmics\" )))  meta <- read.csv(     system.file(         \"extdata\",         \"proteomics_meta.csv\",         package = \"SplineOmics\"     ),     stringsAsFactors = FALSE )  # Extract the annotation part from the dataframe. first_na_col <- which(is.na(data[1, ]))[1] annotation <- data |>     dplyr::select((first_na_col + 1):ncol(data)) |>     dplyr::slice(-c(1:3))"},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"show-top-rows-of-data","dir":"Articles","previous_headings":"Load the files","what":"Show top rows of data","title":"get-started","text":"","code":"kable(     head(data),     format = \"markdown\" )"},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"show-top-rows-of-meta","dir":"Articles","previous_headings":"Load the files","what":"Show top rows of meta","title":"get-started","text":"","code":"kable(     head(meta),     format = \"markdown\" )"},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"show-top-rows-of-annotation","dir":"Articles","previous_headings":"Load the files","what":"Show top rows of annotation","title":"get-started","text":"Three comments characteristics input data : data must contain NA values special values, must consist numbers. example, original proteomics data contained NA values, resolved case imputation (replacing NA values numbers). features data ideally normally distributed analyzed limma, fits linear model feature. models rely statistical tests assume normality. Although limma can still function data normally distributed, resulting p-values may become less reliable. reason, strongly recommended transform data using techniques log2 transformation features deviate normality. Proper transformation helps ensure assumptions underlying statistical tests met, leading accurate trustworthy results. samples data independent . Linear models, used limma, assume observations (samples) independent. dependency samples (e.g., repeated measurements subject), assumption violated, can lead incorrect statistical inferences.","code":"kable(     head(annotation),     format = \"markdown\" )"},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"bring-the-inputs-into-the-standardized-format","dir":"Articles","previous_headings":"Load the files","what":"Bring the Inputs into the Standardized Format","title":"get-started","text":"Since data format required SplineOmics package, needs processing. SplineOmics package requires data numeric matrix, element allowed anything else number. can done commands R, file specific structure, function extract_data() can handle easily","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"usage-of-the-extract_data-function","dir":"Articles","previous_headings":"Load the files > Bring the Inputs into the Standardized Format","what":"Usage of the extract_data() function","title":"get-started","text":"extract_data() can: Extract data matrix field specifying location corners matrix. Create column headers information written cells respective columns data matrix field. annotation columns specified, rowheaders increasing numbers. annotation columns specified (like \"First.Protein.Description\" \"ID\" example), combined form rowheaders (feature names).","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"usage-in-plotting","dir":"Articles","previous_headings":"Load the files > Bring the Inputs into the Standardized Format","what":"Usage in Plotting","title":"get-started","text":"generated rowheaders used label plots feature shown individually, : Spline plots datapoints individual feature.","code":"data <- SplineOmics::extract_data(     # The dataframe with the numbers on the left and info on the right.     data = data,     # Use this annotation column for the feature names.     feature_name_columns = c(\"Gene_name\"),     use_row_index = TRUE,     top_row = 4,     bottom_row = 1165,     right_col = 37,     left_col = 2 )"},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"perform-eda-exploratory-data-analysis","dir":"Articles","previous_headings":"","what":"Perform EDA (exploratory data analysis)","title":"get-started","text":"Now data required format (numeric matrix) can go . first step analyzing data typically Exploratory Data Analysis (EDA). EDA involves summarizing main characteristics data, often visualizations.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"common-eda-plots","dir":"Articles","previous_headings":"Perform EDA (exploratory data analysis)","what":"Common EDA Plots","title":"get-started","text":"common types EDA plots include: Density distributions Boxplots PCA (Principal Component Analysis) Correlation heatmaps , can generate plots lines R code. However, prefer, convenience, explore_data() function can handle .","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"using-explore_data-for-eda","dir":"Articles","previous_headings":"Perform EDA (exploratory data analysis)","what":"Using explore_data() for EDA","title":"get-started","text":"SplineOmics package provides function explore_data() perform EDA. function requires following arguments: data: numeric data matrix. meta: metadata table. condition: name column metadata contains levels experiment (e.g., “Exponential” “Stationary”). report_info: list contains general information analysis, name analyst datatype (e.g. proteomics)","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"optional-arguments","dir":"Articles","previous_headings":"Perform EDA (exploratory data analysis)","what":"Optional Arguments","title":"get-started","text":"addition required arguments, explore_data() offers several optional arguments: meta_batch_column: name column contains first batch effect. meta_batch2_column: name column contains second batch effect. least one batch column provided, function : Use removeBatchEffect() function limma remove batch effect data plotting. Generate two EDA HTML reports: one uncorrected data one batch-corrected data.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"output-and-report-options","dir":"Articles","previous_headings":"Perform EDA (exploratory data analysis)","what":"Output and Report Options","title":"get-started","text":"default, reports saved current working directory, location can changed using report_dir argument. function also returns plots generated analysis, can modify according needs. want report generated, can set report argument FALSE (example just want figures R environment)","code":"# Those fields are mandatory, because we believe that when such a report is # opened after half a year, those infos can be very helpful. report_info <- list(     omics_data_type = \"PTX\",     data_description = \"Proteomics data of CHO cells\",     data_collection_date = \"February 2024\",     analyst_name = \"Thomas Rauter\",     contact_info = \"thomas.rauter@plus.ac.at\",     project_name = \"DGTX\" )  report_dir <- here::here(     \"results\",     \"explore_data\" )"},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"splineomics-object","dir":"Articles","previous_headings":"Perform EDA (exploratory data analysis)","what":"SplineOmics Object","title":"get-started","text":"SplineOmics package, multiple functions take arguments input. make easier avoid errors, decided arguments provided individually functions, stored R6 object (type ‘SplineOmics’) object passed functions. Additionally, functions generate intermediate output, just necessary next function workflow, also just passed along updating SplineOmics object. don’t worry .","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"functionality","dir":"Articles","previous_headings":"Perform EDA (exploratory data analysis) > SplineOmics Object","what":"Functionality","title":"get-started","text":"SplineOmics object can seen container necessary arguments stored. function retrieves required arguments object potentially adds new data results back .","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"documentation","dir":"Articles","previous_headings":"Perform EDA (exploratory data analysis) > SplineOmics Object","what":"Documentation","title":"get-started","text":"documentation function creates SplineOmics object can found documentation function updates [documentation function takes SplineOmics object input specifies arguments must present SplineOmics object passed respective function.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"required-arguments-create_splineomics","dir":"Articles","previous_headings":"Perform EDA (exploratory data analysis)","what":"Required Arguments create_splineomics()","title":"get-started","text":"data: matrix data meta: Metadata associated data. condition: Meta column name levels (e.g., Exponential Stationary).","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"optional-arguments-create_splineomics","dir":"Articles","previous_headings":"Perform EDA (exploratory data analysis)","what":"Optional Arguments create_splineomics()","title":"get-started","text":"rna_seq_data: object containing preprocessed RNA-seq data, output limma::voom function. annotation: dataframe feature descriptions data. report_info: list containing general information analysis. meta_batch_column: Column meta batch information. meta_batch2_column: Column secondary meta batch information. design: limma design formula spline_params: Parameters spline functions. Now SplineOmics object defined, can perform exploratory data analysis. can see HTML report explore_data() function batch-corrected data, report batch-corrected data. Note report linked vignette might created older version SplineOmics, updated yet. EDA plots can tell range things. plots HTML report grouped three categories: Distribution Variability Analysis, Time Series Analysis, Dimensionality Reduction Clustering. look correlation heatmaps HTML report, can see samples E12_TP05_Exponential E10_TP10_Stationary stick . Seeing , might want remove data.","code":"# splineomics now contains the SplineOmics object. splineomics <- SplineOmics::create_splineomics(     data = data,     meta = meta,     annotation = annotation,     report_info = report_info,     condition = \"Phase\", # Column of meta that contains the levels.     meta_batch_column = \"Reactor\" # For batch effect removal )  # Special print.SplineOmics function leads to selective printing print(splineomics) #> data:SplineOmics Object #> ------------------- #> Number of features (rows): 1162  #> Number of samples (columns): 36  #> Meta data columns: 5  #> First few meta columns: #>              Sample.ID Reactor Time.Point       Phase Time #> 1 E09_TP01_Exponential     E09       TP01 Exponential  -60 #> 2 E10_TP01_Exponential     E10       TP01 Exponential  -60 #> 3 E12_TP01_Exponential     E12       TP01 Exponential  -60 #> Condition: Phase  #> No RNA-seq data provided. #> Annotation provided with 1162 entries. #> No spline parameters set. #> P-value adjustment method: BH plots <- SplineOmics::explore_data(     splineomics = splineomics, # SplineOmics object     report_dir = withr::local_tempdir() ) #> Making density plots... #> Making violin plots... #> Making PCA plots... #> Making MDS plots... #> Making correlation heatmaps... #> Subsampled to top 1000 most variable features (after filtering rows with > 20% missing) for correlation heatmap. #> Making mean correlation with time plots... #> Making lag1 differences plots... #> Making first lag auto-correlation with time plots... #> Making cv plots... #> Making density plots... #> Making violin plots... #> Making PCA plots... #> Making MDS plots... #> Making correlation heatmaps... #> Subsampled to top 1000 most variable features (after filtering rows with > 20% missing) for correlation heatmap. #> Making mean correlation with time plots... #> Making lag1 differences plots... #> Making first lag auto-correlation with time plots... #> Making cv plots... #>  #>  Info Exploratory data analysis completed successfully. #>  Your HTML reports are located in the directory:  /tmp/RtmpSM7ukX/file91d43df6fe27 . #>  Please note that due to embedded files, the reports might be flagged as #>  harmful by other software. Rest assured that they provide no harm."},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"run-limma-spline-analysis","dir":"Articles","previous_headings":"","what":"Run limma spline analysis","title":"get-started","text":"Now decide parameters run limma spline analysis. design formula, must specify either ‘isolated’ ‘integrated’. Isolated means limma determines results level using data level. Integrated means limma determines results levels using full dataset (levels). integrated mode, condition column (Phase) must included design. Isolated means limma uses part dataset belongs level obtain results level. generate limma result categories 2 3 () Run run_limma_splines() function updated SplineOmics object: output function run_limma_splines() named list, element specific “category” results. Refer document explanation different result categories. elements list, containing elements respective limma topTables, either level comparison two levels. element “time_effect” list, element topTable p-value feature respective level reported. element “avrg_diff_conditions” list contains elements topTables, represent comparison average differences levels. element “interaction_condition_time” list contains elements topTables, represent interaction levels (includes time average differences)","code":"splineomics <- SplineOmics::update_splineomics(     splineomics = splineomics,     design = \"~ 1 + Phase*Time + Reactor\", # best design formula     mode = \"integrated\", # means limma uses the full data for each condition.     # States explicitly that there is no problem of heteroscedasticity and     # therefore, this does not need to be adressed. Setting it to TRUE would mean     # the opposite, and when setting it to NULL, it means it should be handled     # implicitly. For details, see Reference     # documentation of the create_splineomics() function.     use_array_weights = FALSE,     spline_params = list(         spline_type = c(\"n\"), # natural cubic splines (take these if unsure)         dof = c(2L) # If you are unsure about which dof, start with 2 and increase     ) ) splineomics <- SplineOmics::run_limma_splines(     splineomics = splineomics ) #>  #> Ensure the design has no Condition*Time interaction for mode == 'isolated', and includes it for mode == 'integrated'. #>  #> Fitting global model... #> Info Finished limma spline analysis in 0.0 min"},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"build-limma-report","dir":"Articles","previous_headings":"","what":"Build limma report","title":"get-started","text":"topTables three limma result categories can used generate p-value histograms volcano plots. can view generated analysis report create_limma_report function . report contains p-value histograms three limma result categories volcano plot category 2. Embedded file downloadable limma topTables results category 1 mode ‘isolated’ also results category 2 3 mode ‘integrated’. Note upcoming cluster_hits() function report, embedded file contain clustered significant features result category 1.","code":"plots <- SplineOmics::create_limma_report(     splineomics = splineomics,     report_dir = withr::local_tempdir() ) #>  #>  Info Limma report generation completed successfully. #>  Your HTML reports are located in the directory:  /tmp/RtmpSM7ukX/file91d4616f2981 . #>  Please note that due to embedded files, the reports might be flagged as #>  harmful by other software. Rest assured that they provide no harm."},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"cluster-the-hits-significant-features","dir":"Articles","previous_headings":"","what":"Cluster the hits (significant features)","title":"get-started","text":"obtained limma spline results, can cluster hits based temporal pattern (spline shape). define hit setting adj. p-value threshold every level. Hits features (e.g. proteins) adj. p-value threshold. Hierarchical clustering used place every hit one many clusters specified specific level. Run function: can view generated analysis report cluster_hits function . discussed , three limma result categories. cluster_hits() report shows results three, present (category 2 3 can generated design formula contains interaction effect).","code":"# Important note: When you define parameters for the levels, always define them # in the order those levels appear in the meta condition column! Otherwise, # there will be a mixup!  adj_pthresholds <- c(     0.05,     0.05 )  # The amount of clusters can be a fixed number (e.g. 6) or a range. When you # specify a range (e.g. 2:3, which corresponds to 2 3 in the vector) then the # cluster_hits() function tries all those cluster numbers and picks the one with # the highest silhouette score (automatic cluster number identification). When # you don't want to have a clustering for a level, write 1 for the cluster # number for that level. nr_clusters <- list(     Exponential = 6, # specifically 6 clusters for the exponential phase level     Stationary = 2:3 # range of cluster numbers for the stationary phase level )  plot_info <- list( # For the spline plots     y_axis_label = \"log2 intensity\",     time_unit = \"min\", # our measurements were in minutes     treatment_labels = list(         Exponential = \"feeding\",         Stationary = \"feeding\",         double_spline_plots = \"feeding\"     ),     treatment_timepoints = list(         Exponential = 0,         Stationary = 0,         double_spline_plots = 0     ) )   # Get all the gene names. They are used for generating files # which contents can be directly used as the input for the Enrichr webtool, # if you prefer to manually perform the enrichment. Those files are # embedded in the output HTML report and can be downloaded from there. gene_column_name <- \"Gene_symbol\" genes <- annotation[[gene_column_name]]  plot_options <- list(     # When meta_replicate_column is not there, all datapoints are blue.     meta_replicate_column = \"Reactor\", # Colors the data points based on Reactor     cluster_heatmap_columns = FALSE # Per default FALSE, just for demonstration ) report_dir <- file.path(tempdir(), \"splineomics_report\") dir.create(report_dir, showWarnings = FALSE, recursive = TRUE)  clustering_results <- SplineOmics::cluster_hits(     splineomics = splineomics,     adj_pthresholds = adj_pthresholds,     nr_clusters = nr_clusters,     genes = genes,     plot_info = plot_info,     plot_options = plot_options,     report_dir = report_dir,     adj_pthresh_avrg_diff_conditions = 0.05,     adj_pthresh_interaction_condition_time = 0.05 ) #>  #> Ensure the design has no Condition*Time interaction for mode == 'isolated', and includes it for mode == 'integrated'. #>  #>  Performing the clustering... #> For the level:  Exponential #> For the level:  Stationary #> Generating heatmap... #> Generating cluster mean splines for level:  Exponential #> Generating spline plots... #> Generating cluster mean splines for level:  Stationary #> Generating spline plots... #> Generating report. This takes a few seconds. #>  #>  Info Clustering the hits completed successfully. #>  Your HTML reports are located in the directory:  /tmp/RtmpSM7ukX/splineomics_report . #>  Please note that due to embedded files, the reports might be flagged as #>  harmful by other software. Rest assured that they provide no harm. #> 0 clusters for the condition effect #>             (interaction between condition and time) #> Running this function took 0.3 min"},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"perform-overrepresentation-analysis-ora","dir":"Articles","previous_headings":"","what":"Perform overrepresentation analysis (ORA)","title":"get-started","text":"clustered hits identified, subsequent step gain biological insights perform ORA , respective genes can assigned clustered hit, ORA can carried . proceed, Enrichr databases choice need downloaded: Per default file placed current working directory, root dir R project. run ORA, downloaded database file loaded dataframe. , optionally, clusterProfiler parameters report dir can specified. function run_ora() runs ORA using clusterProfiler, generates HTML report returns ORA dotplots R. function runs clusterProfiler clusters levels, generates HTML report: can view generated analysis report run_ora function . report first shows enrichment results, 2 genes supported term, tabular format. table terms < 2 genes supporting can downloaded clicking button table. dotplots , every row term specific database, columns respective clusters. color scale contains info odds ratio size -log10 adj. p-value. terms > 2 genes support included plot. , cluster, just maximally 5 terms shown (terms highest odds ratios). Note example cluster 1 already 5 terms, cluster 2 , gets term also found cluster 1, term included sixth term cluster 1, way maximum 5 can exceeded. phase, like stationary , lead enrichment results, stated red message.","code":"# Create a temporary directory for R CMD check results_dir <- file.path(tempdir(), \"ora\") dir.create(report_dir, showWarnings = FALSE, recursive = TRUE)  # Specify which databases you want to download from Enrichr gene_set_lib <- c(     \"WikiPathways_2019_Human\",     \"NCI-Nature_2016\",     \"TRRUST_Transcription_Factors_2019\",     \"MSigDB_Hallmark_2020\",     \"GO_Cellular_Component_2018\",     \"CORUM\",     \"KEGG_2019_Human\",     \"TRANSFAC_and_JASPAR_PWMs\",     \"ENCODE_and_ChEA_Consensus_TFs_from_ChIP-X\",     \"GO_Biological_Process_2018\",     \"GO_Molecular_Function_2018\",     \"Human_Gene_Atlas\" )  SplineOmics::download_enrichr_databases(     gene_set_lib = gene_set_lib,     output_dir = results_dir,     filename = \"databases.tsv\" ) # Specify the filepath of the TSV file with the database info downloaded_dbs_filepath <- file.path(results_dir, \"databases.tsv\")  # Load the file databases <- read.delim(     downloaded_dbs_filepath,     sep = \"\\t\",     stringsAsFactors = FALSE )  # Specify the clusterProfiler parameters clusterProfiler_params <- list(     pvalueCutoff = 0.05,     pAdjustMethod = \"BH\",     minGSSize = 10,     maxGSSize = 500,     qvalueCutoff = 0.2 ) result <- SplineOmics::run_ora(     cluster_table = clustering_results[[\"cluster_table\"]],     databases = databases,     clusterProfiler_params = clusterProfiler_params,     report_info = report_info,     cluster_hits_report_name = \"report name\",     report_dir = withr::local_tempdir() )"},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"perform-ora-with-the-bioconductor-database","dir":"Articles","previous_headings":"","what":"Perform ORA with the Bioconductor database","title":"get-started","text":"ORA can also performed database format DB, Geneset, Gene (see documentation run_ora function). BioConductor databases example , SplineOmics also contains function conveniently download .","code":"SplineOmics::extract_gene_sets(     organism_db = \"org.Mm.eg.db\",     output_dir = results_dir,     filename = \"bioconductor_database.tsv\" ) # Specify the filepath of the TSV file with the database info downloaded_dbs_filepath <- file.path(     results_dir,     \"bioconductor_database.tsv\" )  # Load the file databases <- read.delim(     downloaded_dbs_filepath,     sep = \"\\t\",     stringsAsFactors = FALSE )  # Specify the clusterProfiler parameters clusterProfiler_params <- list(     pvalueCutoff = 0.05,     pAdjustMethod = \"BH\",     minGSSize = 10,     maxGSSize = 500,     qvalueCutoff = 0.2 )  mapping_cfg <- list(     method = \"gprofiler\",     from_species = \"cgchok1gshd\",     to_species = \"mmusculus\" )  genes_clean <- genes[!grepl(\"-\", genes)]  enrichGO_cfg <- list(     GO_BP = list(         OrgDb = org.Mm.eg.db,         keyType = \"SYMBOL\",         ontology = \"BP\"     ),     GO_MF = list(         OrgDb = org.Mm.eg.db,         keyType = \"SYMBOL\",         ontology = \"MF\"     ),     GO_CC = list(         OrgDb = org.Mm.eg.db,         keyType = \"SYMBOL\",         ontology = \"CC\"     ) ) result <- SplineOmics::run_ora(     cluster_table = clustering_results[[\"cluster_table\"]],     databases = databases,     clusterProfiler_params = clusterProfiler_params,     universe = genes_clean,     mapping_cfg = mapping_cfg,     enrichGO_cfg = enrichGO_cfg,     report_info = report_info,     cluster_hits_report_name = \"report\",     report_dir = results_dir )"},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"get-started","text":"example showed functionalities SplineOmics package. can also run datatypes , including timeseries RNA-seq glycan data (, refer documentation README file GitHub page Usage/RNA-seq Glycan Data). hope SplineOmics package makes scientific data analysis easier. face problems (bugs code) satisfied documentation, open issue GitHub check options Feedback section README GitHub. Thank !","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/get-started.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"get-started","text":"","code":"#> R version 4.5.1 (2025-06-13) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.5 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.10.0  #> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=de_AT.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=de_AT.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=de_AT.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=de_AT.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: Europe/Vienna #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices datasets  utils     methods   #> [8] base      #>  #> other attached packages: #>  [1] org.Mm.eg.db_3.21.0  AnnotationDbi_1.70.0 IRanges_2.42.0       #>  [4] S4Vectors_0.46.0     Biobase_2.68.0       BiocGenerics_0.54.0  #>  [7] generics_0.1.4       knitr_1.50           dplyr_1.1.4          #> [10] here_1.0.1           SplineOmics_0.3.7    testthat_3.2.3       #> [13] devtools_2.4.5       usethis_3.2.1        #>  #> loaded via a namespace (and not attached): #>   [1] splines_4.5.1            later_1.4.2              bitops_1.0-9             #>   [4] tibble_3.3.0             lifecycle_1.0.4          Rdpack_2.6.4             #>   [7] doParallel_1.0.17        rprojroot_2.1.0          lattice_0.22-5           #>  [10] MASS_7.3-65              backports_1.5.0          magrittr_2.0.3           #>  [13] limma_3.64.1             sass_0.4.10              rmarkdown_2.29           #>  [16] jquerylib_0.1.4          yaml_2.3.10              remotes_2.5.0            #>  [19] httpuv_1.6.16            zip_2.3.3                sessioninfo_1.2.3        #>  [22] pkgbuild_1.4.8           pbapply_1.7-2            DBI_1.2.3                #>  [25] minqa_1.2.8              RColorBrewer_1.1-3       abind_1.4-8              #>  [28] pkgload_1.4.0            EnvStats_3.1.0           purrr_1.1.0              #>  [31] GenomeInfoDbData_1.2.14  circlize_0.4.16          ggrepel_0.9.6            #>  [34] pbkrtest_0.5.4           pkgdown_2.1.3            svglite_2.2.1            #>  [37] codetools_0.2-19         tidyselect_1.2.1         shape_1.4.6.1            #>  [40] UCSC.utils_1.4.0         farver_2.1.2             lme4_1.1-37              #>  [43] gmp_0.7-5                matrixStats_1.5.0        base64enc_0.1-3          #>  [46] jsonlite_2.0.0           GetoptLong_1.0.5         ellipsis_0.3.2           #>  [49] Formula_1.2-5            iterators_1.0.14         systemfonts_1.2.3        #>  [52] foreach_1.5.2            tools_4.5.1              progress_1.2.3           #>  [55] ragg_1.4.0               Rcpp_1.1.0               glue_1.8.0               #>  [58] xfun_0.52                GenomeInfoDb_1.44.0      withr_3.0.2              #>  [61] numDeriv_2016.8-1.1      BiocManager_1.30.26      fastmap_1.2.0            #>  [64] boot_1.3-31              caTools_1.18.3           digest_0.6.37            #>  [67] R6_2.6.1                 mime_0.13                textshaping_1.0.1        #>  [70] colorspace_2.1-1         gtools_3.9.5             RSQLite_2.4.1            #>  [73] RhpcBLASctl_0.23-42      tidyr_1.3.1              variancePartition_1.38.0 #>  [76] renv_1.1.5               corpcor_1.6.10           prettyunits_1.2.0        #>  [79] httr_1.4.7               htmlwidgets_1.6.4        pkgconfig_2.0.3          #>  [82] gtable_0.3.6             blob_1.2.4               ComplexHeatmap_2.24.1    #>  [85] XVector_0.48.0           remaCor_0.0.18           brio_1.1.5               #>  [88] htmltools_0.5.8.1        carData_3.0-5            profvis_0.4.0            #>  [91] clue_0.3-66              scales_1.4.0             ClusterR_1.3.3           #>  [94] png_0.1-8                fANCOVA_0.6-1            reformulas_0.4.1         #>  [97] rstudioapi_0.17.1        reshape2_1.4.4           rjson_0.2.23             #> [100] nlme_3.1-168             nloptr_2.2.1             cachem_1.1.0             #> [103] GlobalOptions_0.1.2      stringr_1.5.1            KernSmooth_2.23-26       #> [106] parallel_4.5.1           miniUI_0.1.2             desc_1.4.3               #> [109] pillar_1.11.0            grid_4.5.1               vctrs_0.6.5              #> [112] gplots_3.2.0             urlchecker_1.0.1         promises_1.3.3           #> [115] car_3.1-3                xtable_1.8-4             cluster_2.1.8.1          #> [118] evaluate_1.0.4           mvtnorm_1.3-3            cli_3.6.5                #> [121] compiler_4.5.1           rlang_1.1.6              crayon_1.5.3             #> [124] labeling_0.4.3           plyr_1.8.9               fs_1.6.6                 #> [127] writexl_1.5.4            stringi_1.8.7            BiocParallel_1.42.1      #> [130] lmerTest_3.1-3           Biostrings_2.76.0        aod_1.3.3                #> [133] Matrix_1.7-3             hms_1.1.3                bit64_4.6.0-1            #> [136] ggplot2_3.5.2            KEGGREST_1.48.1          statmod_1.5.0            #> [139] shiny_1.11.1             rbibutils_2.3            broom_1.0.8              #> [142] memoise_2.0.1            bslib_0.9.0              bit_4.6.0"},{"path":"https://csbg.github.io/SplineOmics/articles/get_started.html","id":"about-this-tutorial","dir":"Articles","previous_headings":"","what":"About this tutorial","title":"Get started","text":"tutorial intends showcase explain capabilities SplineOmics package walking real complete example, start finish.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/get_started.html","id":"example-overview","dir":"Articles","previous_headings":"About this tutorial","what":"Example Overview","title":"Get started","text":"example involves time-series proteomics experiment, CHO (chinese hamster ovary) cells cultivated three bioreactors (three biological replicates). experiment includes following setup: Samples taken exponential stationary growth phases. 60 minutes feeding 15, 60, 90, 120, 240 minutes feeding","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/get_started.html","id":"analysis-goals","dir":"Articles","previous_headings":"About this tutorial","what":"Analysis Goals","title":"Get started","text":"main goals analysis : Identify proteins significant temporal changes: 7162 cellular proteins, objective detect proteins show significant change time CHO cells fed (.e., impact feeding). Cluster hits based temporal patterns: proteins (hits) significant temporal changes clustered according time-based patterns. Perform gene set enrichment analysis: cluster, gene set enrichment analysis performed determine specific biological processes - downregulated feeding.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/get_started.html","id":"note","dir":"Articles","previous_headings":"About this tutorial","what":"Note","title":"Get started","text":"documentation SplineOmics package functions can viewed ","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/get_started.html","id":"load-the-packages","dir":"Articles","previous_headings":"","what":"Load the packages","title":"Get started","text":"","code":"# library(SplineOmics) library(devtools) #> Loading required package: usethis devtools::load_all() #> ℹ Loading SplineOmics library(here) # For managing filepaths #> here() starts at /home/thomas/Documents/PhD/projects/DGTX/SplineOmics_hub/SplineOmics library(dplyr) # For data manipulation #>  #> Attaching package: 'dplyr' #> The following object is masked from 'package:testthat': #>  #>     matches #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(knitr) # For Showing the head of the data and the meta tables. library(org.Mm.eg.db) # BioConductor database #> Loading required package: AnnotationDbi #> Loading required package: stats4 #> Loading required package: BiocGenerics #> Loading required package: generics #>  #> Attaching package: 'generics' #> The following object is masked from 'package:dplyr': #>  #>     explain #> The following objects are masked from 'package:base': #>  #>     as.difftime, as.factor, as.ordered, intersect, is.element, setdiff, #>     setequal, union #>  #> Attaching package: 'BiocGenerics' #> The following object is masked from 'package:dplyr': #>  #>     combine #> The following objects are masked from 'package:SplineOmics': #>  #>     sd, var #> The following objects are masked from 'package:stats': #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from 'package:base': #>  #>     anyDuplicated, aperm, append, as.data.frame, basename, cbind, #>     colnames, dirname, do.call, duplicated, eval, evalq, Filter, Find, #>     get, grep, grepl, is.unsorted, lapply, Map, mapply, match, mget, #>     order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank, #>     rbind, Reduce, rownames, sapply, saveRDS, table, tapply, unique, #>     unsplit, which.max, which.min #> Loading required package: Biobase #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. #> Loading required package: IRanges #> Loading required package: S4Vectors #>  #> Attaching package: 'S4Vectors' #> The following objects are masked from 'package:dplyr': #>  #>     first, rename #> The following object is masked from 'package:SplineOmics': #>  #>     rename #> The following object is masked from 'package:utils': #>  #>     findMatches #> The following objects are masked from 'package:base': #>  #>     expand.grid, I, unname #>  #> Attaching package: 'IRanges' #> The following objects are masked from 'package:dplyr': #>  #>     collapse, desc, slice #>  #> Attaching package: 'AnnotationDbi' #> The following object is masked from 'package:dplyr': #>  #>     select #> The following object is masked from 'package:SplineOmics': #>  #>     select #>"},{"path":"https://csbg.github.io/SplineOmics/articles/get_started.html","id":"load-the-files","dir":"Articles","previous_headings":"","what":"Load the files","title":"Get started","text":"example, proteomics_data.rds file contains numeric values (intensities) also feature descriptions, gene protein name (= annotation part). Usually, load data example Excel file, .rds file compressed, reason format chosen limit size SplineOmics package. file meta.xlsx contains meta information, descriptions columns numeric values data. (example files part package don’t present system). Please note dataset actual experimental dataset, annotation information, gene names, removed since yet published time making SplineOmics package public. Instead, dataset includes randomly generated gene symbols gene names corresponding Cricetulus griseus (Chinese Hamster) row. intended demonstrate functionality package. , dataset subsamples 1165 proteins limit size package. left part data contains numeric values, right part annotation info, can copied separate dataframe, shown .","code":"data <- readRDS(xzfile(system.file(     \"extdata\",     \"proteomics_data.rds.xz\",     package = \"SplineOmics\" )))  meta <- read.csv(     system.file(         \"extdata\",         \"proteomics_meta.csv\",         package = \"SplineOmics\"     ),     stringsAsFactors = FALSE )  # Extract the annotation part from the dataframe. first_na_col <- which(is.na(data[1, ]))[1] annotation <- data |>     dplyr::select((first_na_col + 1):ncol(data)) |>     dplyr::slice(-c(1:3))"},{"path":"https://csbg.github.io/SplineOmics/articles/get_started.html","id":"show-top-rows-of-data","dir":"Articles","previous_headings":"Load the files","what":"Show top rows of data","title":"Get started","text":"","code":"kable(     head(data),     format = \"markdown\" )"},{"path":"https://csbg.github.io/SplineOmics/articles/get_started.html","id":"show-top-rows-of-meta","dir":"Articles","previous_headings":"Load the files","what":"Show top rows of meta","title":"Get started","text":"","code":"kable(     head(meta),     format = \"markdown\" )"},{"path":"https://csbg.github.io/SplineOmics/articles/get_started.html","id":"show-top-rows-of-annotation","dir":"Articles","previous_headings":"Load the files","what":"Show top rows of annotation","title":"Get started","text":"Three comments characteristics input data : data must contain NA values special values, must consist numbers. example, original proteomics data contained NA values, resolved case imputation (replacing NA values numbers). features data ideally normally distributed analyzed limma, fits linear model feature. models rely statistical tests assume normality. Although limma can still function data normally distributed, resulting p-values may become less reliable. reason, strongly recommended transform data using techniques log2 transformation features deviate normality. Proper transformation helps ensure assumptions underlying statistical tests met, leading accurate trustworthy results. samples data independent . Linear models, used limma, assume observations (samples) independent. dependency samples (e.g., repeated measurements subject), assumption violated, can lead incorrect statistical inferences.","code":"kable(     head(annotation),     format = \"markdown\" )"},{"path":"https://csbg.github.io/SplineOmics/articles/get_started.html","id":"bring-the-inputs-into-the-standardized-format","dir":"Articles","previous_headings":"Load the files","what":"Bring the Inputs into the Standardized Format","title":"Get started","text":"Since data format required SplineOmics package, needs processing. SplineOmics package requires data numeric matrix, element allowed anything else number. can done commands R, file specific structure, function extract_data() can handle easily","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/get_started.html","id":"usage-of-the-extract_data-function","dir":"Articles","previous_headings":"Load the files > Bring the Inputs into the Standardized Format","what":"Usage of the extract_data() function","title":"Get started","text":"extract_data() can: Extract data matrix field specifying location corners matrix. Create column headers information written cells respective columns data matrix field. annotation columns specified, rowheaders increasing numbers. annotation columns specified (like \"First.Protein.Description\" \"ID\" example), combined form rowheaders (feature names).","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/get_started.html","id":"usage-in-plotting","dir":"Articles","previous_headings":"Load the files > Bring the Inputs into the Standardized Format","what":"Usage in Plotting","title":"Get started","text":"generated rowheaders used label plots feature shown individually, : Spline plots datapoints individual feature.","code":"data <- SplineOmics::extract_data(     # The dataframe with the numbers on the left and info on the right.     data = data,     # Use this annotation column for the feature names.     feature_name_columns = c(\"Gene_name\"),     use_row_index = TRUE,     top_row = 4,     bottom_row = 1165,     right_col = 37,     left_col = 2 )"},{"path":"https://csbg.github.io/SplineOmics/articles/get_started.html","id":"perform-eda-exploratory-data-analysis","dir":"Articles","previous_headings":"","what":"Perform EDA (exploratory data analysis)","title":"Get started","text":"Now data required format (numeric matrix) can go . first step analyzing data typically Exploratory Data Analysis (EDA). EDA involves summarizing main characteristics data, often visualizations.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/get_started.html","id":"common-eda-plots","dir":"Articles","previous_headings":"Perform EDA (exploratory data analysis)","what":"Common EDA Plots","title":"Get started","text":"common types EDA plots include: Density distributions Boxplots PCA (Principal Component Analysis) Correlation heatmaps , can generate plots lines R code. However, prefer, convenience, explore_data() function can handle .","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/get_started.html","id":"using-explore_data-for-eda","dir":"Articles","previous_headings":"Perform EDA (exploratory data analysis)","what":"Using explore_data() for EDA","title":"Get started","text":"SplineOmics package provides function explore_data() perform EDA. function requires following arguments: data: numeric data matrix. meta: metadata table. condition: name column metadata contains levels experiment (e.g., “Exponential” “Stationary”). report_info: list contains general information analysis, name analyst datatype (e.g. proteomics)","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/get_started.html","id":"optional-arguments","dir":"Articles","previous_headings":"Perform EDA (exploratory data analysis)","what":"Optional Arguments","title":"Get started","text":"addition required arguments, explore_data() offers several optional arguments: meta_batch_column: name column contains first batch effect. meta_batch2_column: name column contains second batch effect. least one batch column provided, function : Use removeBatchEffect() function limma remove batch effect data plotting. Generate two EDA HTML reports: one uncorrected data one batch-corrected data.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/get_started.html","id":"output-and-report-options","dir":"Articles","previous_headings":"Perform EDA (exploratory data analysis)","what":"Output and Report Options","title":"Get started","text":"default, reports saved current working directory, location can changed using report_dir argument. function also returns plots generated analysis, can modify according needs. want report generated, can set report argument FALSE (example just want figures R environment)","code":"# Those fields are mandatory, because we believe that when such a report is # opened after half a year, those infos can be very helpful. report_info <- list(     omics_data_type = \"PTX\",     data_description = \"Proteomics data of CHO cells\",     data_collection_date = \"February 2024\",     analyst_name = \"Thomas Rauter\",     contact_info = \"thomas.rauter@plus.ac.at\",     project_name = \"DGTX\" )  report_dir <- here::here(     \"results\",     \"explore_data\" )"},{"path":"https://csbg.github.io/SplineOmics/articles/get_started.html","id":"splineomics-object","dir":"Articles","previous_headings":"Perform EDA (exploratory data analysis)","what":"SplineOmics Object","title":"Get started","text":"SplineOmics package, multiple functions take arguments input. make easier avoid errors, decided arguments provided individually functions, stored R6 object (type ‘SplineOmics’) object passed functions. Additionally, functions generate intermediate output, just necessary next function workflow, also just passed along updating SplineOmics object. don’t worry .","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/get_started.html","id":"functionality","dir":"Articles","previous_headings":"Perform EDA (exploratory data analysis) > SplineOmics Object","what":"Functionality","title":"Get started","text":"SplineOmics object can seen container necessary arguments stored. function retrieves required arguments object potentially adds new data results back .","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/get_started.html","id":"documentation","dir":"Articles","previous_headings":"Perform EDA (exploratory data analysis) > SplineOmics Object","what":"Documentation","title":"Get started","text":"documentation function creates SplineOmics object can found documentation function updates [documentation function takes SplineOmics object input specifies arguments must present SplineOmics object passed respective function.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/get_started.html","id":"required-arguments-create_splineomics","dir":"Articles","previous_headings":"Perform EDA (exploratory data analysis)","what":"Required Arguments create_splineomics()","title":"Get started","text":"data: matrix data meta: Metadata associated data. condition: Meta column name levels (e.g., Exponential Stationary).","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/get_started.html","id":"optional-arguments-create_splineomics","dir":"Articles","previous_headings":"Perform EDA (exploratory data analysis)","what":"Optional Arguments create_splineomics()","title":"Get started","text":"rna_seq_data: object containing preprocessed RNA-seq data, output limma::voom function. annotation: dataframe feature descriptions data. report_info: list containing general information analysis. meta_batch_column: Column meta batch information. meta_batch2_column: Column secondary meta batch information. design: limma design formula spline_params: Parameters spline functions. Now SplineOmics object defined, can perform exploratory data analysis. can see HTML report explore_data() function batch-corrected data, report batch-corrected data. Note report linked vignette might created older version SplineOmics, updated yet. EDA plots can tell range things. plots HTML report grouped three categories: Distribution Variability Analysis, Time Series Analysis, Dimensionality Reduction Clustering. look correlation heatmaps HTML report, can see samples E12_TP05_Exponential E10_TP10_Stationary stick . Seeing , might want remove data.","code":"# splineomics now contains the SplineOmics object. splineomics <- SplineOmics::create_splineomics(     data = data,     meta = meta,     annotation = annotation,     report_info = report_info,     condition = \"Phase\", # Column of meta that contains the levels.     meta_batch_column = \"Reactor\" # For batch effect removal )  # Special print.SplineOmics function leads to selective printing print(splineomics) #> data:SplineOmics Object #> ------------------- #> Number of features (rows): 1162  #> Number of samples (columns): 36  #> Meta data columns: 5  #> First few meta columns: #>              Sample.ID Reactor Time.Point       Phase Time #> 1 E09_TP01_Exponential     E09       TP01 Exponential  -60 #> 2 E10_TP01_Exponential     E10       TP01 Exponential  -60 #> 3 E12_TP01_Exponential     E12       TP01 Exponential  -60 #> Condition: Phase  #> No RNA-seq data provided. #> Annotation provided with 1162 entries. #> No spline parameters set. #> P-value adjustment method: BH plots <- SplineOmics::explore_data(     splineomics = splineomics, # SplineOmics object     report_dir = withr::local_tempdir() ) #> Making density plots... #> Making violin plots... #> Making PCA plots... #> Making MDS plots... #> Making correlation heatmaps... #> Subsampled to top 1000 most variable features (after filtering rows with > 20% missing) for correlation heatmap. #> Making mean correlation with time plots... #> Making lag1 differences plots... #> Making first lag auto-correlation with time plots... #> Making cv plots... #> Making density plots... #> Making violin plots... #> Making PCA plots... #> Making MDS plots... #> Making correlation heatmaps... #> Subsampled to top 1000 most variable features (after filtering rows with > 20% missing) for correlation heatmap. #> Making mean correlation with time plots... #> Making lag1 differences plots... #> Making first lag auto-correlation with time plots... #> Making cv plots... #>  #>  Info Exploratory data analysis completed successfully. #>  Your HTML reports are located in the directory:  /tmp/RtmpiT81HQ/file97cf407d8d8c . #>  Please note that due to embedded files, the reports might be flagged as #>  harmful by other software. Rest assured that they provide no harm."},{"path":"https://csbg.github.io/SplineOmics/articles/get_started.html","id":"run-limma-spline-analysis","dir":"Articles","previous_headings":"","what":"Run limma spline analysis","title":"Get started","text":"Now decide parameters run limma spline analysis. design formula, must specify either ‘isolated’ ‘integrated’. Isolated means limma determines results level using data level. Integrated means limma determines results levels using full dataset (levels). integrated mode, condition column (Phase) must included design. Isolated means limma uses part dataset belongs level obtain results level. generate limma result categories 2 3 () Run run_limma_splines() function updated SplineOmics object: output function run_limma_splines() named list, element specific “category” results. Refer document explanation different result categories. elements list, containing elements respective limma topTables, either level comparison two levels. element “time_effect” list, element topTable p-value feature respective level reported. element “avrg_diff_conditions” list contains elements topTables, represent comparison average differences levels. element “interaction_condition_time” list contains elements topTables, represent interaction levels (includes time average differences)","code":"splineomics <- SplineOmics::update_splineomics(     splineomics = splineomics,     design = \"~ 1 + Phase*Time + Reactor\", # best design formula     mode = \"integrated\", # means limma uses the full data for each condition.     # States explicitly that there is no problem of heteroscedasticity and     # therefore, this does not need to be adressed. Setting it to TRUE would     # mean     # the opposite, and when setting it to NULL, it means it should be handled     # implicitly. For details, see Reference     # documentation of the create_splineomics() function.     use_array_weights = FALSE,     spline_params = list(         spline_type = c(\"n\"), # natural cubic splines (take these if unsure)         # If you are unsure about which dof, start with 2 and increase         dof = c(2L)      ) ) splineomics <- SplineOmics::run_limma_splines(     splineomics = splineomics ) #>  #> Ensure the design has no Condition*Time interaction for mode == 'isolated', and includes it for mode == 'integrated'. #>  #> Fitting global model... #> Info Finished limma spline analysis in 0.0 min"},{"path":"https://csbg.github.io/SplineOmics/articles/get_started.html","id":"build-limma-report","dir":"Articles","previous_headings":"","what":"Build limma report","title":"Get started","text":"topTables three limma result categories can used generate p-value histograms volcano plots. can view generated analysis report create_limma_report function . report contains p-value histograms three limma result categories volcano plot category 2. Embedded file downloadable limma topTables results category 1 mode ‘isolated’ also results category 2 3 mode ‘integrated’. Note upcoming cluster_hits() function report, embedded file contain clustered significant features result category 1.","code":"plots <- SplineOmics::create_limma_report(     splineomics = splineomics,     report_dir = withr::local_tempdir() ) #>  #>  Info Limma report generation completed successfully. #>  Your HTML reports are located in the directory:  /tmp/RtmpiT81HQ/file97cf6bb23ee8 . #>  Please note that due to embedded files, the reports might be flagged as #>  harmful by other software. Rest assured that they provide no harm."},{"path":"https://csbg.github.io/SplineOmics/articles/get_started.html","id":"cluster-the-hits-significant-features","dir":"Articles","previous_headings":"","what":"Cluster the hits (significant features)","title":"Get started","text":"obtained limma spline results, can cluster hits based temporal pattern (spline shape). define hit setting adj. p-value threshold every level. Hits features (e.g. proteins) adj. p-value threshold. Hierarchical clustering used place every hit one many clusters specified specific level. Run function: can view generated analysis report cluster_hits function . discussed , three limma result categories. cluster_hits() report shows results three, present (category 2 3 can generated design formula contains interaction effect).","code":"# Important note: When you define parameters for the levels, always define them # in the order those levels appear in the meta condition column! Otherwise, # there will be a mixup!  adj_pthresholds <- c(     0.05,     0.05 )  # The amount of clusters can be a fixed number (e.g. 6) or a range. When you # specify a range (e.g. 2:3, which corresponds to 2 3 in the vector) then the # cluster_hits() function tries all those cluster numbers and picks the one with # the highest silhouette score (automatic cluster number identification). When # you don't want to have a clustering for a level, write 1 for the cluster # number for that level. nr_clusters <- list(     Exponential = 6, # specifically 6 clusters for the exponential phase level     Stationary = 2:3 # range of cluster numbers for the stationary phase level )  plot_info <- list( # For the spline plots     y_axis_label = \"log2 intensity\",     time_unit = \"min\", # our measurements were in minutes     treatment_labels = list(         Exponential = \"feeding\",         Stationary = \"feeding\",         double_spline_plots = \"feeding\"     ),     treatment_timepoints = list(         Exponential = 0,         Stationary = 0,         double_spline_plots = 0     ) )   # Get all the gene names. They are used for generating files # which contents can be directly used as the input for the Enrichr webtool, # if you prefer to manually perform the enrichment. Those files are # embedded in the output HTML report and can be downloaded from there. gene_column_name <- \"Gene_symbol\" genes <- annotation[[gene_column_name]]  plot_options <- list(     # When meta_replicate_column is not there, all datapoints are blue.     meta_replicate_column = \"Reactor\", # Colors the data points based on Reactor     cluster_heatmap_columns = FALSE # Per default FALSE, just for demonstration ) report_dir <- file.path(tempdir(), \"splineomics_report\") dir.create(report_dir, showWarnings = FALSE, recursive = TRUE)  clustering_results <- SplineOmics::cluster_hits(     splineomics = splineomics,     adj_pthresholds = adj_pthresholds,     nr_clusters = nr_clusters,     genes = genes,     plot_info = plot_info,     plot_options = plot_options,     report_dir = report_dir,     adj_pthresh_avrg_diff_conditions = 0.05,     adj_pthresh_interaction_condition_time = 0.05 ) #>  #> Ensure the design has no Condition*Time interaction for mode == 'isolated', and includes it for mode == 'integrated'. #>  #>  Performing the clustering... #> For the level:  Exponential #> For the level:  Stationary #> Generating heatmap... #> Generating cluster mean splines for level:  Exponential #> Generating spline plots... #> Generating cluster mean splines for level:  Stationary #> Generating spline plots... #> Generating report. This takes a few seconds. #>  #>  Info Clustering the hits completed successfully. #>  Your HTML reports are located in the directory:  /tmp/RtmpiT81HQ/splineomics_report . #>  Please note that due to embedded files, the reports might be flagged as #>  harmful by other software. Rest assured that they provide no harm. #> 0 clusters for the condition effect #>             (interaction between condition and time) #> Running this function took 0.2 min"},{"path":"https://csbg.github.io/SplineOmics/articles/get_started.html","id":"perform-overrepresentation-analysis-ora","dir":"Articles","previous_headings":"","what":"Perform overrepresentation analysis (ORA)","title":"Get started","text":"clustered hits identified, subsequent step gain biological insights perform ORA , respective genes can assigned clustered hit, ORA can carried . proceed, Enrichr databases choice need downloaded: Per default file placed current working directory, root dir R project. run ORA, downloaded database file loaded dataframe. , optionally, clusterProfiler parameters report dir can specified. function run_ora() runs ORA using clusterProfiler, generates HTML report returns ORA dotplots R. function runs clusterProfiler clusters levels, generates HTML report: can view generated analysis report run_ora function . report first shows enrichment results, 2 genes supported term, tabular format. table terms < 2 genes supporting can downloaded clicking button table. dotplots , every row term specific database, columns respective clusters. color scale contains info odds ratio size -log10 adj. p-value. terms > 2 genes support included plot. , cluster, just maximally 5 terms shown (terms highest odds ratios). Note example cluster 1 already 5 terms, cluster 2 , gets term also found cluster 1, term included sixth term cluster 1, way maximum 5 can exceeded. phase, like stationary , lead enrichment results, stated red message.","code":"# Create a temporary directory for R CMD check results_dir <- file.path(tempdir(), \"ora\") dir.create(report_dir, showWarnings = FALSE, recursive = TRUE)  # Specify which databases you want to download from Enrichr gene_set_lib <- c(     \"WikiPathways_2019_Human\",     \"NCI-Nature_2016\",     \"TRRUST_Transcription_Factors_2019\",     \"MSigDB_Hallmark_2020\",     \"GO_Cellular_Component_2018\",     \"CORUM\",     \"KEGG_2019_Human\",     \"TRANSFAC_and_JASPAR_PWMs\",     \"ENCODE_and_ChEA_Consensus_TFs_from_ChIP-X\",     \"GO_Biological_Process_2018\",     \"GO_Molecular_Function_2018\",     \"Human_Gene_Atlas\" )  SplineOmics::download_enrichr_databases(     gene_set_lib = gene_set_lib,     output_dir = results_dir,     filename = \"databases.tsv\" ) # Specify the filepath of the TSV file with the database info downloaded_dbs_filepath <- file.path(results_dir, \"databases.tsv\")  # Load the file databases <- read.delim(     downloaded_dbs_filepath,     sep = \"\\t\",     stringsAsFactors = FALSE )  # Specify the clusterProfiler parameters clusterProfiler_params <- list(     pvalueCutoff = 0.05,     pAdjustMethod = \"BH\",     minGSSize = 10,     maxGSSize = 500,     qvalueCutoff = 0.2 ) result <- SplineOmics::run_ora(     cluster_table = clustering_results[[\"cluster_table\"]],     databases = databases,     clusterProfiler_params = clusterProfiler_params,     report_info = report_info,     cluster_hits_report_name = \"report name\",     report_dir = withr::local_tempdir() )"},{"path":"https://csbg.github.io/SplineOmics/articles/get_started.html","id":"perform-ora-with-the-bioconductor-database","dir":"Articles","previous_headings":"","what":"Perform ORA with the Bioconductor database","title":"Get started","text":"ORA can also performed database format DB, Geneset, Gene (see documentation run_ora function). BioConductor databases example , SplineOmics also contains function conveniently download .","code":"SplineOmics::extract_gene_sets(     organism_db = \"org.Mm.eg.db\",     output_dir = results_dir,     filename = \"bioconductor_database.tsv\" ) # Specify the filepath of the TSV file with the database info downloaded_dbs_filepath <- file.path(     results_dir,     \"bioconductor_database.tsv\" )  # Load the file databases <- read.delim(     downloaded_dbs_filepath,     sep = \"\\t\",     stringsAsFactors = FALSE )  # Specify the clusterProfiler parameters clusterProfiler_params <- list(     pvalueCutoff = 0.05,     pAdjustMethod = \"BH\",     minGSSize = 10,     maxGSSize = 500,     qvalueCutoff = 0.2 )  mapping_cfg <- list(     method = \"gprofiler\",     from_species = \"cgchok1gshd\",     to_species = \"mmusculus\" )  genes_clean <- genes[!grepl(\"-\", genes)]  enrichGO_cfg <- list(     GO_BP = list(         OrgDb = org.Mm.eg.db,         keyType = \"SYMBOL\",         ontology = \"BP\"     ),     GO_MF = list(         OrgDb = org.Mm.eg.db,         keyType = \"SYMBOL\",         ontology = \"MF\"     ),     GO_CC = list(         OrgDb = org.Mm.eg.db,         keyType = \"SYMBOL\",         ontology = \"CC\"     ) ) result <- SplineOmics::run_ora(     cluster_table = clustering_results[[\"cluster_table\"]],     databases = databases,     clusterProfiler_params = clusterProfiler_params,     universe = genes_clean,     mapping_cfg = mapping_cfg,     enrichGO_cfg = enrichGO_cfg,     report_info = report_info,     cluster_hits_report_name = \"report\",     report_dir = results_dir )"},{"path":"https://csbg.github.io/SplineOmics/articles/get_started.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Get started","text":"example showed functionalities SplineOmics package. can also run datatypes , including timeseries RNA-seq glycan data (, refer documentation README file GitHub page Usage/RNA-seq Glycan Data). hope SplineOmics package makes scientific data analysis easier. face problems (bugs code) satisfied documentation, open issue GitHub check options Feedback section README GitHub. Thank !","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/get_started.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Get started","text":"","code":"#> R version 4.5.1 (2025-06-13) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.5 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.10.0  #> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=de_AT.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=de_AT.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=de_AT.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=de_AT.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: Europe/Vienna #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices datasets  utils     methods   #> [8] base      #>  #> other attached packages: #>  [1] org.Mm.eg.db_3.21.0  AnnotationDbi_1.70.0 IRanges_2.42.0       #>  [4] S4Vectors_0.46.0     Biobase_2.68.0       BiocGenerics_0.54.0  #>  [7] generics_0.1.4       knitr_1.50           dplyr_1.1.4          #> [10] here_1.0.1           SplineOmics_0.3.7    testthat_3.2.3       #> [13] devtools_2.4.5       usethis_3.2.1        #>  #> loaded via a namespace (and not attached): #>   [1] splines_4.5.1            later_1.4.2              bitops_1.0-9             #>   [4] tibble_3.3.0             lifecycle_1.0.4          Rdpack_2.6.4             #>   [7] doParallel_1.0.17        rprojroot_2.1.0          lattice_0.22-5           #>  [10] MASS_7.3-65              backports_1.5.0          magrittr_2.0.3           #>  [13] limma_3.64.1             sass_0.4.10              rmarkdown_2.29           #>  [16] jquerylib_0.1.4          yaml_2.3.10              remotes_2.5.0            #>  [19] httpuv_1.6.16            zip_2.3.3                sessioninfo_1.2.3        #>  [22] pkgbuild_1.4.8           pbapply_1.7-2            DBI_1.2.3                #>  [25] minqa_1.2.8              RColorBrewer_1.1-3       abind_1.4-8              #>  [28] pkgload_1.4.0            EnvStats_3.1.0           purrr_1.1.0              #>  [31] GenomeInfoDbData_1.2.14  circlize_0.4.16          ggrepel_0.9.6            #>  [34] pbkrtest_0.5.4           pkgdown_2.1.3            svglite_2.2.1            #>  [37] codetools_0.2-19         tidyselect_1.2.1         shape_1.4.6.1            #>  [40] UCSC.utils_1.4.0         farver_2.1.2             lme4_1.1-37              #>  [43] gmp_0.7-5                matrixStats_1.5.0        base64enc_0.1-3          #>  [46] jsonlite_2.0.0           GetoptLong_1.0.5         ellipsis_0.3.2           #>  [49] Formula_1.2-5            iterators_1.0.14         systemfonts_1.2.3        #>  [52] foreach_1.5.2            tools_4.5.1              progress_1.2.3           #>  [55] ragg_1.4.0               Rcpp_1.1.0               glue_1.8.0               #>  [58] xfun_0.52                GenomeInfoDb_1.44.0      withr_3.0.2              #>  [61] numDeriv_2016.8-1.1      BiocManager_1.30.26      fastmap_1.2.0            #>  [64] boot_1.3-31              caTools_1.18.3           digest_0.6.37            #>  [67] R6_2.6.1                 mime_0.13                textshaping_1.0.1        #>  [70] colorspace_2.1-1         gtools_3.9.5             RSQLite_2.4.1            #>  [73] RhpcBLASctl_0.23-42      tidyr_1.3.1              variancePartition_1.38.0 #>  [76] renv_1.1.5               corpcor_1.6.10           prettyunits_1.2.0        #>  [79] httr_1.4.7               htmlwidgets_1.6.4        pkgconfig_2.0.3          #>  [82] gtable_0.3.6             blob_1.2.4               ComplexHeatmap_2.24.1    #>  [85] XVector_0.48.0           remaCor_0.0.18           brio_1.1.5               #>  [88] htmltools_0.5.8.1        carData_3.0-5            profvis_0.4.0            #>  [91] clue_0.3-66              scales_1.4.0             ClusterR_1.3.3           #>  [94] png_0.1-8                fANCOVA_0.6-1            reformulas_0.4.1         #>  [97] rstudioapi_0.17.1        reshape2_1.4.4           rjson_0.2.23             #> [100] nlme_3.1-168             nloptr_2.2.1             cachem_1.1.0             #> [103] GlobalOptions_0.1.2      stringr_1.5.1            KernSmooth_2.23-26       #> [106] parallel_4.5.1           miniUI_0.1.2             desc_1.4.3               #> [109] pillar_1.11.0            grid_4.5.1               vctrs_0.6.5              #> [112] gplots_3.2.0             urlchecker_1.0.1         promises_1.3.3           #> [115] car_3.1-3                xtable_1.8-4             cluster_2.1.8.1          #> [118] evaluate_1.0.4           mvtnorm_1.3-3            cli_3.6.5                #> [121] compiler_4.5.1           rlang_1.1.6              crayon_1.5.3             #> [124] labeling_0.4.3           plyr_1.8.9               fs_1.6.6                 #> [127] writexl_1.5.4            stringi_1.8.7            BiocParallel_1.42.1      #> [130] lmerTest_3.1-3           Biostrings_2.76.0        aod_1.3.3                #> [133] Matrix_1.7-3             hms_1.1.3                bit64_4.6.0-1            #> [136] ggplot2_3.5.2            KEGGREST_1.48.1          statmod_1.5.0            #> [139] shiny_1.11.1             rbibutils_2.3            broom_1.0.8              #> [142] memoise_2.0.1            bslib_0.9.0              bit_4.6.0"},{"path":"https://csbg.github.io/SplineOmics/articles/glycan-analysis.html","id":"about-this-vignette","dir":"Articles","previous_headings":"","what":"About this vignette","title":"Glycan-analysis","text":"tutorial intends showcase explain capabilities SplineOmics package walking real complete glycan analysis example, start finish. SplineOmics explained detail get-started vignette, proteomics example covered. vignette focused showing glycan data can used, , less details overall package provided .","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/glycan-analysis.html","id":"data-overview","dir":"Articles","previous_headings":"About this vignette","what":"Data Overview","title":"Glycan-analysis","text":"dataset originates time-series glycan experiment designed study Chinese Hamster Ovary (CHO) cells. data compositional, meaning observed glycoform abundances represent parts whole constrained constant-sum constraint, making standard statistical analyses inappropriate without appropriate log-ratio transformations. experiment involved cultivating cells eight bioreactors, four bioreactors subjected temperature shift 146 hours (experimental condition) remaining four bioreactors maintained without temperature shift (control condition).","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/glycan-analysis.html","id":"timepoints","dir":"Articles","previous_headings":"About this vignette > Data Overview","what":"Timepoints","title":"Glycan-analysis","text":"Samples collected 7 distinct time points throughout experiment, specifically: \"120h\", \"144h\", \"168h\", \"192h\", \"216h\", \"288h\", \"336h\" cultivation start. time point sampled eight bioreactors, E17_336 missing, therefore resulting total 55 samples.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/glycan-analysis.html","id":"effects-in-the-experiment-reactor-and-batch","dir":"Articles","previous_headings":"About this vignette > Data Overview","what":"Effects in the Experiment: Reactor and Batch","title":"Glycan-analysis","text":"experiment, two effects consider: Reactor Batch. refers different bioreactors used cell cultivation, can exhibit substantial variability. reactor assigned single condition: either constant temperature temperature-shifted. result, condition reactor confounded. Reactor treated fixed effect simply remove influence. Instead, treated random effect, allows us model variability appropriately. refers two separate glycan analysis batches. Batch considered batch effect respect condition (constant temperature vs. temperature-shifted). Since Condition Reactor confounded, variability due reactors directly separated condition. Instead, linear mixed models (LMMs) used attribute reactor random effect, allowing us account variability isolating effects condition. approach ensures analysis appropriately handles hierarchical structure data avoids incorrect conclusions. vignette, demonstrate use linear mixed models address challenges properly account reactor plate effects.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/glycan-analysis.html","id":"further-info","dir":"Articles","previous_headings":"About this vignette > Data Overview","what":"Further info","title":"Glycan-analysis","text":"data matrix comprises glycoforms rows (G0/G0 none/G0F) samples columns, providing glycoform measurements time points. glycoform row stands combination sugars (glycans) can attached left right side product antibody, produced CHO cell cultivation. example G0/G0 means glycan G0 attached sides, none/G0F means left side, glycan, right side, G0F glycan. goal experiment investigate effect temperature shift CHO cell cultivation antibody glycan dynamics time. Note: original dataset, yet published time vignette’s creation. demonstration purposes, glycans randomly shuffled, 2% randomly added substracted value.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/glycan-analysis.html","id":"analysis-goals","dir":"Articles","previous_headings":"About this vignette","what":"Analysis Goals","title":"Glycan-analysis","text":"main objectives analysis : Identify glycans significant temporal changes: Among glycoforms measured, goal identify exhibit significant changes abundance time. Cluster glycans based temporal patterns: Glycoforms showing significant temporal changes (hits) grouped clusters based time-dependent expression patterns. Assess impact temperature shifts temporal patterns: analysis determine whether temporal patterns glycoform abundance affected temperature shift, .e., whether glycoform abundance dynamics differ time temperature shift conditions compared controls.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/glycan-analysis.html","id":"note","dir":"Articles","previous_headings":"About this vignette > Analysis Goals","what":"Note","title":"Glycan-analysis","text":"documentation SplineOmics package functions can viewed ","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/glycan-analysis.html","id":"load-the-packages","dir":"Articles","previous_headings":"","what":"Load the packages","title":"Glycan-analysis","text":"","code":"library(SplineOmics) library(here) # For managing filepaths #> here() starts at /home/thomas/Documents/PhD/projects/DGTX/SplineOmics_hub/SplineOmics library(dplyr) # For data manipulation #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(knitr) # For Showing the head of the data and the meta tables. library(compositions) # For clr transforming the glycan data #> Welcome to compositions, a package for compositional data analysis. #> Find an intro with \"? compositions\" #>  #> Attaching package: 'compositions' #> The following objects are masked from 'package:stats': #>  #>     anova, cor, cov, dist, var #> The following object is masked from 'package:graphics': #>  #>     segments #> The following objects are masked from 'package:base': #>  #>     %*%, norm, scale, scale.default"},{"path":"https://csbg.github.io/SplineOmics/articles/glycan-analysis.html","id":"load-the-files","dir":"Articles","previous_headings":"","what":"Load the files","title":"Glycan-analysis","text":"","code":"data <- read.csv(     system.file(         \"extdata\",         \"glycan_data.csv\",         package = \"SplineOmics\"     ),     stringsAsFactors = FALSE )  meta <- read.csv(     system.file(         \"extdata\",         \"glycan_meta.csv\",         package = \"SplineOmics\"     ),     stringsAsFactors = FALSE )  # Set the first column as row names and remove it from the dataframe rownames(data) <- data[[1]] # Assign first column as row names data <- data[, -1] # Remove the first column   # Make data to a numeric matrix (required by SplineOmics) data <- data.matrix(data)"},{"path":"https://csbg.github.io/SplineOmics/articles/glycan-analysis.html","id":"show-top-rows-of-data","dir":"Articles","previous_headings":"Load the files","what":"Show top rows of data","title":"Glycan-analysis","text":"","code":"knitr::kable(     head(data),     format = \"markdown\" )"},{"path":"https://csbg.github.io/SplineOmics/articles/glycan-analysis.html","id":"show-top-rows-of-meta","dir":"Articles","previous_headings":"Load the files","what":"Show top rows of meta","title":"Glycan-analysis","text":"","code":"knitr::kable(     head(meta),     format = \"markdown\" )"},{"path":"https://csbg.github.io/SplineOmics/articles/glycan-analysis.html","id":"perform-eda-exploratory-data-analysis","dir":"Articles","previous_headings":"","what":"Perform EDA (exploratory data analysis)","title":"Glycan-analysis","text":"Compositional data, glycan profiles expressed relative abundances, inherently constrained constant sum therefore reside simplex rather Euclidean space. violates assumptions standard statistical methods. address , applied centered log-ratio (CLR) transformation, appropriately maps data real space accounting compositional structure. studies apply simple log-transformation stabilize variance, approach ignores relative nature data may lead biased misleading results. CLR transformation thus appropriate statistically sound choice downstream modeling. can see HTML report explore_data() function batch-corrected data, report batch-corrected data.","code":"# Those fields are mandatory, because we believe that when such a report is # opened after half a year, those infos can be very helpful. report_info <- list(     omics_data_type = \"Glycan\",     data_description = \"clr transformed timeseries fractional abundance     glycoform data of CHO cells, batch corrected\",     data_collection_date = \"September 2024\",     analyst_name = \"Thomas Rauter\",     contact_info = \"thomas.rauter@plus.ac.at\",     project_name = \"DGTX\" )  report_dir <- here::here(     \"results\",     \"explore_data\" ) # TRANSPOSE: make samples rows, features columns data_t <- t(data)  # Handle zeros (simple pseudocount, crude but common) data_t[data_t == 0] <- 1e-6  # Apply CLR clr_data_t <- compositions::clr(data_t)  # Transpose back to original shape: features as rows, samples as columns clr_data <- t(clr_data_t) clr_data <- unclass(clr_data) # splineomics now contains the SplineOmics object. splineomics <- SplineOmics::create_splineomics(     data = clr_data,     meta = meta,     report_info = report_info,     condition = \"Condition\", # Column of meta that contains the levels.     meta_batch_column = \"Batch\" # For batch effect removal in the plots )  # Special print.SplineOmics function leads to selective printing print(splineomics) #> data:SplineOmics Object #> ------------------- #> Number of features (rows): 10  #> Number of samples (columns): 55  #> Meta data columns: 5  #> First few meta columns: #>   sample_name Reactor Time Condition Batch #> 1     E13_120     E13  120  constant     1 #> 2     E13_144     E13  144  constant     1 #> 3     E13_168     E13  168  constant     1 #> Condition: Condition  #> No RNA-seq data provided. #> No annotation provided. #> No spline parameters set. #> P-value adjustment method: BH plots <- SplineOmics::explore_data(     splineomics = splineomics, # SplineOmics object     report_dir = report_dir )"},{"path":"https://csbg.github.io/SplineOmics/articles/glycan-analysis.html","id":"run-limma-spline-analysis","dir":"Articles","previous_headings":"","what":"Run limma spline analysis","title":"Glycan-analysis","text":"example, skipping finding best hyperparameters screen_limma_hyperparams() function, already clear idea use. Lets define parameters put SplineOmics object: term ‘(1|Reactor)’ design formula random effects. Therefore, linear mixed models use model Reactor random effect. Run run_limma_splines() function updated SplineOmics object: Note dataset, Wilcoxon signed rank exact test revealed problem heteroscedasticity data. means variance samples significantly higher stationary phase compared exponential phase. violation assumption homoscedasticity linear models, means derived p-values trustworthy. adress issue, limma function (arrayWeights) downweights samples higher variance, use automatically. , eBayes function limma robust = TRUE argument avoids using variance “outliers” variance shrinkage.","code":"splineomics <- SplineOmics::update_splineomics(     splineomics = splineomics,     use_array_weights = FALSE,     # Reactor as random effect.     design = \"~ 1 + Condition*Time + Batch + (1|Reactor)\",     mode = \"integrated\", # means limma uses the full data for each condition.     spline_params = list(         spline_type = c(\"n\"),          dof = c(2L)      ) ) splineomics <- SplineOmics::run_limma_splines(     splineomics = splineomics ) #> Hint: The data contains negative values.  This may occur if the data has been  transformed (e.g., log-transformed or  normalized) and is valid in such cases.  Ensure that the data preprocessing aligns  with your analysis requirements. #>  #> Ensure the design has no Condition*Time interaction for mode == 'isolated', and includes it for mode == 'integrated'. #>  #> Fitting global model... #>  #> NOTE: If you manually stop run_limma_splines() in RStudio and  used parallelization for variancePartition::dream(), then those parallelized processes may continue running. Use your system's process manager to terminate them manually! #> Warning in .standard_transform(fit_eb, sigma = sqrt(fit_eb$s2.post)): No testable fixed effects were included in the model. #>   Running topTable() will fail. #> Warning in .standard_transform(fit_eb, sigma = sqrt(fit_eb$s2.post)): No testable fixed effects were included in the model. #>   Running topTable() will fail. #> Info Finished limma spline analysis in 0.0 min"},{"path":"https://csbg.github.io/SplineOmics/articles/glycan-analysis.html","id":"build-limma-report","dir":"Articles","previous_headings":"","what":"Build limma report","title":"Glycan-analysis","text":"topTables three limma result categories can used generate p-value histograms volcano plots. can view generated analysis report create_limma_report function .","code":"plots <- SplineOmics::create_limma_report(     splineomics = splineomics,     report_dir = withr::local_tempdir() ) #>  #>  Info Limma report generation completed successfully. #>  Your HTML reports are located in the directory:  /tmp/Rtmp1hSC4g/file984929258cba . #>  Please note that due to embedded files, the reports might be flagged as #>  harmful by other software. Rest assured that they provide no harm."},{"path":"https://csbg.github.io/SplineOmics/articles/glycan-analysis.html","id":"cluster-the-hits-significant-features","dir":"Articles","previous_headings":"","what":"Cluster the hits (significant features)","title":"Glycan-analysis","text":"obtained limma spline results, can cluster hits based temporal pattern (spline shape). define hit setting adj. p-value threshold every level. Hits features (e.g. proteins) adj. p-value threshold. Hierarchical clustering used place every hit one many clusters specified specific level. can view generated analysis report cluster_hits function . discussed , three limma result categories. cluster_hits() report shows results three, present (category 2 3 can generated design formula contains interaction effect).","code":"adj_pthresholds <- c( # 0.05 for both levels     0.05, # exponential     0.05 # stationary )  nr_clusters <- list(     constant = 2,     tshifted = 2 )  plot_info <- list(     y_axis_label = \"Glycan fractional abundance\",     time_unit = \"hours\",     treatment_labels = list(         tshifted = \"temp shift\",         double_spline_plots = \"temp shift\"     ),     treatment_timepoints = list(         tshifted = 146,         double_spline_plots = 146     ) )  # Those are not genes for this glycan analysis here, but this argument expects # the feature names (which usually are gene names, which is why it is called # like this. genes <- rownames(data)  plot_options <- list(     # When meta_replicate_column is not there, all datapoints are blue.     meta_replicate_column = \"Reactor\", # Colors the data points based on Reactor     cluster_heatmap_columns = FALSE )  clustering_results <- SplineOmics::cluster_hits(     splineomics = splineomics,     adj_pthresholds = adj_pthresholds,     nr_clusters = nr_clusters,     genes = genes,     plot_info = plot_info,     plot_options = plot_options,     report_dir = withr::local_tempdir(),     adj_pthresh_avrg_diff_conditions = 0.05,     adj_pthresh_interaction_condition_time = 0.05 ) #> Hint: The data contains negative values.  This may occur if the data has been  transformed (e.g., log-transformed or  normalized) and is valid in such cases.  Ensure that the data preprocessing aligns  with your analysis requirements. #>  #> Ensure the design has no Condition*Time interaction for mode == 'isolated', and includes it for mode == 'integrated'. #>  #>  Performing the clustering... #> For the level:  constant #> For the level:  tshifted #> Generating heatmap... #> Generating cluster mean splines for level:  constant #> Generating spline plots... #> Generating cluster mean splines for level:  tshifted #> Generating spline plots... #> Generating report. This takes a few seconds. #>  #>  Info Clustering the hits completed successfully. #>  Your HTML reports are located in the directory:  /tmp/Rtmp1hSC4g/file98495bad4a63 . #>  Please note that due to embedded files, the reports might be flagged as #>  harmful by other software. Rest assured that they provide no harm. #> 0 clusters for the condition effect #>             (interaction between condition and time) #> Running this function took 0.1 min"},{"path":"https://csbg.github.io/SplineOmics/articles/glycan-analysis.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Glycan-analysis","text":"","code":"#> R version 4.5.1 (2025-06-13) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.5 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.10.0  #> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=de_AT.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=de_AT.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=de_AT.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=de_AT.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: Europe/Vienna #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices datasets  utils     methods   base      #>  #> other attached packages: #> [1] compositions_2.0-8 knitr_1.50         dplyr_1.1.4        here_1.0.1         #> [5] SplineOmics_0.3.7  #>  #> loaded via a namespace (and not attached): #>   [1] RColorBrewer_1.1-3       tensorA_0.36.2.1         rstudioapi_0.17.1        #>   [4] jsonlite_2.0.0           shape_1.4.6.1            magrittr_2.0.3           #>   [7] farver_2.1.2             nloptr_2.2.1             rmarkdown_2.29           #>  [10] GlobalOptions_0.1.2      fs_1.6.6                 ragg_1.4.0               #>  [13] vctrs_0.6.5              minqa_1.2.8              base64enc_0.1-3          #>  [16] htmltools_0.5.8.1        progress_1.2.3           broom_1.0.8              #>  [19] Formula_1.2-5            variancePartition_1.38.0 sass_0.4.10              #>  [22] KernSmooth_2.23-26       bslib_0.9.0              htmlwidgets_1.6.4        #>  [25] desc_1.4.3               pbkrtest_0.5.4           plyr_1.8.9               #>  [28] cachem_1.1.0             lifecycle_1.0.4          iterators_1.0.14         #>  [31] pkgconfig_2.0.3          Matrix_1.7-3             R6_2.6.1                 #>  [34] fastmap_1.2.0            rbibutils_2.3            clue_0.3-66              #>  [37] digest_0.6.37            numDeriv_2016.8-1.1      colorspace_2.1-1         #>  [40] S4Vectors_0.46.0         rprojroot_2.1.0          textshaping_1.0.1        #>  [43] labeling_0.4.3           abind_1.4-8              compiler_4.5.1           #>  [46] aod_1.3.3                withr_3.0.2              doParallel_1.0.17        #>  [49] backports_1.5.0          BiocParallel_1.42.1      carData_3.0-5            #>  [52] gplots_3.2.0             MASS_7.3-65              bayesm_3.1-6             #>  [55] rjson_0.2.23             corpcor_1.6.10           gtools_3.9.5             #>  [58] caTools_1.18.3           tools_4.5.1              zip_2.3.3                #>  [61] remaCor_0.0.18           glue_1.8.0               nlme_3.1-168             #>  [64] grid_4.5.1               cluster_2.1.8.1          reshape2_1.4.4           #>  [67] generics_0.1.4           gtable_0.3.6             tidyr_1.3.1              #>  [70] hms_1.1.3                car_3.1-3                BiocGenerics_0.54.0      #>  [73] ggrepel_0.9.6            foreach_1.5.2            pillar_1.11.0            #>  [76] stringr_1.5.1            limma_3.64.1             robustbase_0.99-4-1      #>  [79] circlize_0.4.16          splines_4.5.1            lattice_0.22-5           #>  [82] renv_1.1.5               gmp_0.7-5                tidyselect_1.2.1         #>  [85] ComplexHeatmap_2.24.1    pbapply_1.7-2            reformulas_0.4.1         #>  [88] IRanges_2.42.0           svglite_2.2.1            RhpcBLASctl_0.23-42      #>  [91] stats4_4.5.1             xfun_0.52                Biobase_2.68.0           #>  [94] statmod_1.5.0            matrixStats_1.5.0        DEoptimR_1.1-3-1         #>  [97] stringi_1.8.7            yaml_2.3.10              boot_1.3-31              #> [100] evaluate_1.0.4           codetools_0.2-19         tibble_3.3.0             #> [103] BiocManager_1.30.26      cli_3.6.5                systemfonts_1.2.3        #> [106] Rdpack_2.6.4             jquerylib_0.1.4          Rcpp_1.1.0               #> [109] EnvStats_3.1.0           png_0.1-8                parallel_4.5.1           #> [112] pkgdown_2.1.3            ggplot2_3.5.2            prettyunits_1.2.0        #> [115] ClusterR_1.3.3           bitops_1.0-9             lme4_1.1-37              #> [118] mvtnorm_1.3-3            lmerTest_3.1-3           scales_1.4.0             #> [121] purrr_1.1.0              crayon_1.5.3             writexl_1.5.4            #> [124] fANCOVA_0.6-1            GetoptLong_1.0.5         rlang_1.1.6"},{"path":"https://csbg.github.io/SplineOmics/articles/limma_result_categories.html","id":"limma-result-categories","dir":"Articles","previous_headings":"","what":"limma Result Categories","title":"limma_result_categories","text":"limma analysis results can divided three categories, defined document: Time Effect: category focuses changes feature (e.g. protein) value occur time within single condition. Average Difference Conditions: category compares average feature values levels within condition, regardless time. Interaction Condition Time: category examines interaction time condition. identifies features whose value changes differently time depending condition.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/limma_result_categories.html","id":"legend","dir":"Articles","previous_headings":"limma Result Categories","what":"Legend:","title":"limma_result_categories","text":"hit feature (e.g. protein) significantly changed time. Levels different factors condition experiment. example, bioreactor phase condition, exponential stationary levels within condition.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/limma_result_categories.html","id":"category-1-time-effect","dir":"Articles","previous_headings":"limma Result Categories","what":"Category 1 (time effect)","title":"limma_result_categories","text":"Temporal pattern within level given feature → Hit","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/limma_result_categories.html","id":"example-of-a-hit","dir":"Articles","previous_headings":"limma Result Categories > Category 1 (time effect)","what":"Example of a Hit","title":"limma_result_categories","text":"hit feature shows clear temporal pattern time. Clear temporal pattern time","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/limma_result_categories.html","id":"example-of-no-hit","dir":"Articles","previous_headings":"limma Result Categories > Category 1 (time effect)","what":"Example of No Hit","title":"limma_result_categories","text":"clear temporal pattern","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/limma_result_categories.html","id":"category-2-average-difference-conditions","dir":"Articles","previous_headings":"limma Result Categories","what":"Category 2 (average difference conditions)","title":"limma_result_categories","text":"Overall mean difference levels given feature → Hit","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/limma_result_categories.html","id":"example-of-a-hit-1","dir":"Articles","previous_headings":"limma Result Categories > Category 2 (average difference conditions)","what":"Example of a Hit","title":"limma_result_categories","text":"clear temporal pattern levels overall mean difference ","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/limma_result_categories.html","id":"example-of-no-hit-1","dir":"Articles","previous_headings":"limma Result Categories > Category 2 (average difference conditions)","what":"Example of No Hit","title":"limma_result_categories","text":"Clear temporal pattern levels overall mean difference feature value .","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/limma_result_categories.html","id":"category-3-interaction-condition-time","dir":"Articles","previous_headings":"limma Result Categories","what":"Category 3 (interaction condition & time)","title":"limma_result_categories","text":"Treatment interacting time feature (time effect changing treatment, feature must different temporal patterns conditions/levels) → Hit","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/limma_result_categories.html","id":"examples-of-hits","dir":"Articles","previous_headings":"limma Result Categories > Category 3 (interaction condition & time)","what":"Examples of Hits","title":"limma_result_categories","text":"Different temporal patterns observed level –> hit category 3. Different temporal patterns feature levels. Different temporal patterns feature levels.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/limma_result_categories.html","id":"example-of-no-hit-2","dir":"Articles","previous_headings":"limma Result Categories > Category 3 (interaction condition & time)","what":"Example of No Hit","title":"limma_result_categories","text":"Overall temporal pattern feature levels.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/limma_result_categories.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"limma_result_categories","text":"","code":"## R version 4.5.1 (2025-06-13) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 22.04.5 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.10.0  ## LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=de_AT.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=de_AT.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=de_AT.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=de_AT.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: Europe/Vienna ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices datasets  utils     methods   base      ##  ## loaded via a namespace (and not attached): ##  [1] digest_0.6.37       desc_1.4.3          R6_2.6.1            ##  [4] fastmap_1.2.0       xfun_0.52           cachem_1.1.0        ##  [7] knitr_1.50          htmltools_0.5.8.1   rmarkdown_2.29      ## [10] lifecycle_1.0.4     cli_3.6.5           sass_0.4.10         ## [13] pkgdown_2.1.3       textshaping_1.0.1   jquerylib_0.1.4     ## [16] renv_1.1.5          systemfonts_1.2.3   compiler_4.5.1      ## [19] rstudioapi_0.17.1   tools_4.5.1         ragg_1.4.0          ## [22] bslib_0.9.0         evaluate_1.0.4      yaml_2.3.10         ## [25] BiocManager_1.30.26 jsonlite_2.0.0      htmlwidgets_1.6.4   ## [28] rlang_1.1.6         fs_1.6.6"},{"path":"https://csbg.github.io/SplineOmics/articles/methylation_data_analysis.html","id":"about-this-vignette","dir":"Articles","previous_headings":"","what":"About this vignette","title":"methylation-data-analysis","text":"tutorial intends showcase explain capabilities SplineOmics package walking real complete methylation data analysis example, start finish. SplineOmics explained detail get-started vignette, proteomics example covered. vignette focused showing methylation data can used, , less details overall package provided . , vignette minimalistic ones, functionalities vignettes used explanations repeated .","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/methylation_data_analysis.html","id":"data-overview","dir":"Articles","previous_headings":"About this vignette","what":"Data Overview","title":"methylation-data-analysis","text":"dataset originates time-series methylation data experiment designed study Chinese Hamster Ovary (CHO) cells. experiment involved cultivating cells eight bioreactors, four bioreactors subjected temperature shift 146 hours (experimental condition) remaining four bioreactors maintained without temperature shift (control condition).","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/methylation_data_analysis.html","id":"timepoints","dir":"Articles","previous_headings":"About this vignette > Data Overview","what":"Timepoints","title":"methylation-data-analysis","text":"Samples collected 19 distinct time points throughout experiment, specifically: \"48h\", \"72h\", \"96h\", \"120h\", \"144h\", \"168h\", \"192h\", \"216h\", \"240h\", \"264h\", \"268h\", \"288h\", \"312h\", \"336h\", \"360h\", \"384h\", \"408h\", \"432h\", \"456h\", cultivation start. time point sampled eight bioreactors, resulting total 130 samples.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/methylation_data_analysis.html","id":"additonal-effects-in-the-experiment-reactor-and-group","dir":"Articles","previous_headings":"About this vignette > Data Overview","what":"Additonal effects in the experiment: Reactor and Group","title":"methylation-data-analysis","text":"experiment, two effects consider: Reactor Group. refers different bioreactors used cell cultivation, can exhibit substantial variability. reactor assigned single condition: either constant temperature temperature-shifted. result, reactor blocked effect. Reactor treated fixed effect simply remove influence. Instead, treated random effect, allows us model variability appropriately. refers two separate groups bioreactors run. apparatus containes 4 bioreactors, amount can run simultaneosly. 4 run initial 4. Group considered batch effect respect condition (constant temperature vs. temperature-shifted). Since reactor blocked effect, variability due reactors directly separated condition. Instead, linear mixed models (LMMs) used attribute reactor random effect, allowing us account variability isolating effects condition. approach ensures analysis appropriately handles hierarchical structure data avoids incorrect conclusions.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/methylation_data_analysis.html","id":"note","dir":"Articles","previous_headings":"About this vignette > Data Overview","what":"Note","title":"methylation-data-analysis","text":"documentation SplineOmics package functions can viewed ","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/methylation_data_analysis.html","id":"load-the-packages","dir":"Articles","previous_headings":"","what":"Load the packages","title":"methylation-data-analysis","text":"","code":"library(SplineOmics) library(readr) # For reading the meta CSV file library(here) # For managing filepaths #> here() starts at /home/thomas/Documents/PhD/projects/DGTX/SplineOmics_hub/SplineOmics library(dplyr) # For data manipulation #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(knitr) # For Showing the head of the data and the meta tables."},{"path":"https://csbg.github.io/SplineOmics/articles/methylation_data_analysis.html","id":"load-the-files","dir":"Articles","previous_headings":"","what":"Load the files","title":"methylation-data-analysis","text":"","code":"data_df <- readRDS(xzfile(system.file(     \"extdata\",     \"methylation_data.rds.xz\",     package = \"SplineOmics\" )))  meta <- readr::read_csv(     system.file(         \"extdata\",         \"methylation_meta.csv\",         package = \"SplineOmics\"     ),     show_col_types = FALSE ) meta$Condition[meta$Condition == \"Temp. Shifted\"] <- \"Temp_shift\""},{"path":"https://csbg.github.io/SplineOmics/articles/methylation_data_analysis.html","id":"show-top-rows-of-data","dir":"Articles","previous_headings":"Load the files","what":"Show top rows of data","title":"methylation-data-analysis","text":"","code":"kable(     head(data),     format = \"markdown\" )"},{"path":"https://csbg.github.io/SplineOmics/articles/methylation_data_analysis.html","id":"show-top-rows-of-meta","dir":"Articles","previous_headings":"Load the files","what":"Show top rows of meta","title":"methylation-data-analysis","text":"","code":"kable(     head(meta),     format = \"markdown\" ) data <- SplineOmics::extract_data(     # The dataframe with the numbers on the left and info on the right.     data = data_df,     # Use this annotation column for the feature names.     feature_name_columns = c(\"feature_names\"),     top_row = 1,     bottom_row = 300,     right_col = 131,     left_col = 2 )"},{"path":"https://csbg.github.io/SplineOmics/articles/methylation_data_analysis.html","id":"perform-eda-exploratory-data-analysis","dir":"Articles","previous_headings":"","what":"Perform EDA (exploratory data analysis)","title":"methylation-data-analysis","text":"","code":"report_info <- list(     omics_data_type = \"EPI\",     data_description = \"Methylation data of CHO cells\",     data_collection_date = \"December 2024\",     analyst_name = \"Thomas Rauter\",     contact_info = \"thomas.rauter@plus.ac.at\",     project_name = \"DGTX\" )  report_dir <- here::here(     \"results\",     \"explore_data\" ) splineomics <- SplineOmics::create_splineomics(     data = data,     meta = meta,     report_info = report_info,     condition = \"Condition\", # Column of meta that contains the levels.     meta_batch_column = \"Group\" # Remove batch effect for plotting. ) plots <- SplineOmics::explore_data(     splineomics = splineomics,     report_dir = withr::local_tempdir() ) #> Making density plots... #> Making violin plots... #> Making PCA plots... #> 25 rows with missing values removed before PCA. #> Making MDS plots... #> 25 rows with missing values removed before MDS #> Making correlation heatmaps... #> Making mean correlation with time plots... #> Making lag1 differences plots... #> Making first lag auto-correlation with time plots... #> 25 rows with missing values removed before firstlag autocorrelation plot #> Making cv plots... #> Warning: Removed 367 rows containing non-finite outside the scale range #> (`stat_density()`). #> Warning: Removed 177 rows containing non-finite outside the scale range #> (`stat_density()`). #> Warning: Removed 190 rows containing non-finite outside the scale range #> (`stat_density()`). #> Warning: Removed 177 rows containing non-finite outside the scale range #> (`stat_ydensity()`). #> Warning: Removed 177 rows containing non-finite outside the scale range #> (`stat_boxplot()`). #> Warning: Removed 190 rows containing non-finite outside the scale range #> (`stat_ydensity()`). #> Warning: Removed 190 rows containing non-finite outside the scale range #> (`stat_boxplot()`). #> Making density plots... #> Making violin plots... #> Making PCA plots... #> 25 rows with missing values removed before PCA. #> Making MDS plots... #> 25 rows with missing values removed before MDS #> Making correlation heatmaps... #> Making mean correlation with time plots... #> Making lag1 differences plots... #> Making first lag auto-correlation with time plots... #> 25 rows with missing values removed before firstlag autocorrelation plot #> Making cv plots... #> Warning: Removed 367 rows containing non-finite outside the scale range #> (`stat_density()`). #> Warning: Removed 177 rows containing non-finite outside the scale range #> (`stat_density()`). #> Warning: Removed 190 rows containing non-finite outside the scale range #> (`stat_density()`). #> Warning: Removed 177 rows containing non-finite outside the scale range #> (`stat_ydensity()`). #> Warning: Removed 177 rows containing non-finite outside the scale range #> (`stat_boxplot()`). #> Warning: Removed 190 rows containing non-finite outside the scale range #> (`stat_ydensity()`). #> Warning: Removed 190 rows containing non-finite outside the scale range #> (`stat_boxplot()`). #>  #>  Info Exploratory data analysis completed successfully. #>  Your HTML reports are located in the directory:  /tmp/RtmpXGCUJM/file9925dfb9d44 . #>  Please note that due to embedded files, the reports might be flagged as #>  harmful by other software. Rest assured that they provide no harm."},{"path":"https://csbg.github.io/SplineOmics/articles/methylation_data_analysis.html","id":"run-limma-spline-analysis","dir":"Articles","previous_headings":"","what":"Run limma spline analysis","title":"methylation-data-analysis","text":"example, skipping finding best hyperparameters screen_limma_hyperparams() function, already clear idea use. Lets define parameters put SplineOmics object: Run run_limma_splines() function:","code":"spline_params <- list(     spline_type = c(\"n\"), # natural cubic splines     dof = c(3L) # Degree of freedom of 3 for the splines. )  design <- \"~ 1 + Condition*Time + Group + (1|Reactor)\"  splineomics <- SplineOmics::update_splineomics(     splineomics = splineomics,     data = data,     design = design,     mode = \"integrated\",     spline_params = spline_params,     bp_cfg = c( # For parallel computing for variancePartition::dream (lmm)         n_cores = 1, # For the vignette, just use one core.         blas_threads = 1     ) ) splineomics <- SplineOmics::run_limma_splines(     splineomics = splineomics ) #> Hint: The data contains missing values (NA). Ensure that imputation or handling of missing values aligns with your analysis requirements. Note that limma can handle missing values (it just ignores them), and therefore SplineOmics can also handle them. #>  #> Ensure the design has no Condition*Time interaction for mode == 'isolated', and includes it for mode == 'integrated'. #>  #> Fitting global model... #>  #> NOTE: If you manually stop run_limma_splines() in RStudio and  used parallelization for variancePartition::dream(), then those parallelized processes may continue running. Use your system's process manager to terminate them manually! #> Warning in variancePartition::dream(exprObj = data, formula = stats::as.formula(design), : Model failed for 8 responses. #>   See errors with attr(., 'errors') #> Warning in .standard_transform(fit_eb, sigma = sqrt(fit_eb$s2.post)): No testable fixed effects were included in the model. #>   Running topTable() will fail. #> Warning in .standard_transform(fit_eb, sigma = sqrt(fit_eb$s2.post)): No testable fixed effects were included in the model. #>   Running topTable() will fail. #> Info Finished limma spline analysis in 0.2 min"},{"path":"https://csbg.github.io/SplineOmics/articles/methylation_data_analysis.html","id":"build-limma-report","dir":"Articles","previous_headings":"","what":"Build limma report","title":"methylation-data-analysis","text":"topTables three limma result categories can used generate p-value histograms volcano plots.","code":"plots <- SplineOmics::create_limma_report(     splineomics = splineomics,     report_dir = withr::local_tempdir() ) #>  #>  Info Limma report generation completed successfully. #>  Your HTML reports are located in the directory:  /tmp/RtmpXGCUJM/file99251d5cd471 . #>  Please note that due to embedded files, the reports might be flagged as #>  harmful by other software. Rest assured that they provide no harm."},{"path":"https://csbg.github.io/SplineOmics/articles/methylation_data_analysis.html","id":"cluster-the-hits-significant-features","dir":"Articles","previous_headings":"","what":"Cluster the hits (significant features)","title":"methylation-data-analysis","text":"","code":"adj_pthresholds <- c(     0.05, # constant (temperature)     0.05 # temp_shift )  nr_clusters <- list(     Constant   = 2:6,     Temp_shift = 2:6 )  report_dir <- here::here(     \"results\",     \"clustering_reports\" )  plot_info <- list( # For the spline plots     y_axis_label = \"beta value\",     time_unit = \"hours\",     treatment_labels = list(         Temp_shift = \"temp shift\",         double_spline_plots = \"temp shift\"     ),     treatment_timepoints = list(         Temp_shift = 146,         double_spline_plots = 146     ) )  genes <- rownames(data)  plot_options <- list(     # When meta_replicate_column is not there, all datapoints are blue.     meta_replicate_column = \"Reactor\" # Colors the data points based on Reactor )  clustering_results <- SplineOmics::cluster_hits(     splineomics = splineomics,     adj_pthresholds = adj_pthresholds,     nr_clusters = nr_clusters,     genes = genes,     plot_info = plot_info,     plot_options = plot_options,     report_dir = withr::local_tempdir(),     adj_pthresh_avrg_diff_conditions = 0.05,     adj_pthresh_interaction_condition_time = 0.05 ) #> Hint: The data contains missing values (NA). Ensure that imputation or handling of missing values aligns with your analysis requirements. Note that limma can handle missing values (it just ignores them), and therefore SplineOmics can also handle them. #>  #> Ensure the design has no Condition*Time interaction for mode == 'isolated', and includes it for mode == 'integrated'. #>  #>  Performing the clustering... #> For the level:  Constant #> For the level:  Temp_shift #> Generating heatmap... #> Generating cluster mean splines for level:  Constant #> Generating spline plots... #> Generating cluster mean splines for level:  Temp_shift #> Generating spline plots... #> Generating report. This takes a few seconds. #>  #>  Info Clustering the hits completed successfully. #>  Your HTML reports are located in the directory:  /tmp/RtmpXGCUJM/file9925429ed238 . #>  Please note that due to embedded files, the reports might be flagged as #>  harmful by other software. Rest assured that they provide no harm. #> 5 clusters for the condition effect #>             (interaction between condition and time) #> Running this function took 0.4 min"},{"path":"https://csbg.github.io/SplineOmics/articles/methylation_data_analysis.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"methylation-data-analysis","text":"","code":"#> R version 4.5.1 (2025-06-13) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.5 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.10.0  #> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=de_AT.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=de_AT.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=de_AT.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=de_AT.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: Europe/Vienna #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices datasets  utils     methods   base      #>  #> other attached packages: #> [1] knitr_1.50        dplyr_1.1.4       here_1.0.1        readr_2.1.5       #> [5] SplineOmics_0.3.7 #>  #> loaded via a namespace (and not attached): #>   [1] RColorBrewer_1.1-3       rstudioapi_0.17.1        jsonlite_2.0.0           #>   [4] shape_1.4.6.1            magrittr_2.0.3           farver_2.1.2             #>   [7] nloptr_2.2.1             rmarkdown_2.29           GlobalOptions_0.1.2      #>  [10] fs_1.6.6                 ragg_1.4.0               vctrs_0.6.5              #>  [13] minqa_1.2.8              base64enc_0.1-3          htmltools_0.5.8.1        #>  [16] progress_1.2.3           broom_1.0.8              Formula_1.2-5            #>  [19] variancePartition_1.38.0 sass_0.4.10              KernSmooth_2.23-26       #>  [22] bslib_0.9.0              htmlwidgets_1.6.4        desc_1.4.3               #>  [25] pbkrtest_0.5.4           plyr_1.8.9               cachem_1.1.0             #>  [28] lifecycle_1.0.4          iterators_1.0.14         pkgconfig_2.0.3          #>  [31] Matrix_1.7-3             R6_2.6.1                 fastmap_1.2.0            #>  [34] rbibutils_2.3            clue_0.3-66              digest_0.6.37            #>  [37] numDeriv_2016.8-1.1      colorspace_2.1-1         S4Vectors_0.46.0         #>  [40] rprojroot_2.1.0          textshaping_1.0.1        labeling_0.4.3           #>  [43] abind_1.4-8              compiler_4.5.1           bit64_4.6.0-1            #>  [46] aod_1.3.3                withr_3.0.2              doParallel_1.0.17        #>  [49] backports_1.5.0          BiocParallel_1.42.1      carData_3.0-5            #>  [52] gplots_3.2.0             MASS_7.3-65              rjson_0.2.23             #>  [55] corpcor_1.6.10           gtools_3.9.5             caTools_1.18.3           #>  [58] tools_4.5.1              zip_2.3.3                remaCor_0.0.18           #>  [61] glue_1.8.0               nlme_3.1-168             grid_4.5.1               #>  [64] cluster_2.1.8.1          reshape2_1.4.4           generics_0.1.4           #>  [67] gtable_0.3.6             tzdb_0.5.0               tidyr_1.3.1              #>  [70] hms_1.1.3                car_3.1-3                BiocGenerics_0.54.0      #>  [73] ggrepel_0.9.6            foreach_1.5.2            pillar_1.11.0            #>  [76] stringr_1.5.1            vroom_1.6.5              limma_3.64.1             #>  [79] circlize_0.4.16          splines_4.5.1            lattice_0.22-5           #>  [82] renv_1.1.5               gmp_0.7-5                bit_4.6.0                #>  [85] tidyselect_1.2.1         ComplexHeatmap_2.24.1    pbapply_1.7-2            #>  [88] reformulas_0.4.1         IRanges_2.42.0           svglite_2.2.1            #>  [91] RhpcBLASctl_0.23-42      stats4_4.5.1             xfun_0.52                #>  [94] Biobase_2.68.0           statmod_1.5.0            matrixStats_1.5.0        #>  [97] stringi_1.8.7            yaml_2.3.10              boot_1.3-31              #> [100] evaluate_1.0.4           codetools_0.2-19         tibble_3.3.0             #> [103] BiocManager_1.30.26      cli_3.6.5                systemfonts_1.2.3        #> [106] Rdpack_2.6.4             jquerylib_0.1.4          Rcpp_1.1.0               #> [109] EnvStats_3.1.0           png_0.1-8                parallel_4.5.1           #> [112] pkgdown_2.1.3            ggplot2_3.5.2            prettyunits_1.2.0        #> [115] ClusterR_1.3.3           bitops_1.0-9             lme4_1.1-37              #> [118] mvtnorm_1.3-3            lmerTest_3.1-3           scales_1.4.0             #> [121] purrr_1.1.0              crayon_1.5.3             writexl_1.5.4            #> [124] fANCOVA_0.6-1            GetoptLong_1.0.5         rlang_1.1.6"},{"path":"https://csbg.github.io/SplineOmics/articles/proteomics_analysis.html","id":"about-this-tutorial","dir":"Articles","previous_headings":"","what":"About this tutorial","title":"proteomics_analysis","text":"tutorial intends showcase explain capabilities SplineOmics package walking real complete example, start finish.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/proteomics_analysis.html","id":"example-overview","dir":"Articles","previous_headings":"About this tutorial","what":"Example Overview","title":"proteomics_analysis","text":"example involves time-series proteomics experiment, CHO (chinese hamster ovary) cells cultivated three bioreactors (three biological replicates). experiment includes following setup: Samples taken exponential stationary growth phases. 60 minutes feeding 15, 60, 90, 120, 240 minutes feeding","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/proteomics_analysis.html","id":"analysis-goals","dir":"Articles","previous_headings":"About this tutorial","what":"Analysis Goals","title":"proteomics_analysis","text":"main goals analysis : Identify proteins significant temporal changes: 7162 cellular proteins, objective detect proteins show significant change time CHO cells fed (.e., impact feeding). Cluster hits based temporal patterns: proteins (hits) significant temporal changes clustered according time-based patterns. Perform gene set enrichment analysis: cluster, gene set enrichment analysis performed determine specific biological processes - downregulated feeding.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/proteomics_analysis.html","id":"note","dir":"Articles","previous_headings":"About this tutorial","what":"Note","title":"proteomics_analysis","text":"documentation SplineOmics package functions can viewed ","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/proteomics_analysis.html","id":"load-the-packages","dir":"Articles","previous_headings":"","what":"Load the packages","title":"proteomics_analysis","text":"","code":"# library(SplineOmics) library(devtools) #> Loading required package: usethis devtools::load_all() #> ℹ Loading SplineOmics library(here) # For managing filepaths #> here() starts at /home/thomas/Documents/PhD/projects/DGTX/SplineOmics_hub/SplineOmics library(dplyr) # For data manipulation #>  #> Attaching package: 'dplyr' #> The following object is masked from 'package:testthat': #>  #>     matches #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(knitr) # For Showing the head of the data and the meta tables. library(org.Mm.eg.db) # BioConductor database #> Loading required package: AnnotationDbi #> Loading required package: stats4 #> Loading required package: BiocGenerics #> Loading required package: generics #>  #> Attaching package: 'generics' #> The following object is masked from 'package:dplyr': #>  #>     explain #> The following objects are masked from 'package:base': #>  #>     as.difftime, as.factor, as.ordered, intersect, is.element, setdiff, #>     setequal, union #>  #> Attaching package: 'BiocGenerics' #> The following object is masked from 'package:dplyr': #>  #>     combine #> The following objects are masked from 'package:SplineOmics': #>  #>     sd, var #> The following objects are masked from 'package:stats': #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from 'package:base': #>  #>     anyDuplicated, aperm, append, as.data.frame, basename, cbind, #>     colnames, dirname, do.call, duplicated, eval, evalq, Filter, Find, #>     get, grep, grepl, is.unsorted, lapply, Map, mapply, match, mget, #>     order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank, #>     rbind, Reduce, rownames, sapply, saveRDS, table, tapply, unique, #>     unsplit, which.max, which.min #> Loading required package: Biobase #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. #> Loading required package: IRanges #> Loading required package: S4Vectors #>  #> Attaching package: 'S4Vectors' #> The following objects are masked from 'package:dplyr': #>  #>     first, rename #> The following object is masked from 'package:SplineOmics': #>  #>     rename #> The following object is masked from 'package:utils': #>  #>     findMatches #> The following objects are masked from 'package:base': #>  #>     expand.grid, I, unname #>  #> Attaching package: 'IRanges' #> The following objects are masked from 'package:dplyr': #>  #>     collapse, desc, slice #>  #> Attaching package: 'AnnotationDbi' #> The following object is masked from 'package:dplyr': #>  #>     select #> The following object is masked from 'package:SplineOmics': #>  #>     select #>"},{"path":"https://csbg.github.io/SplineOmics/articles/proteomics_analysis.html","id":"load-the-files","dir":"Articles","previous_headings":"","what":"Load the files","title":"proteomics_analysis","text":"example, proteomics_data.rds file contains numeric values (intensities) also feature descriptions, gene protein name (= annotation part). Usually, load data example Excel file, .rds file compressed, reason format chosen limit size SplineOmics package. file meta.xlsx contains meta information, descriptions columns numeric values data. (example files part package don’t present system). Please note dataset actual experimental dataset, annotation information, gene names, removed since yet published time making SplineOmics package public. Instead, dataset includes randomly generated gene symbols gene names corresponding Cricetulus griseus (Chinese Hamster) row. intended demonstrate functionality package. , dataset subsamples 1165 proteins limit size package. left part data contains numeric values, right part annotation info, can copied separate dataframe, shown .","code":"data <- readRDS(xzfile(system.file(     \"extdata\",     \"proteomics_data.rds.xz\",     package = \"SplineOmics\" )))  meta <- read.csv(     system.file(         \"extdata\",         \"proteomics_meta.csv\",         package = \"SplineOmics\"     ),     stringsAsFactors = FALSE )  # Extract the annotation part from the dataframe. first_na_col <- which(is.na(data[1, ]))[1] annotation <- data |>     dplyr::select((first_na_col + 1):ncol(data)) |>     dplyr::slice(-c(1:3))"},{"path":"https://csbg.github.io/SplineOmics/articles/proteomics_analysis.html","id":"show-top-rows-of-data","dir":"Articles","previous_headings":"Load the files","what":"Show top rows of data","title":"proteomics_analysis","text":"","code":"kable(     head(data),     format = \"markdown\" )"},{"path":"https://csbg.github.io/SplineOmics/articles/proteomics_analysis.html","id":"show-top-rows-of-meta","dir":"Articles","previous_headings":"Load the files","what":"Show top rows of meta","title":"proteomics_analysis","text":"","code":"kable(     head(meta),     format = \"markdown\" )"},{"path":"https://csbg.github.io/SplineOmics/articles/proteomics_analysis.html","id":"show-top-rows-of-annotation","dir":"Articles","previous_headings":"Load the files","what":"Show top rows of annotation","title":"proteomics_analysis","text":"Three comments characteristics input data : data must contain NA values special values, must consist numbers. example, original proteomics data contained NA values, resolved case imputation (replacing NA values numbers). features data ideally normally distributed analyzed limma, fits linear model feature. models rely statistical tests assume normality. Although limma can still function data normally distributed, resulting p-values may become less reliable. reason, strongly recommended transform data using techniques log2 transformation features deviate normality. Proper transformation helps ensure assumptions underlying statistical tests met, leading accurate trustworthy results. samples data independent . Linear models, used limma, assume observations (samples) independent. dependency samples (e.g., repeated measurements subject), assumption violated, can lead incorrect statistical inferences.","code":"kable(     head(annotation),     format = \"markdown\" )"},{"path":"https://csbg.github.io/SplineOmics/articles/proteomics_analysis.html","id":"bring-the-inputs-into-the-standardized-format","dir":"Articles","previous_headings":"Load the files","what":"Bring the Inputs into the Standardized Format","title":"proteomics_analysis","text":"Since data format required SplineOmics package, needs processing. SplineOmics package requires data numeric matrix, element allowed anything else number. can done commands R, file specific structure, function extract_data() can handle easily","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/proteomics_analysis.html","id":"usage-of-the-extract_data-function","dir":"Articles","previous_headings":"Load the files > Bring the Inputs into the Standardized Format","what":"Usage of the extract_data() function","title":"proteomics_analysis","text":"extract_data() can: Extract data matrix field specifying location corners matrix. Create column headers information written cells respective columns data matrix field. annotation columns specified, rowheaders increasing numbers. annotation columns specified (like \"First.Protein.Description\" \"ID\" example), combined form rowheaders (feature names).","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/proteomics_analysis.html","id":"usage-in-plotting","dir":"Articles","previous_headings":"Load the files > Bring the Inputs into the Standardized Format","what":"Usage in Plotting","title":"proteomics_analysis","text":"generated rowheaders used label plots feature shown individually, : Spline plots datapoints individual feature.","code":"data <- SplineOmics::extract_data(     # The dataframe with the numbers on the left and info on the right.     data = data,     # Use this annotation column for the feature names.     feature_name_columns = c(\"Gene_name\"),     use_row_index = TRUE,     top_row = 4,     bottom_row = 1165,     right_col = 37,     left_col = 2 )"},{"path":"https://csbg.github.io/SplineOmics/articles/proteomics_analysis.html","id":"perform-eda-exploratory-data-analysis","dir":"Articles","previous_headings":"","what":"Perform EDA (exploratory data analysis)","title":"proteomics_analysis","text":"Now data required format (numeric matrix) can go . first step analyzing data typically Exploratory Data Analysis (EDA). EDA involves summarizing main characteristics data, often visualizations.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/proteomics_analysis.html","id":"common-eda-plots","dir":"Articles","previous_headings":"Perform EDA (exploratory data analysis)","what":"Common EDA Plots","title":"proteomics_analysis","text":"common types EDA plots include: Density distributions Boxplots PCA (Principal Component Analysis) Correlation heatmaps , can generate plots lines R code. However, prefer, convenience, explore_data() function can handle .","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/proteomics_analysis.html","id":"using-explore_data-for-eda","dir":"Articles","previous_headings":"Perform EDA (exploratory data analysis)","what":"Using explore_data() for EDA","title":"proteomics_analysis","text":"SplineOmics package provides function explore_data() perform EDA. function requires following arguments: data: numeric data matrix. meta: metadata table. condition: name column metadata contains levels experiment (e.g., “Exponential” “Stationary”). report_info: list contains general information analysis, name analyst datatype (e.g. proteomics)","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/proteomics_analysis.html","id":"optional-arguments","dir":"Articles","previous_headings":"Perform EDA (exploratory data analysis)","what":"Optional Arguments","title":"proteomics_analysis","text":"addition required arguments, explore_data() offers several optional arguments: meta_batch_column: name column contains first batch effect. meta_batch2_column: name column contains second batch effect. least one batch column provided, function : Use removeBatchEffect() function limma remove batch effect data plotting. Generate two EDA HTML reports: one uncorrected data one batch-corrected data.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/proteomics_analysis.html","id":"output-and-report-options","dir":"Articles","previous_headings":"Perform EDA (exploratory data analysis)","what":"Output and Report Options","title":"proteomics_analysis","text":"default, reports saved current working directory, location can changed using report_dir argument. function also returns plots generated analysis, can modify according needs. want report generated, can set report argument FALSE (example just want figures R environment)","code":"# Those fields are mandatory, because we believe that when such a report is # opened after half a year, those infos can be very helpful. report_info <- list(     omics_data_type = \"PTX\",     data_description = \"Proteomics data of CHO cells\",     data_collection_date = \"February 2024\",     analyst_name = \"Thomas Rauter\",     contact_info = \"thomas.rauter@plus.ac.at\",     project_name = \"DGTX\" )  report_dir <- here::here(     \"results\",     \"explore_data\" )"},{"path":"https://csbg.github.io/SplineOmics/articles/proteomics_analysis.html","id":"splineomics-object","dir":"Articles","previous_headings":"Perform EDA (exploratory data analysis)","what":"SplineOmics Object","title":"proteomics_analysis","text":"SplineOmics package, multiple functions take arguments input. make easier avoid errors, decided arguments provided individually functions, stored R6 object (type ‘SplineOmics’) object passed functions. Additionally, functions generate intermediate output, just necessary next function workflow, also just passed along updating SplineOmics object. don’t worry .","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/proteomics_analysis.html","id":"functionality","dir":"Articles","previous_headings":"Perform EDA (exploratory data analysis) > SplineOmics Object","what":"Functionality","title":"proteomics_analysis","text":"SplineOmics object can seen container necessary arguments stored. function retrieves required arguments object potentially adds new data results back .","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/proteomics_analysis.html","id":"documentation","dir":"Articles","previous_headings":"Perform EDA (exploratory data analysis) > SplineOmics Object","what":"Documentation","title":"proteomics_analysis","text":"documentation function creates SplineOmics object can found documentation function updates [documentation function takes SplineOmics object input specifies arguments must present SplineOmics object passed respective function.","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/proteomics_analysis.html","id":"required-arguments-create_splineomics","dir":"Articles","previous_headings":"Perform EDA (exploratory data analysis)","what":"Required Arguments create_splineomics()","title":"proteomics_analysis","text":"data: matrix data meta: Metadata associated data. condition: Meta column name levels (e.g., Exponential Stationary).","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/proteomics_analysis.html","id":"optional-arguments-create_splineomics","dir":"Articles","previous_headings":"Perform EDA (exploratory data analysis)","what":"Optional Arguments create_splineomics()","title":"proteomics_analysis","text":"rna_seq_data: object containing preprocessed RNA-seq data, output limma::voom function. annotation: dataframe feature descriptions data. report_info: list containing general information analysis. meta_batch_column: Column meta batch information. meta_batch2_column: Column secondary meta batch information. design: limma design formula spline_params: Parameters spline functions. Now SplineOmics object defined, can perform exploratory data analysis. can see HTML report explore_data() function batch-corrected data, report batch-corrected data. Note report linked vignette might created older version SplineOmics, updated yet. EDA plots can tell range things. plots HTML report grouped three categories: Distribution Variability Analysis, Time Series Analysis, Dimensionality Reduction Clustering. look correlation heatmaps HTML report, can see samples E12_TP05_Exponential E10_TP10_Stationary stick . Seeing , might want remove data.","code":"# splineomics now contains the SplineOmics object. splineomics <- SplineOmics::create_splineomics(     data = data,     meta = meta,     annotation = annotation,     report_info = report_info,     condition = \"Phase\", # Column of meta that contains the levels.     meta_batch_column = \"Reactor\" # For batch effect removal )  # Special print.SplineOmics function leads to selective printing print(splineomics) #> data:SplineOmics Object #> ------------------- #> Number of features (rows): 1162  #> Number of samples (columns): 36  #> Meta data columns: 5  #> First few meta columns: #>              Sample.ID Reactor Time.Point       Phase Time #> 1 E09_TP01_Exponential     E09       TP01 Exponential  -60 #> 2 E10_TP01_Exponential     E10       TP01 Exponential  -60 #> 3 E12_TP01_Exponential     E12       TP01 Exponential  -60 #> Condition: Phase  #> No RNA-seq data provided. #> Annotation provided with 1162 entries. #> No spline parameters set. #> P-value adjustment method: BH plots <- SplineOmics::explore_data(     splineomics = splineomics, # SplineOmics object     report_dir = withr::local_tempdir() ) #> Making density plots... #> Making violin plots... #> Making PCA plots... #> Making MDS plots... #> Making correlation heatmaps... #> Subsampled to top 1000 most variable features (after filtering rows with > 20% missing) for correlation heatmap. #> Making mean correlation with time plots... #> Making lag1 differences plots... #> Making first lag auto-correlation with time plots... #> Making cv plots... #> Making density plots... #> Making violin plots... #> Making PCA plots... #> Making MDS plots... #> Making correlation heatmaps... #> Subsampled to top 1000 most variable features (after filtering rows with > 20% missing) for correlation heatmap. #> Making mean correlation with time plots... #> Making lag1 differences plots... #> Making first lag auto-correlation with time plots... #> Making cv plots... #>  #>  Info Exploratory data analysis completed successfully. #>  Your HTML reports are located in the directory:  /tmp/Rtmp9JzcdA/file14cc67937913c . #>  Please note that due to embedded files, the reports might be flagged as #>  harmful by other software. Rest assured that they provide no harm."},{"path":"https://csbg.github.io/SplineOmics/articles/proteomics_analysis.html","id":"run-limma-spline-analysis","dir":"Articles","previous_headings":"","what":"Run limma spline analysis","title":"proteomics_analysis","text":"Now decide parameters run limma spline analysis. design formula, must specify either ‘isolated’ ‘integrated’. Isolated means limma determines results level using data level. Integrated means limma determines results levels using full dataset (levels). integrated mode, condition column (Phase) must included design. Isolated means limma uses part dataset belongs level obtain results level. generate limma result categories 2 3 () Run run_limma_splines() function updated SplineOmics object: output function run_limma_splines() named list, element specific “category” results. Refer document explanation different result categories. elements list, containing elements respective limma topTables, either level comparison two levels. element “time_effect” list, element topTable p-value feature respective level reported. element “avrg_diff_conditions” list contains elements topTables, represent comparison average differences levels. element “interaction_condition_time” list contains elements topTables, represent interaction levels (includes time average differences)","code":"splineomics <- SplineOmics::update_splineomics(     splineomics = splineomics,     design = \"~ 1 + Phase*Time + Reactor\", # best design formula     mode = \"integrated\", # means limma uses the full data for each condition.     # States explicitly that there is no problem of heteroscedasticity and     # therefore, this does not need to be adressed. Setting it to TRUE would     # mean     # the opposite, and when setting it to NULL, it means it should be handled     # implicitly. For details, see Reference     # documentation of the create_splineomics() function.     use_array_weights = FALSE,     spline_params = list(         spline_type = c(\"n\"), # natural cubic splines (take these if unsure)         # If you are unsure about which dof, start with 2 and increase         dof = c(2L)      ) ) splineomics <- SplineOmics::run_limma_splines(     splineomics = splineomics ) #>  #> Ensure the design has no Condition*Time interaction for mode == 'isolated', and includes it for mode == 'integrated'. #>  #> Fitting global model... #> Info Finished limma spline analysis in 0.0 min"},{"path":"https://csbg.github.io/SplineOmics/articles/proteomics_analysis.html","id":"build-limma-report","dir":"Articles","previous_headings":"","what":"Build limma report","title":"proteomics_analysis","text":"topTables three limma result categories can used generate p-value histograms volcano plots. can view generated analysis report create_limma_report function . report contains p-value histograms three limma result categories volcano plot category 2. Embedded file downloadable limma topTables results category 1 mode ‘isolated’ also results category 2 3 mode ‘integrated’. Note upcoming cluster_hits() function report, embedded file contain clustered significant features result category 1.","code":"plots <- SplineOmics::create_limma_report(     splineomics = splineomics,     report_dir = withr::local_tempdir() ) #>  #>  Info Limma report generation completed successfully. #>  Your HTML reports are located in the directory:  /tmp/Rtmp9JzcdA/file14cc61d7e0814 . #>  Please note that due to embedded files, the reports might be flagged as #>  harmful by other software. Rest assured that they provide no harm."},{"path":"https://csbg.github.io/SplineOmics/articles/proteomics_analysis.html","id":"cluster-the-hits-significant-features","dir":"Articles","previous_headings":"","what":"Cluster the hits (significant features)","title":"proteomics_analysis","text":"obtained limma spline results, can cluster hits based temporal pattern (spline shape). define hit setting adj. p-value threshold every level. Hits features (e.g. proteins) adj. p-value threshold. Hierarchical clustering used place every hit one many clusters specified specific level. Run function: can view generated analysis report cluster_hits function . discussed , three limma result categories. cluster_hits() report shows results three, present (category 2 3 can generated design formula contains interaction effect).","code":"# Important note: When you define parameters for the levels, always define them # in the order those levels appear in the meta condition column! Otherwise, # there will be a mixup!  adj_pthresholds <- c(     0.05,     0.05 )  # The amount of clusters can be a fixed number (e.g. 6) or a range. When you # specify a range (e.g. 2:3, which corresponds to 2 3 in the vector) then the # cluster_hits() function tries all those cluster numbers and picks the one with # the highest silhouette score (automatic cluster number identification). When # you don't want to have a clustering for a level, write 1 for the cluster # number for that level. nr_clusters <- list(     Exponential = 6, # specifically 6 clusters for the exponential phase level     Stationary = 2:3 # range of cluster numbers for the stationary phase level )  plot_info <- list( # For the spline plots     y_axis_label = \"log2 intensity\",     time_unit = \"min\", # our measurements were in minutes     treatment_labels = list(         Exponential = \"feeding\",         Stationary = \"feeding\",         double_spline_plots = \"feeding\"     ),     treatment_timepoints = list(         Exponential = 0,         Stationary = 0,         double_spline_plots = 0     ) )   # Get all the gene names. They are used for generating files # which contents can be directly used as the input for the Enrichr webtool, # if you prefer to manually perform the enrichment. Those files are # embedded in the output HTML report and can be downloaded from there. gene_column_name <- \"Gene_symbol\" genes <- annotation[[gene_column_name]]  plot_options <- list(     # When meta_replicate_column is not there, all datapoints are blue.     meta_replicate_column = \"Reactor\", # Colors the data points based on Reactor     cluster_heatmap_columns = FALSE # Per default FALSE, just for demonstration ) report_dir <- file.path(tempdir(), \"splineomics_report\") dir.create(report_dir, showWarnings = FALSE, recursive = TRUE)  clustering_results <- SplineOmics::cluster_hits(     splineomics = splineomics,     adj_pthresholds = adj_pthresholds,     nr_clusters = nr_clusters,     genes = genes,     plot_info = plot_info,     plot_options = plot_options,     report_dir = report_dir,     adj_pthresh_avrg_diff_conditions = 0.05,     adj_pthresh_interaction_condition_time = 0.05 ) #>  #> Ensure the design has no Condition*Time interaction for mode == 'isolated', and includes it for mode == 'integrated'. #>  #>  Performing the clustering... #> For the level:  Exponential #> For the level:  Stationary #> Generating heatmap... #> Generating cluster mean splines for level:  Exponential #> Generating spline plots... #> Generating cluster mean splines for level:  Stationary #> Generating spline plots... #> Generating report. This takes a few seconds. #>  #>  Info Clustering the hits completed successfully. #>  Your HTML reports are located in the directory:  /tmp/Rtmp9JzcdA/splineomics_report . #>  Please note that due to embedded files, the reports might be flagged as #>  harmful by other software. Rest assured that they provide no harm. #> 0 clusters for the condition effect #>             (interaction between condition and time) #> Running this function took 0.2 min"},{"path":"https://csbg.github.io/SplineOmics/articles/proteomics_analysis.html","id":"perform-overrepresentation-analysis-ora","dir":"Articles","previous_headings":"","what":"Perform overrepresentation analysis (ORA)","title":"proteomics_analysis","text":"clustered hits identified, subsequent step gain biological insights perform ORA , respective genes can assigned clustered hit, ORA can carried . proceed, Enrichr databases choice need downloaded: Per default file placed current working directory, root dir R project. run ORA, downloaded database file loaded dataframe. , optionally, clusterProfiler parameters report dir can specified. function run_ora() runs ORA using clusterProfiler, generates HTML report returns ORA dotplots R. function runs clusterProfiler clusters levels, generates HTML report: can view generated analysis report run_ora function . report first shows enrichment results, 2 genes supported term, tabular format. table terms < 2 genes supporting can downloaded clicking button table. dotplots , every row term specific database, columns respective clusters. color scale contains info odds ratio size -log10 adj. p-value. terms > 2 genes support included plot. , cluster, just maximally 5 terms shown (terms highest odds ratios). Note example cluster 1 already 5 terms, cluster 2 , gets term also found cluster 1, term included sixth term cluster 1, way maximum 5 can exceeded. phase, like stationary , lead enrichment results, stated red message.","code":"# Create a temporary directory for R CMD check results_dir <- file.path(tempdir(), \"ora\") dir.create(report_dir, showWarnings = FALSE, recursive = TRUE)  # Specify which databases you want to download from Enrichr gene_set_lib <- c(     \"WikiPathways_2019_Human\",     \"NCI-Nature_2016\",     \"TRRUST_Transcription_Factors_2019\",     \"MSigDB_Hallmark_2020\",     \"GO_Cellular_Component_2018\",     \"CORUM\",     \"KEGG_2019_Human\",     \"TRANSFAC_and_JASPAR_PWMs\",     \"ENCODE_and_ChEA_Consensus_TFs_from_ChIP-X\",     \"GO_Biological_Process_2018\",     \"GO_Molecular_Function_2018\",     \"Human_Gene_Atlas\" )  SplineOmics::download_enrichr_databases(     gene_set_lib = gene_set_lib,     output_dir = results_dir,     filename = \"databases.tsv\" ) # Specify the filepath of the TSV file with the database info downloaded_dbs_filepath <- file.path(results_dir, \"databases.tsv\")  # Load the file databases <- read.delim(     downloaded_dbs_filepath,     sep = \"\\t\",     stringsAsFactors = FALSE )  # Specify the clusterProfiler parameters clusterProfiler_params <- list(     pvalueCutoff = 0.05,     pAdjustMethod = \"BH\",     minGSSize = 10,     maxGSSize = 500,     qvalueCutoff = 0.2 ) result <- SplineOmics::run_ora(     cluster_table = clustering_results[[\"cluster_table\"]],     databases = databases,     clusterProfiler_params = clusterProfiler_params,     report_info = report_info,     cluster_hits_report_name = \"report name\",     report_dir = withr::local_tempdir() )"},{"path":"https://csbg.github.io/SplineOmics/articles/proteomics_analysis.html","id":"perform-ora-with-the-bioconductor-database","dir":"Articles","previous_headings":"","what":"Perform ORA with the Bioconductor database","title":"proteomics_analysis","text":"ORA can also performed database format DB, Geneset, Gene (see documentation run_ora function). BioConductor databases example , SplineOmics also contains function conveniently download .","code":"SplineOmics::extract_gene_sets(     organism_db = \"org.Mm.eg.db\",     output_dir = results_dir,     filename = \"bioconductor_database.tsv\" ) # Specify the filepath of the TSV file with the database info downloaded_dbs_filepath <- file.path(     results_dir,     \"bioconductor_database.tsv\" )  # Load the file databases <- read.delim(     downloaded_dbs_filepath,     sep = \"\\t\",     stringsAsFactors = FALSE )  # Specify the clusterProfiler parameters clusterProfiler_params <- list(     pvalueCutoff = 0.05,     pAdjustMethod = \"BH\",     minGSSize = 10,     maxGSSize = 500,     qvalueCutoff = 0.2 )  mapping_cfg <- list(     method = \"gprofiler\",     from_species = \"cgchok1gshd\",     to_species = \"mmusculus\" )  genes_clean <- genes[!grepl(\"-\", genes)]  enrichGO_cfg <- list(     GO_BP = list(         OrgDb = org.Mm.eg.db,         keyType = \"SYMBOL\",         ontology = \"BP\"     ),     GO_MF = list(         OrgDb = org.Mm.eg.db,         keyType = \"SYMBOL\",         ontology = \"MF\"     ),     GO_CC = list(         OrgDb = org.Mm.eg.db,         keyType = \"SYMBOL\",         ontology = \"CC\"     ) ) result <- SplineOmics::run_ora(     cluster_table = clustering_results[[\"cluster_table\"]],     databases = databases,     clusterProfiler_params = clusterProfiler_params,     universe = genes_clean,     mapping_cfg = mapping_cfg,     enrichGO_cfg = enrichGO_cfg,     report_info = report_info,     cluster_hits_report_name = \"report\",     report_dir = results_dir )"},{"path":"https://csbg.github.io/SplineOmics/articles/proteomics_analysis.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"proteomics_analysis","text":"example showed functionalities SplineOmics package. can also run datatypes , including timeseries RNA-seq glycan data (, refer documentation README file GitHub page Usage/RNA-seq Glycan Data). hope SplineOmics package makes scientific data analysis easier. face problems (bugs code) satisfied documentation, open issue GitHub check options Feedback section README GitHub. Thank !","code":""},{"path":"https://csbg.github.io/SplineOmics/articles/proteomics_analysis.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"proteomics_analysis","text":"","code":"#> R version 4.5.1 (2025-06-13) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.5 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.10.0  #> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=de_AT.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=de_AT.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=de_AT.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=de_AT.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: Europe/Vienna #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices datasets  utils     methods   #> [8] base      #>  #> other attached packages: #>  [1] org.Mm.eg.db_3.21.0  AnnotationDbi_1.70.0 IRanges_2.42.0       #>  [4] S4Vectors_0.46.0     Biobase_2.68.0       BiocGenerics_0.54.0  #>  [7] generics_0.1.4       knitr_1.50           dplyr_1.1.4          #> [10] here_1.0.1           SplineOmics_0.3.7    testthat_3.2.3       #> [13] devtools_2.4.5       usethis_3.2.1        #>  #> loaded via a namespace (and not attached): #>   [1] splines_4.5.1            later_1.4.2              bitops_1.0-9             #>   [4] tibble_3.3.0             lifecycle_1.0.4          Rdpack_2.6.4             #>   [7] doParallel_1.0.17        rprojroot_2.1.0          lattice_0.22-5           #>  [10] MASS_7.3-65              backports_1.5.0          magrittr_2.0.3           #>  [13] limma_3.64.1             sass_0.4.10              rmarkdown_2.29           #>  [16] jquerylib_0.1.4          yaml_2.3.10              remotes_2.5.0            #>  [19] httpuv_1.6.16            zip_2.3.3                sessioninfo_1.2.3        #>  [22] pkgbuild_1.4.8           pbapply_1.7-2            DBI_1.2.3                #>  [25] minqa_1.2.8              RColorBrewer_1.1-3       abind_1.4-8              #>  [28] pkgload_1.4.0            EnvStats_3.1.0           purrr_1.1.0              #>  [31] GenomeInfoDbData_1.2.14  circlize_0.4.16          ggrepel_0.9.6            #>  [34] pbkrtest_0.5.4           pkgdown_2.1.3            svglite_2.2.1            #>  [37] codetools_0.2-19         tidyselect_1.2.1         shape_1.4.6.1            #>  [40] UCSC.utils_1.4.0         farver_2.1.2             lme4_1.1-37              #>  [43] gmp_0.7-5                matrixStats_1.5.0        base64enc_0.1-3          #>  [46] jsonlite_2.0.0           GetoptLong_1.0.5         ellipsis_0.3.2           #>  [49] Formula_1.2-5            iterators_1.0.14         systemfonts_1.2.3        #>  [52] foreach_1.5.2            tools_4.5.1              progress_1.2.3           #>  [55] ragg_1.4.0               Rcpp_1.1.0               glue_1.8.0               #>  [58] xfun_0.52                GenomeInfoDb_1.44.0      withr_3.0.2              #>  [61] numDeriv_2016.8-1.1      BiocManager_1.30.26      fastmap_1.2.0            #>  [64] boot_1.3-31              caTools_1.18.3           digest_0.6.37            #>  [67] R6_2.6.1                 mime_0.13                textshaping_1.0.1        #>  [70] colorspace_2.1-1         gtools_3.9.5             RSQLite_2.4.1            #>  [73] RhpcBLASctl_0.23-42      tidyr_1.3.1              variancePartition_1.38.0 #>  [76] renv_1.1.5               corpcor_1.6.10           prettyunits_1.2.0        #>  [79] httr_1.4.7               htmlwidgets_1.6.4        pkgconfig_2.0.3          #>  [82] gtable_0.3.6             blob_1.2.4               ComplexHeatmap_2.24.1    #>  [85] XVector_0.48.0           remaCor_0.0.18           brio_1.1.5               #>  [88] htmltools_0.5.8.1        carData_3.0-5            profvis_0.4.0            #>  [91] clue_0.3-66              scales_1.4.0             ClusterR_1.3.3           #>  [94] png_0.1-8                fANCOVA_0.6-1            reformulas_0.4.1         #>  [97] rstudioapi_0.17.1        reshape2_1.4.4           rjson_0.2.23             #> [100] nlme_3.1-168             nloptr_2.2.1             cachem_1.1.0             #> [103] GlobalOptions_0.1.2      stringr_1.5.1            KernSmooth_2.23-26       #> [106] parallel_4.5.1           miniUI_0.1.2             desc_1.4.3               #> [109] pillar_1.11.0            grid_4.5.1               vctrs_0.6.5              #> [112] gplots_3.2.0             urlchecker_1.0.1         promises_1.3.3           #> [115] car_3.1-3                xtable_1.8-4             cluster_2.1.8.1          #> [118] evaluate_1.0.4           mvtnorm_1.3-3            cli_3.6.5                #> [121] compiler_4.5.1           rlang_1.1.6              crayon_1.5.3             #> [124] labeling_0.4.3           plyr_1.8.9               fs_1.6.6                 #> [127] writexl_1.5.4            stringi_1.8.7            BiocParallel_1.42.1      #> [130] lmerTest_3.1-3           Biostrings_2.76.0        aod_1.3.3                #> [133] Matrix_1.7-3             hms_1.1.3                bit64_4.6.0-1            #> [136] ggplot2_3.5.2            KEGGREST_1.48.1          statmod_1.5.0            #> [139] shiny_1.11.1             rbibutils_2.3            broom_1.0.8              #> [142] memoise_2.0.1            bslib_0.9.0              bit_4.6.0"},{"path":"https://csbg.github.io/SplineOmics/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Thomas Rauter. Author, maintainer, funder.","code":""},{"path":"https://csbg.github.io/SplineOmics/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rauter T (2025). SplineOmics: Streamlines process analysing omics timeseries data splines. R package version 0.3.7, https://csbg.github.io/SplineOmics.","code":"@Manual{,   title = {SplineOmics: Streamlines the process of analysing omics timeseries data with splines},   author = {Thomas Rauter},   year = {2025},   note = {R package version 0.3.7},   url = {https://csbg.github.io/SplineOmics}, }"},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"splineomics","dir":"","previous_headings":"","what":"Streamlines the process of analysing omics timeseries data with splines","title":"Streamlines the process of analysing omics timeseries data with splines","text":"R package SplineOmics finds significant features (hits) time-series -omics data using splines limma hypothesis testing. clusters hits based spline shape showing results summary HTML reports. graphical abstract shows full workflow streamlined SplineOmics: Graphical Abstract SplineOmics Workflow","code":""},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"table-of-contents","dir":"","previous_headings":"","what":"Table of Contents","title":"Streamlines the process of analysing omics timeseries data with splines","text":"📘 Introduction 🐳 Docker Container 🎓 Tutorial 📋 Details 🧬 RNA-seq Glycan Data 📦 Dependencies 📚 Reading ❓ Getting Help 💬 Feedback 📜 License 🎓 Citation 🌟 Contributors 🙏 Acknowledgements","code":""},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"blue_book-introduction","dir":"","previous_headings":"","what":"📘 Introduction","title":"Streamlines the process of analysing omics timeseries data with splines","text":"Welcome SplineOmics, R package designed streamline analysis -omics time-series data, followed automated HTML report generation.","code":""},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"is-the-splineomics-package-of-use-for-me","dir":"","previous_headings":"📘 Introduction","what":"Is the SplineOmics package of use for me?","title":"Streamlines the process of analysing omics timeseries data with splines","text":"-omics data time, package help run limma splines, perform clustering, run ORA show result plots HTML reports. time-series data valid input limma package also valid input SplineOmics package (transcriptomics, proteomics, phosphoproteomics, metabolomics, glycan fractional abundances, etc.).","code":""},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"what-do-i-need-precisely","dir":"","previous_headings":"📘 Introduction","what":"What do I need precisely?","title":"Streamlines the process of analysing omics timeseries data with splines","text":"Data: data matrix row feature (e.g., protein, metabolite, etc.) column sample taken specific time. data must NA values, normally distributed features dependence samples. Meta: table metadata columns/samples data matrix (e.g., batch, time point, etc.) Annotation (optional): table identifiers rows/features data matrix (e.g., gene protein name).","code":""},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"capabilities","dir":"","previous_headings":"📘 Introduction","what":"Capabilities","title":"Streamlines the process of analysing omics timeseries data with splines","text":"SplineOmics, can: Automatically perform exploratory data analysis: explore_data() function generates HTML report, containing various plots, density, PCA, correlation heatmap plots (example report). Perform limma spline analysis: Use run_limma_splines() function perform limma analysis splines optimal hyperparameters identified (example report). Find jumps drops timecourse: Use find_pvc() function (example report). Cluster significant features: Cluster significant features (hits) identified spline analysis cluster_hits() function (example report). Run ORA clustered hits: Perform -representation analysis (ORA) using clustered hits run_ora() function (example report).","code":""},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"wrench-installation","dir":"","previous_headings":"","what":"🔧 Installation","title":"Streamlines the process of analysing omics timeseries data with splines","text":"Follow steps install SplineOmics package GitHub repository R environment. Note Carefully read terminal messages installations. can happen installations fail due missing dependencies, must resolve using commands necessarily written .","code":""},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"prerequisites","dir":"","previous_headings":"🔧 Installation","what":"Prerequisites","title":"Streamlines the process of analysing omics timeseries data with splines","text":"Ensure R installed system. , download install CRAN. RStudio recommended user-friendly experience R. Download install RStudio posit.co.","code":""},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"installation-steps","dir":"","previous_headings":"🔧 Installation","what":"Installation Steps","title":"Streamlines the process of analysing omics timeseries data with splines","text":"Note Windows Users: installation Windows, might see message indicating Rtools installed, typically required compiling R packages source. However, installation, Rtools necessary, can safely ignore message. Open RStudio R console new existing project folder. Create virtual environment renv Install BiocManager Bioconductor dependencies (already installed) Install required Bioconductor packages Install remotes GitHub package installation Install SplineOmics package GitHub non-Bioconductor dependencies, using remotes Verify installation SplineOmics package 📌 Note documentation: website contains documentation recent SplineOmics version (also shown website top right corner). get documentation older versions, run: get documentation currently installed version.","code":"renv::init() install.packages(\"BiocManager\") BiocManager::install(   c(\"ComplexHeatmap\", \"limma\", \"variancePartition\")   # force = TRUE   # when encountering issues ) install.packages(\"remotes\") remotes::install_github(   \"csbg/SplineOmics\",   # GitHub repository   ref = \"v0.3.1\",       # Specify the tag to install, e.g. v0.3.1 (check GitHub for the newest version!)   dependencies = TRUE,  # Install all dependencies   upgrade = \"always\"    # Always upgrade dependencies   # force = TRUE        # when encountering issues ) # Verify the installation of the SplineOmics package if (\"SplineOmics\" %in% rownames(installed.packages())) {   message(\"SplineOmics was installed successfully.\") } else {   message(\"SplineOmics installation failed. Please check for errors during installation.\") } help(package=\"SplineOmics\")"},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"troubleshooting","dir":"","previous_headings":"🔧 Installation","what":"Troubleshooting","title":"Streamlines the process of analysing omics timeseries data with splines","text":"encounter errors related dependencies package versions installation, try updating R RStudio latest versions repeat installation steps. issues specifically related SplineOmics package, check Issues section GitHub repository similar problems post new issue.","code":""},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"whale-docker-container","dir":"","previous_headings":"🔧 Installation","what":"🐳 Docker Container","title":"Streamlines the process of analysing omics timeseries data with splines","text":"Alternatively, can run analysis Docker container. underlying Docker image encapsulates SplineOmics package together necessary environment dependencies. ensures higher levels reproducibility analysis carried consistent environment, independent operating system custom configurations. Please note must Docker Engine installed machine. instructions install , consult official Docker Engine installation guide. information Docker containers can found official Docker page. instructions downloading image SplineOmics package running container, please refer Docker instructions.","code":""},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"troubleshooting-1","dir":"","previous_headings":"🔧 Installation > 🐳 Docker Container","what":"Troubleshooting","title":"Streamlines the process of analysing omics timeseries data with splines","text":"face “permission denied” issues Linux distributions, check vignette.","code":""},{"path":[]},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"mortar_board-tutorial","dir":"","previous_headings":"▶️ Usage","what":"🎓 Tutorial","title":"Streamlines the process of analysing omics timeseries data with splines","text":"tutorial covers real CHO cell time-series proteomics example start end.","code":""},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"clipboard-details","dir":"","previous_headings":"▶️ Usage","what":"📋 Details","title":"Streamlines the process of analysing omics timeseries data with splines","text":"detailed description arguments outputs functions package (exported internal functions) can found .","code":""},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"design-limma-design-formula","dir":"","previous_headings":"▶️ Usage > 📋 Details","what":"Design limma design formula","title":"Streamlines the process of analysing omics timeseries data with splines","text":"quick guide design limma design formula can found . explanation three different limma results .","code":""},{"path":[]},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"rna-seq-data","dir":"","previous_headings":"▶️ Usage > 🧬 RNA-seq and Glycan Data","what":"RNA-seq data","title":"Streamlines the process of analysing omics timeseries data with splines","text":"Transcriptomics data must preprocessed limma. need provide appropriate object, voom object, rna_seq_data argument SplineOmics object (see documentation). Along , normalized matrix (e.g., $E slot voom object) must passed data argument. allows flexibility preprocessing; can use method prefer long final object matrix compatible limma. One way preprocess RNA-seq data using preprocess_rna_seq_data() function included SplineOmics package (see documentation). can find example analysis RNA-seq data SplineOmics package.","code":""},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"glycan-fractional-abundance-data","dir":"","previous_headings":"▶️ Usage > 🧬 RNA-seq and Glycan Data","what":"Glycan fractional abundance data","title":"Streamlines the process of analysing omics timeseries data with splines","text":"glycan fractional abundance data matrix, row represents type glycan columns correspond timepoints, must transformed analysis. preprocessing step essential due compositional nature data. compositional data, increase abundance one component (glycan) necessarily results decrease others, introducing dependency among variables can bias analysis. One way address issue applying Centered Log Ratio (CLR) transformation data clr function compositions package: results clr transformed data can harder understand interpret however. prefer ease interpretation fine results contain artifacts due compositional nature data, log2 transform data instead use input SplineOmics package.","code":"library(compositions) clr_transformed_data <- clr(data_matrix)  # use as SplineOmics input log2_transformed_data <- log2(data_matrix)  # use as SplineOmics input"},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"r-version","dir":"","previous_headings":"▶️ Usage","what":"R Version","title":"Streamlines the process of analysing omics timeseries data with splines","text":"Depending version SplineOmics, recent, 4.5.0 higher.","code":""},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"question-getting-help","dir":"","previous_headings":"","what":"❓ Getting Help","title":"Streamlines the process of analysing omics timeseries data with splines","text":"encounter bug suggestion improving SplineOmics package, encourage open issue GitHub repository. opening new issue, please check see question bug already reported another user. helps avoid duplicate reports ensures can address problems efficiently. detailed questions, discussions, contributions regarding package’s use development, please refer GitHub Discussions page SplineOmics.","code":""},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"speech_balloon-feedback","dir":"","previous_headings":"","what":"💬 Feedback","title":"Streamlines the process of analysing omics timeseries data with splines","text":"appreciate feedback! Besides raising issues, can provide feedback following ways: Direct Email: Send feedback directly Thomas Rauter. Anonymous Feedback: Use Google Form provide anonymous feedback answering questions. feedback helps us improve project address issues may encounter.","code":""},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"scroll-license","dir":"","previous_headings":"","what":"📜 License","title":"Streamlines the process of analysing omics timeseries data with splines","text":"package licensed MIT License: LICENSE © 2024 Thomas Rauter. rights reserved.","code":""},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"mortar_board-citation","dir":"","previous_headings":"","what":"🎓 Citation","title":"Streamlines the process of analysing omics timeseries data with splines","text":"SplineOmics package currently published peer-reviewed scientific journal similar outlet. However, package helped work, consider citing GitHub repository. cite package, can use citation information provided CITATION.cff file. can also generate citation various formats using CITATION.cff file visiting top right repo clicking “Cite repository” button. Also, like package, consider giving GitHub repository star. support helps us continued development improvement SplineOmics. Thank using package!","code":""},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"star2-contributors","dir":"","previous_headings":"","what":"🌟 Contributors","title":"Streamlines the process of analysing omics timeseries data with splines","text":"Thomas-Rauter - 🚀 Wrote package, developed approach together Veronika Schäpertöns guidance Nikolaus Fortelny Wolfgang Esser-Skala. Nikolaus Fortelny - 🧠 Principal Investigator, provided guidance support overall approach. Wolfgang Esser-Skala - Helped reviewing code, delivered improvement suggestions scientific guidance develop approach. Veronika Schäpertöns - Developed one internal plotting function, well code exploratory data analysis plots, overall approach together Thomas Rauter. dh2305 Dominik Hofreither - () actively involved tester, (ii) provided datasets helped define problem addressed package, (iii) contributed numerous ideas shaped development, (iv) end-user, provided feedback improved functionality. Larissa Hofer - contributed feedback beta-testing, providing epigenetics RNA datasets used examples package documentation. datasets also used define problem addressed package.","code":""},{"path":"https://csbg.github.io/SplineOmics/index.html","id":"pray-acknowledgements","dir":"","previous_headings":"","what":"🙏 Acknowledgements","title":"Streamlines the process of analysing omics timeseries data with splines","text":"work carried context DigiTherapeutX project, funded Austrian Science Fund (FWF). research conducted supervision Prof. Nikolaus Fortelny, leads Computational Systems Biology working group Paris Lodron University Salzburg, Austria. can find information Prof. Fortelny’s research group .","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/cluster_hits.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster the significant features based on spline similarity — cluster_hits","title":"Cluster the significant features based on spline similarity — cluster_hits","text":"Performs clustering hits top tables generated differential expression analysis. function filters hits based adjusted p-value thresholds, extracts spline coefficients significant features, normalizes coefficients, applies hierarchical clustering. results, including clustering assignments normalized spline curves, saved specified directory compiled HTML report.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/cluster_hits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster the significant features based on spline similarity — cluster_hits","text":"","code":"cluster_hits(   splineomics,   nr_clusters,   adj_pthresholds = c(0.05),   adj_pthresh_avrg_diff_conditions = 0.05,   adj_pthresh_interaction_condition_time = 0.05,   min_effect_size = list(time_effect = 0, avg_diff_cond = 0, interaction_cond_time = 0),   genes = NULL,   plot_info = list(y_axis_label = \"Value\", time_unit = \"min\", treatment_labels = NA,     treatment_timepoints = NA),   plot_options = list(cluster_heatmap_columns = FALSE, meta_replicate_column = NULL),   raw_data = NULL,   report_dir = NULL,   max_hit_number = 25,   verbose = TRUE )"},{"path":"https://csbg.github.io/SplineOmics/reference/cluster_hits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster the significant features based on spline similarity — cluster_hits","text":"splineomics SplineOmics: S3 object class SplineOmics contains necessary data parameters analysis, including: data: matrix data matrix values. columns samples (timepoint + replicate combo) rows features (e.g. genes proteins). meta: data.frame dataframe containing metadata corresponding data, must include 'Time' column columns specified conditions. general, columns meta correspond different types metadata, row corresponds column data (contains metadata sample). annotation: data.frame dataframe maps rows data annotation info, gene name database identifiers. report_info: list named list describing experiment. Must include following fields (character(1)): - \"omics_data_type\" - \"data_description\" - \"data_collection_date\" - \"analyst_name\" - \"contact_info\" - \"project_name\" May also include following optional fields (character(1)): - \"method_description\" - \"results_summary\" - \"conclusions\" design: character(1) character length 1 representing limma design formula. mode: character(1) Specifies design formula constructed: either \"isolated\" \"integrated\". \"isolated\": level analyzed independently, using subset data corresponding level. design formula include condition variable, since one condition present subset. \"integrated\": levels analyzed together single model, using full dataset. design formula includes condition variable (optionally interaction terms ) results estimated jointly across levels. condition: character(1) Character vector length 1 specifying column name meta used define groups analysis. spline_params: list list spline parameters analysis. meta_batch_column: character(1) character string specifying column name metadata used batch effect removal. meta_batch2_column: character(1) character string specifying second column name metadata used batch effect removal. limma_splines_result: list(data.frame) list data frames, representing top table differential expression analysis, containing least 'adj.P.Val' expression data columns. feature_name_columns: character() Character vector strings specify column original data dataframe used automatically build feature names extract_data function. nr_clusters list: Named list specifying number clusters per condition level. list must one element per condition level, element must named exactly corresponding condition name (e.g., \"condition1\", \"condition2\"). element's value controls k used k-means level: Single integer (integer(1), k > 0, e.g. 3): use exactly many clusters. Integer range (integer(), written :, e.g. 2:6): choose k within range minimizes Bayesian Information Criterion (BIC) computed k-means fit range (lower better). Ties broken first minimum encountered. Notes condition levels must present exactly names. Values must positive integers; ranges must increasing (e.g. 2:6). BIC computed k-means using Euclidean distance. common form \\(\\mathrm{BIC} = n \\log(\\mathrm{WCSS}/n) + k \\log(n)\\,           p\\), \\(n\\) number series, \\(p\\) number timepoints (features), \\(\\mathrm{WCSS}\\) total within-cluster sum squares fit. Clustering fail requested k strictly less number available series level. Example Fixed k condition1, BIC-selected k condition2 nr_clusters <- list( condition1 = 4, condition2 = 2:6 ) adj_pthresholds numeric(): Numeric vector p-value thresholds hits top table. order elements determines adj.p-value threshold assigned condition (first element gets assigned first condition, second second, etc.). adj_pthresh_avrg_diff_conditions numeric(1): p-value threshold results average difference condition limma result. adj_pthresh_interaction_condition_time numeric(1): p-value threshold results interaction condition time limma result. min_effect_size list: named list specifies minimum effect size thresholds consider feature biologically meaningful, addition statistical significance. allows users filter \"trivial\" hits pass adjusted p-value cutoffs show negligible effect sizes. list must contain following elements: time_effect: numeric(1) Minimum cumulative travel time effects (Category 1). Features smaller travel ignored even significant. avg_diff_cond: numeric(1) Minimum absolute effect size average differences conditions (Category 2). Ensures contrasts relevant magnitude reported. interaction_cond_time: numeric(1) Minimum effect size interaction condition time (Category 3). controls large differential curve travel must across conditions count hit. Values numeric scalars (typically >0). example: min_effect_size = list(time_effect = 1, avg_diff_cond = 1,  interaction_cond_time = 2) keep features cumulative travels condition-time differences cutoffs. Use smaller values (e.g., 0.1) permissive filtering, larger values conservative thresholds. default 0 three elements. genes character(): character vector gene names corresponding features analyzed. order entries must match feature order data. Gene names standardized (cleaned) ensure compatibility downstream databases used overrepresentation analysis clustering. plot_info list: List optional elements used annotate spline plots: y_axis_label: character(1) single string y-axis label. time_unit: character(1) single string used x-axis label. treatment_labels: list(character(1)) named list single strings. treatment_timepoints: list(numeric(1)) named list single numeric values. treatment list present, must present. two lists must identical name sets. Allowed names values meta[[condition]] special name \"double_spline_plots\", generates treatment line plots limma category 2 3 (average difference conditions interaction condition time). Vertical dashed lines drawn given timepoints facets whose level name matches list name, labeled corresponding string (e.g., feeding, temperature shift). Example: plot_options list: named list controlling optional plot customization. list can include one following entries (supplied fall back default values): cluster_heatmap_columns logical(1) (default = FALSE): Whether cluster columns heatmap. meta_replicate_column character(1) (default = NULL): Name column meta encodes replicate information. supplied, spline plot data points colored replicate, allowing replicate-level variation assessed. raw_data matrix: Data matrix raw (unimputed) data, still containing NA values. provided, highlights datapoints spline plots originally NA imputed. report_dir character(1): Character string specifying directory path HTML report output files saved. path specified, function runs HTML report generated. max_hit_number integer(1): Maximum number hits plotted within cluster. can used limit computation time size HTML report case many hits. verbose logical(1): Boolean flag controlling display messages.","code":"plot_info <- list(   y_axis_label = \"log2 expression\",   time_unit = \"hours\",   treatment_labels = list(     WT = \"Feeding\",     KO = \"Temperature shift\",     double_spline_plots = \"Treatment line\"   ),   treatment_timepoints = list(     WT = 12,     KO = 24,     double_spline_plots = 18   ) )"},{"path":"https://csbg.github.io/SplineOmics/reference/cluster_hits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster the significant features based on spline similarity — cluster_hits","text":"named list three elements: cluster_table tibble containing one row per feature_nr metadata cluster assignments across analysis categories. structure : feature_nr - Numeric feature identifier. feature_name - Preferred feature name, prioritizing values limma tables, cluster table row names, falling back numeric feature ID. gene - Preferred gene symbol annotation table available, otherwise taken cluster tables. cluster_<cond1> / cluster_<cond2> - Cluster assignments time-effect condition, named according elements clustered_hits_levels. cluster_cat2 - Present category 2 results available; combined cluster label form \"<cluster_<cond1>>_<cluster_<cond2>>\" features significant category 2. value NA, feature category 2 hit. cluster_cat3 - Present category 3 results available; combined cluster label form \"<cluster_<cond1>>_<cluster_<cond2>>\" features significant category 3. value NA, feature category 3 hit. category-specific cluster column (cluster_<cond1>, cluster_<cond2>, cluster_cat2, cluster_cat3), value NA indicates feature significant (hit) category. spline_results named list summarizing fitted spline trajectories, shared time grid, effect-size based significance flags. Structure: time_grid Numeric vector length \\(T\\) giving common time points (e.g., hours since cultivation start) splines predicted. predictions Named list condition (e.g., constant, temp_shift). entry numeric matrix size \\(N \\times T\\) rows corresponding features columns time_grid. Values predicted spline trajectories absolute scale used analysis (e.g., log2-CPM voom). Row order matches feature order used throughout analysis. time_effect_effect_size Named list condition numeric vector (length \\(N\\)) per condition giving cumulative travel (integrated temporal change) feature`s spline across time_grid. Larger values indicate stronger within-condition temporal modulation. time_effect_passed_threshold Named list condition logical vector (length \\(N\\)) per condition indicating whether corresponding time_effect_effect_size exceeds user-defined effect-size threshold (.e., time-effect hits). interaction_effect_size Numeric vector (length \\(N\\)) giving differential cumulative travel two condition-specific splines feature, computed time_grid. Larger values indicate stronger differences temporal behaviour conditions (condition-time interaction). interaction_passed_threshold Logical vector (length \\(N\\)) indicating whether interaction_effect_size exceeds interaction effect-size threshold (.e., features significantly different temporal profiles across conditions). Unless stated otherwise, vectors aligned feature order used prediction matrices; condition names match levels(meta[[condition]]). plots list plots generated run, corresponding visualizations shown HTML report produced function. Additionally, plots list also contains plots showing consensus clusters potential clustering interaction condition time (category 3) hits.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/cluster_hits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster the significant features based on spline similarity — cluster_hits","text":"","code":"# Toy data: 4 features x 6 samples (two conditions, three time points) toy_data <- matrix(     c(         3, 5, 8, 12, 17, 23, # f1         23, 17, 13, 9, 6, 4, # f2         5, 3, 2, 2, 3, 5, # f3         1, 4, 9, 8, 4, 1, # f4         10, 10, 10, 10, 10, 10, # f5         2, 2, 2, 9, 12, 15, # f6         4, 5, 7, 10, 14, 19, # f7         12, 11, 9, 8, 9, 12 # f8     ),     nrow = 8, ncol = 6, byrow = TRUE,     dimnames = list(paste0(\"f\", 1:8), paste0(\"s\", 1:6)) )  toy_meta <- data.frame(     Time = c(0, 1, 2, 0, 1, 2),     condition = rep(c(\"WT\", \"KO\"), each = 3),     Replicate = rep(c(\"R1\", \"R2\"), each = 3),     row.names = colnames(toy_data),     stringsAsFactors = FALSE )  toy_annot <- data.frame(     feature_nr = 1:8,     gene = c(\"G1\", \"G2\", \"G3\", \"G4\"),     stringsAsFactors = FALSE )  # Stub limma \"top tables\" with minimal required fields # (feature_nr + adj.P.Val) tt_wt <- data.frame(feature_nr = 1:4, adj.P.Val = c(0.01, 0.20, 0.04, 0.60)) tt_ko <- data.frame(feature_nr = 1:4, adj.P.Val = c(0.50, 0.03, 0.70, 0.02)) tt_c2 <- data.frame(feature_nr = 1:4, adj.P.Val = c(0.04, 0.70, 0.80, 0.90)) tt_c3 <- data.frame(feature_nr = 1:4, adj.P.Val = c(0.20, 0.90, 0.03, 0.80))  design_str <- \"~ 1 + Time*condition\"  # Minimal spline parameters required by spline machinery spline_params <- list(     spline_type = \"n\", # natural cubic splines     dof = 1L # degrees of freedom for the spline basis )  toy_splineomics <- list(     data = toy_data,     meta = toy_meta,     annotation = toy_annot,     report_info = list(         omics_data_type = \"RNA-seq\",         data_description = \"toy example\",         data_collection_date = \"2025-01-01\",         analyst_name = \"Example\",         contact_info = \"example@example.org\",         project_name = \"ToyProject\"     ),     design = design_str,     mode = \"integrated\",     condition = \"condition\",     spline_params = spline_params,     meta_batch_column = NULL,     meta_batch2_column = NULL,     limma_splines_result = list(         time_effect                  = list(WT = tt_wt, KO = tt_ko),         avrg_diff_conditions         = tt_c2,         interaction_condition_time   = tt_c3     ),     feature_name_columns = \"gene\" ) class(toy_splineomics) <- \"SplineOmics\"  toy_splineomics <- run_limma_splines(toy_splineomics) #>  #> Ensure the design has no Condition*Time interaction for mode == 'isolated', and includes it for mode == 'integrated'. #> Running Levene's test both feature wise and sample wise to implicitly decide whether to use the limma array weights or not. #> No random effects: fitting model with lmFit()... #> Running feature wise Levene's test... #>  #> ------------------------------------------------------------ #> Fraction of features violating homoscedasticity #>     (p < 0.050): 0.00% (0/8 features) #> No violating features found. #> ------------------------------------------------------------ #> Running Levene's test across samples to detect inter-sample variance differences... #> Levene's test p-value (sample-level): 0.1425 #> ✅ No strong evidence of inter-sample variance differences. #> ------------------------------------------------------------ #> ✅ No strong evidence for heteroscedasticity. #> Proceeding WITHOUT using robust strategy. #> ------------------------------------------------------------ #>  #> Fitting global model... #> Info Finished limma spline analysis in 0.0 min  # Clustering configuration: fixed k per condition nr_k <- list(WT = 2L, KO = 2L)  # Keep outputs light and write into a temporary directory out <- cluster_hits(     splineomics = toy_splineomics,     nr_clusters = nr_k,     adj_pthresholds = c(0.05, 0.05),     adj_pthresh_avrg_diff_conditions = 0.05,     adj_pthresh_interaction_condition_time = 0.05,     min_effect_size = list(         time_effect = 0,         avg_diff_cond = 0,         interaction_cond_time = 0     ),     genes = toy_annot$gene,     plot_info = list(y_axis_label = \"log2 expression\", time_unit = \"h\"),     plot_options = list(         cluster_heatmap_columns = FALSE,         meta_replicate_column = \"Replicate\"     ),     raw_data = toy_data,     report_dir = tempdir(),     max_hit_number = 2 ) #>  #> Ensure the design has no Condition*Time interaction for mode == 'isolated', and includes it for mode == 'integrated'. #>  #>  Performing the clustering... #> For the level:  KO #> For the level:  WT #> Generating heatmap... #> Generating cluster mean splines for level:  WT #> Generating spline plots... #> Generating cluster mean splines for level:  KO #> Generating spline plots... #> Generating report. This takes a few seconds. #>  #>  Info Clustering the hits completed successfully. #>  Your HTML reports are located in the directory:  /tmp/Rtmpyq9FLq . #>  Please note that due to embedded files, the reports might be flagged as #>  harmful by other software. Rest assured that they provide no harm. #> 5 clusters for the condition effect #>             (interaction between condition and time) #> Running this function took 0.1 min"},{"path":"https://csbg.github.io/SplineOmics/reference/compare_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare hits between two SplineOmics results — compare_results","title":"Compare hits between two SplineOmics results — compare_results","text":"Compares adjusted p-values two SplineOmics result objects across standard categories. Calculates Spearman correlation globally significant hits , generates diagnostic plots, summarizes overlap statistics including Jaccard index hit counts. Note: feature_names columns topTables splineomics1 splineomics2 must names, otherwise, comparisons possible.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/compare_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare hits between two SplineOmics results — compare_results","text":"","code":"compare_results(   splineomics1,   splineomics2,   splineomics1_description = \"SplineOmics_1\",   splineomics2_description = \"SplineOmics_2\",   adj_p_tresh1 = 0.05,   adj_p_tresh2 = 0.05 )"},{"path":"https://csbg.github.io/SplineOmics/reference/compare_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare hits between two SplineOmics results — compare_results","text":"splineomics1 SplineOmics: list containing limma_splines_result topTables organized category subcategory. splineomics2 SplineOmics: structure splineomics1; object compare. splineomics1_description character(1): Character label used x-axis annotation. splineomics2_description character(1): Character label used y-axis annotation. adj_p_tresh1 numeric(1): Numeric p-value threshold calling hits analysis 1. adj_p_tresh2 numeric(1): Numeric p-value threshold calling hits analysis 2.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/compare_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare hits between two SplineOmics results — compare_results","text":"list components: correlation_summary Data frame global hit-level correlations plots Named list ggplot objects hit-subsets. hits_summary Data frame hit counts, overlap, Jaccard index","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/compare_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare hits between two SplineOmics results — compare_results","text":"","code":"# Minimal runnable example (offline) if (requireNamespace(\"ggplot2\", quietly = TRUE)) {   # Two tiny topTables per category with matching feature_names   feats <- paste0(\"g\", 1:6)   ttA_te <- data.frame(feature_names = feats,                        adj.P.Val = c(.01, .2, .03, .8, .5, .04))   ttB_te <- data.frame(feature_names = feats,                        adj.P.Val = c(.02, .25, .01, .7, .4, .06))   ttA_c2 <- data.frame(feature_names = feats,                        adj.P.Val = c(.2, .8, .04, .3, .9, .7))   ttB_c2 <- data.frame(feature_names = feats,                        adj.P.Val = c(.3, .7, .03, .4, .95, .6))   ttA_c3 <- data.frame(feature_names = feats,                        adj.P.Val = c(.5, .6, .7, .04, .9, .8))   ttB_c3 <- data.frame(feature_names = feats,                        adj.P.Val = c(.6, .55, .65, .03, .85, .75))    # Assemble limma_splines_result lists (one subcategory per cat)   lsr1 <- list(     time_effect = list(WT = ttA_te),     avrg_diff_conditions = list(comp = ttA_c2),     interaction_condition_time = list(comp = ttA_c3)   )   lsr2 <- list(     time_effect = list(WT = ttB_te),     avrg_diff_conditions = list(comp = ttB_c2),     interaction_condition_time = list(comp = ttB_c3)   )    # Minimal SplineOmics shells holding the results   so1 <- list(limma_splines_result = lsr1); class(so1) <- \"SplineOmics\"   so2 <- list(limma_splines_result = lsr2); class(so2) <- \"SplineOmics\"    cmp <- compare_results(     splineomics1 = so1,     splineomics2 = so2,     splineomics1_description = \"Analysis A\",     splineomics2_description = \"Analysis B\",     adj_p_tresh1 = 0.05,     adj_p_tresh2 = 0.05   )    # Inspect outputs   head(cmp$correlation_summary)   names(cmp$plots)   head(cmp$hits_summary) } #>                     category subcategory hits_1 hits_2 n_overlap jaccard_index #> 1                time_effect          WT      3      2         2         0.667 #> 2       avrg_diff_conditions        comp      1      1         1         1.000 #> 3 interaction_condition_time        comp      1      1         1         1.000"},{"path":"https://csbg.github.io/SplineOmics/reference/create_limma_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate HTML report with p-value histograms of all the features — create_limma_report","title":"Generate HTML report with p-value histograms of all the features — create_limma_report","text":"Generates HTML report based results limma analysis splines. report includes various plots sections summarizing analysis results time effects, average differences conditions, interaction effects condition time.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/create_limma_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate HTML report with p-value histograms of all the features — create_limma_report","text":"","code":"create_limma_report(   splineomics,   adj_pthresh = 0.05,   report_dir = here::here(),   verbose = TRUE )"},{"path":"https://csbg.github.io/SplineOmics/reference/create_limma_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate HTML report with p-value histograms of all the features — create_limma_report","text":"splineomics SplineOmics: S3 object class SplineOmics contains necessary data parameters analysis, including: limma_splines_result: list list containing top tables differential expression analysis three different limma results. meta: data.frame data frame sample metadata. Must contain column \"Time\". condition: character(1) character string specifying column name metadata (meta) defines groups analysis. column contains levels \"exponential\" \"stationary\" phases, \"drug\" \"no_drug\" treatments. annotation: data.frame data frame containing feature information, gene protein names, associated expression data. report_info: list list containing metadata analysis reporting purposes. adj_pthresh numeric(1): numeric value specifying adjusted p-value threshold significance. Default 0.05. Must > 0 < 1. report_dir character(1): string specifying directory report saved. Default current working directory. verbose logical(1): Boolean flag controlling display messages.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/create_limma_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate HTML report with p-value histograms of all the features — create_limma_report","text":"list plots included generated HTML report.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/create_limma_report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate HTML report with p-value histograms of all the features — create_limma_report","text":"","code":"set.seed(1)  # --- Toy data: 4 features x 6 samples --- toy_data <- matrix(     rnorm(4 * 6),     nrow = 4, ncol = 6,     dimnames = list(paste0(\"feat\", 1:4), paste0(\"S\", 1:6)) )  # --- Metadata with required columns (Time, Condition) --- toy_meta <- data.frame(     SampleID = colnames(toy_data),     Time = c(0, 0, 1, 1, 2, 2),     Condition = factor(c(\"Ctrl\", \"Ctrl\", \"Ctrl\", \"Trt\", \"Trt\", \"Trt\"),         levels = c(\"Ctrl\", \"Trt\")     ),     row.names = colnames(toy_data),     check.names = FALSE )  # --- Minimal annotation (feature-level) --- toy_anno <- data.frame(     feature_id = rownames(toy_data),     gene = paste0(\"G\", 1:4),     row.names = rownames(toy_data),     check.names = FALSE )  # --- Helper to fabricate limma-like topTables --- make_tt <- function(n = 4) {     p <- runif(n)     ap <- p.adjust(p, method = \"BH\")     data.frame(         logFC = rnorm(n),         AveExpr = rnorm(n, 5),         t = rnorm(n),         P.Value = p,         adj.P.Val = ap,         B = rnorm(n),         row.names = paste0(\"feat\", 1:n),         check.names = FALSE     ) }  # Structure expected by create_limma_report(): toy_limma_res <- list(     time_effect = list(         \"Time\" = make_tt()     ),     avrg_diff_conditions = make_tt(),     interaction_condition_time = make_tt() )  # --- Build SplineOmics object (note: condition is the COLUMN NAME) --- so <- create_splineomics(     data = toy_data,     meta = toy_meta,     condition = \"Condition\",     annotation = toy_anno,     design = \"1 ~ Condition + Time\",     spline_params = list(spline_type = c(\"n\", \"n\"), dof = c(2L, 2L)),     report_info = list(         omics_data_type       = \"RNA-seq (toy)\",         data_description      = \"Simulated expression matrix (4x6)\",         data_collection_date  = \"2025-10-07\",         analyst_name          = \"Analyst A\",         contact_info          = \"analyst@example.org\",         project_name          = \"SplineOmics Demo\"     ) )  # Attach limma results to the object so <- update_splineomics(so, limma_splines_result = toy_limma_res)  # --- Generate the HTML report into a temporary directory --- out_plots <- create_limma_report(     splineomics = so,     adj_pthresh = 0.05,     report_dir  = tempdir(),     verbose     = FALSE )"},{"path":"https://csbg.github.io/SplineOmics/reference/create_splineomics.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an object containing variables often used by SplineOmics functions — create_splineomics","title":"Create an object containing variables often used by SplineOmics functions — create_splineomics","text":"Creates SplineOmics object containing variables commonly used across multiple functions package. object passed argument functions package.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/create_splineomics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an object containing variables often used by SplineOmics functions — create_splineomics","text":"","code":"create_splineomics(   data,   meta,   condition,   rna_seq_data = NULL,   annotation = NULL,   report_info = NULL,   meta_batch_column = NULL,   meta_batch2_column = NULL,   feature_name_columns = NULL,   design = NULL,   use_array_weights = FALSE,   dream_params = NULL,   mode = \"isolated\",   spline_params = NULL,   padjust_method = \"BH\",   bp_cfg = NULL )"},{"path":"https://csbg.github.io/SplineOmics/reference/create_splineomics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an object containing variables often used by SplineOmics functions — create_splineomics","text":"data matrix: actual omics data. rna_seq_data argument used, still provide argument. case, input data matrix (example, $E part voom object). Assign feature names row headers; otherwise, numeric indices used. meta data.frame: Metadata associated omics data. condition character(1): Condition variable describing experimental groups. rna_seq_data list | NULL: object containing preprocessed RNA-seq data, output limma::voom similar pipeline. argument validated directly; input checks rely limma::lmFit(). annotation data.frame | NULL: Feature annotations (optional) providing descriptive information feature data. report_info list: Named list describing experiment. Must include following fields (character(1)): \"omics_data_type\" \"data_description\" \"data_collection_date\" \"analyst_name\" \"contact_info\" \"project_name\" Optional fields (character(1)): \"method_description\" \"results_summary\" \"conclusions\" meta_batch_column character(1) | NULL: Column name meta specifying batch information (optional). meta_batch2_column character(1) | NULL: Column name meta specifying secondary batch information (optional). feature_name_columns character(): Vector column names annotation describe features. Used HTML report define feature names displayed spline plot created. Use vector used create row headers data matrix. design matrix | NULL: Design matrix similar object (optional). use_array_weights logical(1): Boolean flag indicating whether use robust fitting strategy handle heteroskedasticity. NULL, determined automatically via Levene test: least 10% features significant, robust strategy enabled. RNA-seq data, uses limma::voomWithQualityWeights(), otherwise limma::arrayWeights() robust = TRUE limma::eBayes(). approaches -weight samples higher variance, improving validity statistical inference. dream_params list | NULL: Optional named list controlling mixed-model fitting. NULL, may include: dof integer(1) Degrees freedom DREAM topTable. KenwardRoger logical(1) Whether use Kenward-Roger correction. Random effects specified directly design formula, . mode character(1): Either \"isolated\" \"integrated\". Determines whether conditions analysed independently (\"isolated\") jointly (\"integrated\"). integrated mode fits single model across levels. spline_params list | NULL: Parameters spline functions. Must contain: spline_type: character(1) \"n\" natural cubic \"b\" B-splines. dof: integer(1) Degrees freedom. set 0, SplineOmics automatically determines best value using leave-one-cross-validation. degree: integer(1) Degree spline (B-splines ). padjust_method character(1): Method p-value adjustment. One \"none\", \"BH\", \"\", \"holm\", \"bonferroni\", \"hochberg\", \"hommel\". Defaults \"BH\" (Benjamini–Hochberg). bp_cfg numeric() | NULL: Named numeric vector specifying parallelization settings, expected names \"n_cores\" \"blas_threads\". Controls number R worker processes (n_cores) BLAS/OpenBLAS threads per process (blas_threads). bp_cfg NULL missing, default 1, disabling parallelization avoiding thread oversubscription.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/create_splineomics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an object containing variables often used by SplineOmics functions — create_splineomics","text":"SplineOmics object.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/create_splineomics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an object containing variables often used by SplineOmics functions — create_splineomics","text":"","code":"set.seed(1)  # 6 samples, 4 features toy_data <- matrix(     rnorm(4 * 6, mean = 0, sd = 1),     nrow = 4, ncol = 6,     dimnames = list(         paste0(\"gene\", 1:4),         paste0(\"S\", 1:6)     ) )  # Sample metadata toy_meta <- data.frame(     SampleID = colnames(toy_data),     Time = c(0, 0, 1, 1, 2, 2),     Condition = factor(c(\"Ctrl\", \"Ctrl\", \"Ctrl\", \"Trt\", \"Trt\", \"Trt\"),         levels = c(\"Ctrl\", \"Trt\")     ),     Batch = factor(c(\"B1\", \"B1\", \"B1\", \"B2\", \"B2\", \"B2\")),     stringsAsFactors = FALSE,     row.names = colnames(toy_data) )  # Condition vector (must align with samples) cond <- toy_meta$Condition  # Minimal annotation (feature-level info) toy_anno <- data.frame(     feature_id = rownames(toy_data),     symbol = c(\"G1\", \"G2\", \"G3\", \"G4\"),     stringsAsFactors = FALSE,     row.names = rownames(toy_data) )  # Spline parameters (natural splines with df = 3) toy_spline <- list(spline_type = \"n\", dof = 3)  # Parallel config (single-threaded for examples) toy_bp <- c(n_cores = 1, blas_threads = 1)  # Dream params example (optional) toy_dream <- list(dof = 3L, KenwardRoger = FALSE)  # Simple design matrix (intercept + condition + time) toy_design <- stats::model.matrix(~ Condition + Time, data = toy_meta)  # Required report fields toy_report <- list(     omics_data_type = \"RNA-seq (toy)\",     data_description = \"Simulated expression matrix (4x6)\",     data_collection_date = \"2025-10-07\",     analyst_name = \"Analyst A\",     contact_info = \"analyst@example.org\",     project_name = \"SplineOmics Demo\",     method_description = \"Toy example to construct a SplineOmics object\" )  so <- create_splineomics(     data                 = toy_data,     meta                 = toy_meta,     condition            = cond,     rna_seq_data         = NULL, # not used in this toy     annotation           = toy_anno,     report_info          = toy_report,     meta_batch_column    = \"Batch\",     meta_batch2_column   = NULL,     feature_name_columns = c(\"feature_id\", \"symbol\"),     design               = toy_design,     use_array_weights    = FALSE,     dream_params         = toy_dream,     mode                 = \"isolated\",     spline_params        = toy_spline,     padjust_method       = \"BH\",     bp_cfg               = toy_bp )  class(so) #> [1] \"SplineOmics\" str(so, max.level = 1) #> List of 16 #>  $ data                : num [1:4, 1:6] -0.626 0.184 -0.836 1.595 0.33 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>  $ rna_seq_data        : NULL #>  $ meta                :'data.frame':\t6 obs. of  4 variables: #>  $ condition           : Factor w/ 2 levels \"Ctrl\",\"Trt\": 1 1 1 2 2 2 #>  $ annotation          :'data.frame':\t4 obs. of  2 variables: #>  $ report_info         :List of 7 #>  $ meta_batch_column   : chr \"Batch\" #>  $ meta_batch2_column  : NULL #>  $ feature_name_columns: chr [1:2] \"feature_id\" \"symbol\" #>  $ design              : num [1:6, 1:3] 1 1 1 1 1 1 0 0 0 1 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   ..- attr(*, \"assign\")= int [1:3] 0 1 2 #>   ..- attr(*, \"contrasts\")=List of 1 #>  $ use_array_weights   : logi FALSE #>  $ dream_params        :List of 2 #>  $ mode                : chr \"isolated\" #>  $ spline_params       :List of 2 #>  $ padjust_method      : chr \"BH\" #>  $ bp_cfg              : Named num [1:2] 1 1 #>   ..- attr(*, \"names\")= chr [1:2] \"n_cores\" \"blas_threads\" #>  - attr(*, \"class\")= chr \"SplineOmics\""},{"path":"https://csbg.github.io/SplineOmics/reference/download_bioconductor_database.html","id":null,"dir":"Reference","previous_headings":"","what":"Download Gene Set Annotations from Bioconductor Organism Databases — download_bioconductor_database","title":"Download Gene Set Annotations from Bioconductor Organism Databases — download_bioconductor_database","text":"function extracts gene--ontology mappings specified Bioconductor organism annotation package (e.g., `org.Hs.eg.db`, `org.Mm.eg.db`) saves gene sets `.tsv` file standardized format. output includes mappings Gene Ontology (GO) Biological Process (BP), Molecular Function (MF), Cellular Component (CC), KEGG pathways. resulting file can used directly enrichment functions `clusterProfiler::enricher()` `TERM2GENE`.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/download_bioconductor_database.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download Gene Set Annotations from Bioconductor Organism Databases — download_bioconductor_database","text":"","code":"download_bioconductor_database(   organism_db = \"org.Hs.eg.db\",   output_dir = here::here(),   filename = NULL )"},{"path":"https://csbg.github.io/SplineOmics/reference/download_bioconductor_database.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download Gene Set Annotations from Bioconductor Organism Databases — download_bioconductor_database","text":"organism_db string specifying Bioconductor organism annotation database use (e.g., `\"org.Hs.eg.db\"` human `\"org.Mm.eg.db\"` mouse). output_dir string specifying output directory `.tsv` file saved. Defaults current project directory defined `::()`. filename optional string specifying filename output file. `NULL` (default), filename generated automatically timestamp.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/download_bioconductor_database.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download Gene Set Annotations from Bioconductor Organism Databases — download_bioconductor_database","text":"`data.frame` gene set annotations three columns: DB Ontology/database source, e.g. `\"GO_BP\"`, `\"GO_MF\"`, `\"GO_CC\"`,   `\"KEGG\"` (available). Geneset Ontology term ID pathway ID (e.g. GO ID, KEGG ID). Gene Gene symbol (SYMBOL).","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/download_bioconductor_database.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download Gene Set Annotations from Bioconductor Organism Databases — download_bioconductor_database","text":"TSV three columns: DB Ontology/database source, e.g., \"GO_BP\", \"GO_MF\",   \"GO_CC\", \"KEGG\" (available). Geneset Ontology term ID pathway ID (e.g., GO ID, KEGG ID). Gene Gene symbol (SYMBOL). Note: org.*.eg.db packages longer include KEGG mappings; cases KEGG section empty. addition returning `data.frame`, function also writes table disk `.tsv` file specified `output_dir`.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/download_enrichr_databases.html","id":null,"dir":"Reference","previous_headings":"","what":"Download the Enrichr databases — download_enrichr_databases","title":"Download the Enrichr databases — download_enrichr_databases","text":"function downloads gene sets specified Enrichr databases saves specified output directory .tsv file per default. file named timestamp per default ensure uniqueness (databases stored single file). file 3 columns: DB containing database name, Geneset, genesets, Gene, gene names.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/download_enrichr_databases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download the Enrichr databases — download_enrichr_databases","text":"","code":"download_enrichr_databases(   gene_set_lib,   output_dir = here::here(),   filename = NULL )"},{"path":"https://csbg.github.io/SplineOmics/reference/download_enrichr_databases.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download the Enrichr databases — download_enrichr_databases","text":"gene_set_lib character(): character vector database names download Enrichr, example: c(\"WikiPathways_2019_Human\", \"NCI-Nature_2016\"). output_dir character(1): string specifying output directory .tsv file saved. Defaults current project directory defined ::(). filename character(1): Name output file (file extension). Due commas present terms, .tsv recommended. left , file named all_databases_timestamp.tsv.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/download_enrichr_databases.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download the Enrichr databases — download_enrichr_databases","text":"data.frame gene set annotations three columns: DB Database name (e.g. \"WikiPathways_2019_Human\", \"NCI-Nature_2016\"). Geneset gene set pathway term database. Gene gene contained gene set. addition returning data.frame, function also writes table disk .tsv file specified output_dir.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/download_enrichr_databases.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download the Enrichr databases — download_enrichr_databases","text":"","code":"if (interactive()) {   libs <- c(\"WikiPathways_2019_Human\")   out <- download_enrichr_databases(     gene_set_lib = libs,     output_dir = tempdir(),     filename = \"enrichr_demo.tsv\"   )   head(out) }"},{"path":"https://csbg.github.io/SplineOmics/reference/explore_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically perform exploratory data analysis (EDA) — explore_data","title":"Automatically perform exploratory data analysis (EDA) — explore_data","text":"function automatically generates exploratory data analysis (EDA) plots provided data. include density plots, boxplots, PCA plots, MDS plots, variance explained plots, violin plots, mean correlation time, first lag autocorrelation, lag1 differences, coefficient variation. function returns EDA plots list , default, creates HTML report containing plots, saving specified report directory.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/explore_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically perform exploratory data analysis (EDA) — explore_data","text":"","code":"explore_data(splineomics, report_dir = here::here(), report = TRUE)"},{"path":"https://csbg.github.io/SplineOmics/reference/explore_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically perform exploratory data analysis (EDA) — explore_data","text":"splineomics SplineOmics: named list containing required inputs splineomics workflow. Must contain following elements: data: matrix data matrix values. columns samples (timepoint + replicate combo) rows features (e.g. genes proteins). meta: data.frame dataframe containing metadata corresponding data. Must include 'Time' column columns specified conditions. general, columns meta correspond different metadata types, row corresponds column data (metadata sample). annotation: data.frame dataframe maps rows data annotation info, gene names database identifiers. report_info: list named list describing experiment. Must include following fields (character(1)): - \"omics_data_type\" - \"data_description\" - \"data_collection_date\" - \"analyst_name\" - \"contact_info\" - \"project_name\" May also include following optional fields (character(1)): - \"method_description\" - \"results_summary\" - \"conclusions\" condition: character(1) Character vector length 1 specifying column name meta used define groups analysis. meta_batch_column: character(1) Character vector length 1 specifying column name meta contains info batch effect. meta_batch2_column: character(1) Character vector length 1 specifying column name meta contains info second batch effect. report_dir character(1): non-empty string specifying report directory. output HTML reports placed . Default current working directory, determined library: ::(). report logical(1): Boolean TRUE FALSE value, specifying report generated .","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/explore_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatically perform exploratory data analysis (EDA) — explore_data","text":"list ggplot objects representing various exploratory plots.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/explore_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automatically perform exploratory data analysis (EDA) — explore_data","text":"","code":"# Temporary output dir for the HTML report report_dir <- file.path(tempdir(), \"explore_data_demo\") if (!dir.exists(report_dir)) dir.create(report_dir, recursive = TRUE)  ## --- Load example inputs from inst/extdata --- data <- readRDS(xzfile(system.file(     \"extdata\", \"proteomics_data.rds.xz\",     package = \"SplineOmics\" )))  meta <- read.csv(     system.file(\"extdata\", \"proteomics_meta.csv\", package = \"SplineOmics\"),     stringsAsFactors = FALSE )  # Derive the annotation table from the data frame (as in the vignette) first_na_col <- which(is.na(data[1, ]))[1] annotation <- data |>     dplyr::select((first_na_col + 1):ncol(data)) |>     dplyr::slice(-c(1:3))  data <- SplineOmics::extract_data(     # The dataframe with the numbers on the left and info on the right.     data = data,     # Use this annotation column for the feature names.     feature_name_columns = c(\"Gene_name\"),     top_row = 4,     bottom_row = 1165,     right_col = 37,     left_col = 2 )  # Minimal report metadata report_info <- list(     omics_data_type = \"PTX\",     data_description = \"Demo proteomics dataset from extdata\",     data_collection_date = \"2024\",     analyst_name = \"Example Analyst\",     contact_info = \"analyst@example.org\",     project_name = \"DemoProject\" )  # Build the SplineOmics input object splineomics <- SplineOmics::create_splineomics(     data               = data,     meta               = meta,     annotation         = annotation,     report_info        = report_info,     condition          = \"Phase\", # column in `meta` defining groups     meta_batch_column  = \"Reactor\" # optional: for batch-effect removal )  # Run EDA and write the HTML report to the temp dir plots <- SplineOmics::explore_data(     splineomics = splineomics,     report_dir  = report_dir,     report      = TRUE ) #> Making density plots... #> Making violin plots... #> Making PCA plots... #> Making MDS plots... #> Making correlation heatmaps... #> Subsampled to top 1000 most variable features (after filtering rows with > 20% missing) for correlation heatmap. #> Making mean correlation with time plots... #> Making lag1 differences plots... #> Making first lag auto-correlation with time plots... #> Making cv plots... #> Making density plots... #> Making violin plots... #> Making PCA plots... #> Making MDS plots... #> Making correlation heatmaps... #> Subsampled to top 1000 most variable features (after filtering rows with > 20% missing) for correlation heatmap. #> Making mean correlation with time plots... #> Making lag1 differences plots... #> Making first lag auto-correlation with time plots... #> Making cv plots... #>  #>  Info Exploratory data analysis completed successfully. #>  Your HTML reports are located in the directory:  /tmp/Rtmpyq9FLq/explore_data_demo . #>  Please note that due to embedded files, the reports might be flagged as #>  harmful by other software. Rest assured that they provide no harm.  # Inspect what was written list.files(report_dir, recursive = TRUE) #> [1] \"explore_batch_corrected_data_PTX_30_10_2025-11_24_59.html\" #> [2] \"explore_data_PTX_30_10_2025-11_24_59.html\"                  # `plots` is a named list of ggplot objects (e.g., plots$raw_data$pca, etc.) # print(plots$raw_data$pca)"},{"path":"https://csbg.github.io/SplineOmics/reference/extract_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a rectangular block from a dataframe and make it to a matrix — extract_data","title":"Extract a rectangular block from a dataframe and make it to a matrix — extract_data","text":"function extracts rectangular block dataframe using user-specified top/bottom row indices left/right column identifiers (numeric Excel-style letters). ensures block contains numeric values NAs, returns cleaned matrix.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/extract_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a rectangular block from a dataframe and make it to a matrix — extract_data","text":"","code":"extract_data(   data,   bottom_row,   right_col,   top_row = 1,   left_col = 1,   feature_name_columns = NA,   use_row_index = FALSE )"},{"path":"https://csbg.github.io/SplineOmics/reference/extract_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a rectangular block from a dataframe and make it to a matrix — extract_data","text":"data data.frame: dataframe containing full input, including annotation columns numeric block extract. bottom_row integer(1): Specifies last (bottom) row numeric data block. Must >= top_row. right_col integer(1) | character(1): format left_col. Specifies right-column numeric block. Must >= left_col conversion. top_row integer(1): Specifies first (top) row numeric data block. Row indexing 1-based. left_col integer(1) | character(1): Column specifier left-column data block. Can either: integer index (e.g., 2 second column), character string using Excel-style letters (e.g., \"\", \"AB\"). Column names (e.g., \"age\") allowed . letters numeric indices accepted. feature_name_columns character() | NULL: Optional character vector specifying columns data used row (feature) names output. NA, generic feature names used. row names used everywhere label features, label plots cluster_hits() function report. use_row_index logical(1): TRUE, prepend row index combined feature name ensure uniqueness. Defaults FALSE.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/extract_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a rectangular block from a dataframe and make it to a matrix — extract_data","text":"numeric matrix cleaned values appropriate column names.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/extract_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract a rectangular block from a dataframe and make it to a matrix — extract_data","text":"","code":"# Tiny demo table with two header rows, feature columns, and numeric block df <- data.frame(     feat_id = c(NA, NA, \"g1\", \"g2\", \"g3\"),     feat_sym = c(NA, NA, \"TP53\", \"EGFR\", \"BAX\"),     A = c(\"cond\", \"t0\", 1, 2, 3),     B = c(\"cond\", \"t1\", 4, 5, 6),     C = c(\"ctrl\", \"t0\", 7, 8, 9),     D = c(\"ctrl\", \"t1\", 10, 11, 12),     check.names = FALSE )  # Example 1: extract numeric block using Excel letters, build headers from # the two rows above (they get collapsed like \"cond_t0\", \"ctrl_t1\", ...) m1 <- extract_data(     data = df,     top_row = 3,     bottom_row = 5,     left_col = \"A\",     right_col = \"D\",     feature_name_columns = c(\"feat_id\", \"feat_sym\"),     use_row_index = FALSE ) #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion m1 #>         X1 X2 cond_t0 cond_t1 #> g1_TP53 NA NA       1       4 #> g2_EGFR NA NA       2       5 #> g3_BAX  NA NA       3       6  # Example 2: same extraction but with numeric column indices and row index # prepended to ensure uniqueness of feature names m2 <- extract_data(     data = df,     top_row = 3,     bottom_row = 5,     left_col = 3,     right_col = 6,     feature_name_columns = c(\"feat_id\", \"feat_sym\"),     use_row_index = TRUE ) m2 #>           cond_t0 cond_t1 ctrl_t0 ctrl_t1 #> 1_g1_TP53       1       4       7      10 #> 2_g2_EGFR       2       5       8      11 #> 3_g3_BAX        3       6       9      12"},{"path":"https://csbg.github.io/SplineOmics/reference/extract_gene_sets.html","id":null,"dir":"Reference","previous_headings":"","what":"Download gene set annotations from Bioconductor organism databases — extract_gene_sets","title":"Download gene set annotations from Bioconductor organism databases — extract_gene_sets","text":"function extracts gene--ontology mappings specified Bioconductor organism annotation package (e.g., org.Hs.eg.db, org.Mm.eg.db) saves gene sets .tsv file standardized format. output includes mappings Gene Ontology (GO) Biological Process (BP), Molecular Function (MF), Cellular Component (CC), KEGG pathways. resulting file can used directly enrichment functions clusterProfiler::enricher() TERM2GENE.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/extract_gene_sets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download gene set annotations from Bioconductor organism databases — extract_gene_sets","text":"","code":"extract_gene_sets(   organism_db = \"org.Hs.eg.db\",   output_dir = here::here(),   filename = NULL )"},{"path":"https://csbg.github.io/SplineOmics/reference/extract_gene_sets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download gene set annotations from Bioconductor organism databases — extract_gene_sets","text":"organism_db character(1): string specifying Bioconductor organism annotation database use (e.g., \"org.Hs.eg.db\" human \"org.Mm.eg.db\" mouse). output_dir character(1): string specifying output directory .tsv file saved. Defaults current project directory defined ::(). filename character(1) | NULL: optional string specifying filename output file. NULL (default), filename generated automatically timestamp.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/extract_gene_sets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download gene set annotations from Bioconductor organism databases — extract_gene_sets","text":"data.frame gene set annotations three columns: DB Ontology/database source, e.g. \"GO_BP\", \"GO_MF\", \"GO_CC\", \"KEGG\" (available). Geneset Ontology term ID pathway ID (e.g. GO ID, KEGG ID). Gene Gene symbol (SYMBOL).","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/extract_gene_sets.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download gene set annotations from Bioconductor organism databases — extract_gene_sets","text":"TSV three columns: DB Ontology/database source, e.g., \"GO_BP\", \"GO_MF\", \"GO_CC\", \"KEGG\" (available). Geneset Ontology term ID pathway ID (e.g., GO ID, KEGG ID). Gene Gene symbol (SYMBOL). Note: org.*.eg.db packages longer include KEGG mappings; cases KEGG section empty. addition returning data.frame, function also writes table disk .tsv file specified output_dir.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/extract_gene_sets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download gene set annotations from Bioconductor organism databases — extract_gene_sets","text":"","code":"# Minimal real example (runs only if org package is installed) tmp <- tempdir() if (requireNamespace(\"org.Mm.eg.db\", quietly = TRUE) &&     requireNamespace(\"AnnotationDbi\", quietly = TRUE)) {     gs <- extract_gene_sets(         organism_db = \"org.Mm.eg.db\",         output_dir  = tmp,         filename    = \"mm_genesets.tsv\"     )     head(gs)     # The file path:     file.path(tmp, \"mm_genesets.tsv\") } #>  #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #>  #> Download complete! The file has been saved as: /tmp/Rtmpyq9FLq/mm_genesets.tsv #> [1] \"/tmp/Rtmpyq9FLq/mm_genesets.tsv\"  # If the organism package is not installed, you can still see the TSV format: tiny <- data.frame(     DB = c(\"GO_BP\", \"GO_MF\"),     Geneset = c(\"GO:0008150\", \"GO:0003674\"),     Gene = c(\"Trp53\", \"Egfr\"),     stringsAsFactors = FALSE ) utils::write.table(     tiny,     file = file.path(tmp, \"example_genesets.tsv\"),     sep = \"\\t\", row.names = FALSE, col.names = TRUE, quote = FALSE )"},{"path":"https://csbg.github.io/SplineOmics/reference/find_pvc.html","id":null,"dir":"Reference","previous_headings":"","what":"Find peaks and valleys in time-series omics data — find_pvc","title":"Find peaks and valleys in time-series omics data — find_pvc","text":"Identifies significant local peaks valleys (excursions) time-series omics data using Union-Intersection Test (UIT)-based approach. function wraps detection plotting steps, returning visualizations features least one excursion.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/find_pvc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find peaks and valleys in time-series omics data — find_pvc","text":"","code":"find_pvc(   splineomics,   alphas = 0.05,   padjust_method = \"BH\",   support = 1,   plot_info = list(y_axis_label = \"Value\", time_unit = \"min\", treatment_labels = NA,     treatment_timepoints = NA),   report_dir = here::here() )"},{"path":"https://csbg.github.io/SplineOmics/reference/find_pvc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find peaks and valleys in time-series omics data — find_pvc","text":"splineomics list: list containing preprocessed time-series input data. Must include following named elements: data: matrix Numeric matrix feature values. Rows features (e.g., genes proteins), columns samples (timepoint–replicate combinations). meta: data.frame Data frame sample metadata corresponding columns data. Must include \"Time\" column, typically columns describing conditions experimental factors. meta_batch_column: character(1) Character string giving column name meta identifies replicates batches. padjust_method: character(1) Character string specifying method p-value adjustment (e.g., \"BH\", \"bonferroni\"). alphas numeric(1) | list(numeric): single numeric value named list numeric thresholds used identify significant excursion points. single value provided (numeric scalar list length 1), threshold applied condition levels. named list provided, must contain one numeric value per condition level, names matching condition levels exactly. input normalized internally ensure consistent per-level access. padjust_method character(1): character string specifying method multiple testing correction. Defaults \"BH\" (Benjamini-Hochberg). support numeric(1): Minimum amount non-NA values timepoint influence PVC-test result. example, timepoints 10, 15, 20 support = 1, timepoint 15 given feature, timepoints 10, 15, 20 must least 1 non-NA value. one timepoints feature meet criterium, p-value feature timepoint 15 set NA. plot_info list: List optional elements used annotate spline plots: y_axis_label: character(1) single string y-axis label. time_unit: character(1) single string used x-axis label. treatment_labels: list(character(1)) named list single strings. treatment_timepoints: list(numeric(1)) named list single numeric values. treatment list present, must present. two lists must identical name sets. Allowed names values meta[[condition]] special name \"double_spline_plots\", generates treatment line plots limma category 2 3 (average difference conditions interaction condition time). Vertical dashed lines drawn given timepoints facets whose level name matches list name, labeled corresponding string (e.g., feeding, temperature shift). Example:   report_dir character(1): Character string specifying directory path HTML report output files saved.","code":"plot_info <- list(   y_axis_label = \"log2 expression\",   time_unit = \"hours\",   treatment_labels = list(     WT = \"Feeding\",     KO = \"Temperature shift\",     double_spline_plots = \"Treatment line\"   ),   treatment_timepoints = list(     WT = 12,     KO = 24,     double_spline_plots = 18   ) )"},{"path":"https://csbg.github.io/SplineOmics/reference/find_pvc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find peaks and valleys in time-series omics data — find_pvc","text":"named list ggplot objects, element corresponds feature least one detected peak valley. plot shows expression profiles across timepoints, highlights excursions red, annotates significant excursions significance stars.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/find_pvc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find peaks and valleys in time-series omics data — find_pvc","text":"peak valley timepoint whose expression value significantly different neighbors deviates direction: either significantly higher (peak) significantly lower (valley). Statistically, tested compound contrast limma: (T - T_prev) + (T - T_next) = 2T - T_prev - T_next. contrast power T outlier vs. neighbors direction. resulting p-value FDR-adjusted compared alpha. Validates inputs via check_splineomics_elements() InputControl. Detects local excursions using pvc_test(). Displays number total excursion hits found. Generates plots plot_pvc(), marking excursion significance chosen alpha.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/find_pvc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find peaks and valleys in time-series omics data — find_pvc","text":"","code":"set.seed(1)  ## Minimal toy with 4 timepoints, flat with a single mid spike (t=2). ## 2 conditions (WT/KO), 3 replicates each → 24 samples total.  ## Your original 8x6 toy matrix toy6 <- matrix(     c(         3, 5, 8, 12, 17, 23, # f1         23, 17, 13, 9, 6, 4, # f2         5, 3, 2, 2, 3, 5, # f3         1, 4, 9, 8, 4, 1, # f4         10, 10, 10, 10, 10, 10, # f5         2, 2, 2, 9, 12, 15, # f6         4, 5, 7, 10, 14, 19, # f7         12, 11, 9, 8, 9, 12 # f8     ),     nrow = 8, ncol = 6, byrow = TRUE,     dimnames = list(paste0(\"f\", 1:8), paste0(\"s\", 1:6)) )  ## Baselines per condition from toy6 (WT = cols 1:3, KO = cols 4:6) wt0 <- rowMeans(toy6[, 1:3]) ko0 <- rowMeans(toy6[, 4:6])  ## Make 4 flat timepoints; spike at one middle timepoint (default t=2) spike_tp <- 3 # 1=t0, 2=t1, 3=t2, 4=t3 spike_amp <- 3  flat4 <- function(base) cbind(base, base, base, base) # 8 x 4 wt <- flat4(wt0) wt[, spike_tp] <- wt[, spike_tp] + spike_amp ko <- flat4(ko0) # keep KO flat; spike KO too by adding the same line # ko[, spike_tp] <- ko[, spike_tp] + spike_amp  ## Create 3 replicates by adding tiny noise and bind WT then KO rep3 <- function(M, sd = 0.2) {     do.call(cbind, lapply(1:3, function(i) {         M + matrix(rnorm(length(M), sd = sd), nrow(M), ncol(M))     })) }  toy_data <- cbind(rep3(wt), rep3(ko)) rownames(toy_data) <- rownames(toy6) colnames(toy_data) <- paste0(\"s\", seq_len(ncol(toy_data))) # s1..s24  ## Matching meta: 2 conditions × 3 reps × 4 timepoints = 24 rows time <- 0:3 toy_meta <- data.frame(     Time = rep(time, times = 2 * 3),     condition = rep(c(\"WT\", \"KO\"), each = 3 * length(time)),     Replicate = rep(paste0(\"R\", 1:3), each = length(time), times = 2),     row.names = colnames(toy_data),     stringsAsFactors = FALSE )  # Minimal annotation & report info annotation <- data.frame(     id = rownames(toy_data),     row.names = rownames(toy_data) )  report_info <- list(     omics_data_type      = \"Transcriptomics\",     data_description     = \"Toy time-series (WT vs KO, t=0/1/2)\",     data_collection_date = \"2025-01-01\",     analyst_name         = \"Example\",     contact_info         = \"example@example.org\",     project_name         = \"find_pvc_toy\" )  splineomics <- list(     data = toy_data,     meta = toy_meta,     annotation = annotation,     condition = \"condition\",     meta_batch_column = \"Replicate\",     padjust_method = \"BH\",     report_info = report_info,     feature_name_columns = \"id\" )  plot_info <- list(     y_axis_label = \"log2 value\",     time_unit = \"hours\",     treatment_labels = NA,     treatment_timepoints = NA )  # Run with a lenient alpha to ensure toy detections; # write report to a temp dir to avoid clutter. res <- find_pvc(     splineomics = splineomics,     alphas = 0.05,     padjust_method = \"BH\",     support = 1,     plot_info = plot_info,     report_dir = tempdir() ) #> design matrix of interest not specified. Assuming a one-group experiment. #>  #> Detected 16 total pattern hits for condition level: WT #>  #> Summary by pattern type: #> p: 8, v: 0, b: 0, t: 8 #>  #> Breakdown by timepoint: #> 0: p=0; v=0; b=0; t=0 #> 1: p=0; v=0; b=0; t=8 #> 2: p=8; v=0; b=0; t=0 #> 3: p=0; v=0; b=0; t=0 #> design matrix of interest not specified. Assuming a one-group experiment. #>  #> Detected 0 total pattern hits for condition level: KO #>  #> Summary by pattern type: #> p: 0, v: 0, b: 0, t: 0 #>  #> Breakdown by timepoint: #> 0: p=0; v=0; b=0; t=0 #> 1: p=0; v=0; b=0; t=0 #> 2: p=0; v=0; b=0; t=0 #> 3: p=0; v=0; b=0; t=0 #>  #>  Info PVC report generation completed successfully. #>  Your HTML reports are located in the directory:  /tmp/Rtmpyq9FLq . #>  Please note that due to embedded files, the reports might be flagged as #>  harmful by other software. Rest assured that they provide no harm.  # Peek at one plot if available (WT first plot) if (!is.null(res[[\"WT\"]][[\"plots\"]]) &&     length(res[[\"WT\"]][[\"plots\"]]) > 0) {     print(res[[\"WT\"]][[\"plots\"]][[1]]) }"},{"path":"https://csbg.github.io/SplineOmics/reference/make_scatter_plot_html.html","id":null,"dir":"Reference","previous_headings":"","what":"make_scatter_plot_html() — make_scatter_plot_html","title":"make_scatter_plot_html() — make_scatter_plot_html","text":"function used make scatter plots raw data features. generates HTML report fashion functions SplineOmics package contains scatter plots.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/make_scatter_plot_html.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"make_scatter_plot_html() — make_scatter_plot_html","text":"","code":"make_scatter_plot_html(   data,   meta,   output_file = \"scatter_plots_base64.html\",   meta_replicate_column = NULL )"},{"path":"https://csbg.github.io/SplineOmics/reference/make_scatter_plot_html.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"make_scatter_plot_html() — make_scatter_plot_html","text":"data matrix features rows samples columns. Row names feature names. meta data frame meta information. Must contain numeric column \"Time\". output_file name HTML output file. meta_replicate_column Column name column meta contains info replicates, reactor.","code":""},{"path":[]},{"path":"https://csbg.github.io/SplineOmics/reference/make_scatter_plot_html.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"make_scatter_plot_html() — make_scatter_plot_html","text":"","code":"if (FALSE) { # \\dontrun{ # Example Data data <- matrix(rnorm(50), nrow = 5) meta <- data.frame(Time = seq(1, 10, length.out = 10))  # Generate HTML report (only if you want to test it) make_scatter_plot_html(data, meta, \"scatter_report.html\") } # }"},{"path":"https://csbg.github.io/SplineOmics/reference/make_scatter_plots_html.html","id":null,"dir":"Reference","previous_headings":"","what":"make_scatter_plots_html() — make_scatter_plots_html","title":"make_scatter_plots_html() — make_scatter_plots_html","text":"function used make scatter plots raw data features. generates HTML report fashion functions SplineOmics package contains scatter plots.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/make_scatter_plots_html.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"make_scatter_plots_html() — make_scatter_plots_html","text":"","code":"make_scatter_plots_html(   data,   meta,   output_file = \"scatter_report\",   meta_replicate_column = NULL,   features_per_file = 500 )"},{"path":"https://csbg.github.io/SplineOmics/reference/make_scatter_plots_html.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"make_scatter_plots_html() — make_scatter_plots_html","text":"data matrix features rows samples columns. Row names feature names. meta data frame meta information. Must contain numeric column \"Time\". output_file name HTML output file. meta_replicate_column Column name column meta contains info replicates, reactor. features_per_file Integer specifying many features (example proteins) plotted per file. Per default 500.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/make_scatter_plots_html.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"make_scatter_plots_html() — make_scatter_plots_html","text":"Invisibly returns NULL. function called side effects: renders one HTML reports current working directory, named paste0(output_file, \"_chunk_\", , \".html\") chunk index , prints progress messages generation.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/make_scatter_plots_html.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"make_scatter_plots_html() — make_scatter_plots_html","text":"","code":"# Create toy data: 3 features × 6 samples set.seed(123) toy_data <- matrix(   rnorm(18, mean = 5, sd = 2),   nrow = 3,   ncol = 6,   dimnames = list(     c(\"geneA\", \"geneB\", \"geneC\"),     paste0(\"sample\", 1:6)   ) )  # Meta data: must include a numeric Time column toy_meta <- data.frame(   Time = rep(c(0, 1, 2), each = 2),   Replicate = rep(c(\"R1\", \"R2\"), times = 3),   row.names = colnames(toy_data) )  # Write HTML reports into a temporary directory old_wd <- setwd(tempdir()) make_scatter_plots_html(   data = toy_data,   meta = toy_meta,   output_file = \"scatter_demo\",   meta_replicate_column = \"Replicate\",   features_per_file = 2 ) #> Total features: 3 #> Generating 2 HTML reports in chunks of 2 #> Warning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0. #> ℹ Please use the `linewidth` argument instead. #> ℹ The deprecated feature was likely used in the SplineOmics package. #>   Please report the issue at <https://github.com/csbg/SplineOmics/issues>. #>  #>  #> processing file: file235a167767d.Rmd #> 1/1 #> output file: file235a167767d.knit.md #> /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/x86_64/pandoc +RTS -K512m -RTS file235a167767d.knit.md --to html4 --from markdown+autolink_bare_uris+tex_math_single_backslash --output scatter_demo_chunk_1.html --lua-filter /home/thomas/.cache/R/renv/library/SplineOmics-2e6a5dbb/linux-ubuntu-jammy/R-4.5/x86_64-pc-linux-gnu/rmarkdown/rmarkdown/lua/pagebreak.lua --lua-filter /home/thomas/.cache/R/renv/library/SplineOmics-2e6a5dbb/linux-ubuntu-jammy/R-4.5/x86_64-pc-linux-gnu/rmarkdown/rmarkdown/lua/latex-div.lua --lua-filter /home/thomas/.cache/R/renv/library/SplineOmics-2e6a5dbb/linux-ubuntu-jammy/R-4.5/x86_64-pc-linux-gnu/rmarkdown/rmarkdown/lua/table-classes.lua --embed-resources --standalone --variable bs3=TRUE --section-divs --template /home/thomas/.cache/R/renv/library/SplineOmics-2e6a5dbb/linux-ubuntu-jammy/R-4.5/x86_64-pc-linux-gnu/rmarkdown/rmd/h/default.html --no-highlight --variable highlightjs=1 --variable theme=bootstrap --mathjax --variable 'mathjax-url=https://mathjax.rstudio.com/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML' --include-in-header /tmp/Rtmpheq4uA/rmarkdown-str235a3ba1f2e0.html  #>  #> Output created: scatter_demo_chunk_1.html #> [DONE] Rendered: scatter_demo_chunk_1.html #>  #>  #> processing file: file235a11161a5.Rmd #> 1/1 #> output file: file235a11161a5.knit.md #> /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/x86_64/pandoc +RTS -K512m -RTS file235a11161a5.knit.md --to html4 --from markdown+autolink_bare_uris+tex_math_single_backslash --output scatter_demo_chunk_2.html --lua-filter /home/thomas/.cache/R/renv/library/SplineOmics-2e6a5dbb/linux-ubuntu-jammy/R-4.5/x86_64-pc-linux-gnu/rmarkdown/rmarkdown/lua/pagebreak.lua --lua-filter /home/thomas/.cache/R/renv/library/SplineOmics-2e6a5dbb/linux-ubuntu-jammy/R-4.5/x86_64-pc-linux-gnu/rmarkdown/rmarkdown/lua/latex-div.lua --lua-filter /home/thomas/.cache/R/renv/library/SplineOmics-2e6a5dbb/linux-ubuntu-jammy/R-4.5/x86_64-pc-linux-gnu/rmarkdown/rmarkdown/lua/table-classes.lua --embed-resources --standalone --variable bs3=TRUE --section-divs --template /home/thomas/.cache/R/renv/library/SplineOmics-2e6a5dbb/linux-ubuntu-jammy/R-4.5/x86_64-pc-linux-gnu/rmarkdown/rmd/h/default.html --no-highlight --variable highlightjs=1 --variable theme=bootstrap --mathjax --variable 'mathjax-url=https://mathjax.rstudio.com/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML' --include-in-header /tmp/Rtmpheq4uA/rmarkdown-str235a3c5e7fc2.html  #>  #> Output created: scatter_demo_chunk_2.html #> [DONE] Rendered: scatter_demo_chunk_2.html #> All reports generated successfully. setwd(old_wd)  # Inspect generated HTML files in tempdir(): list.files(tempdir(), pattern = \"scatter_demo_chunk_.*html$\") #> [1] \"scatter_demo_chunk_1.html\" \"scatter_demo_chunk_2.html\""},{"path":"https://csbg.github.io/SplineOmics/reference/open_tutorial.html","id":null,"dir":"Reference","previous_headings":"","what":"open_tutorial() — open_tutorial","title":"open_tutorial() — open_tutorial","text":"function opens `tutorial.Rmd` file RStudio interactive use. Users can run code chunk step step.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/open_tutorial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"open_tutorial() — open_tutorial","text":"","code":"open_tutorial()"},{"path":"https://csbg.github.io/SplineOmics/reference/open_tutorial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"open_tutorial() — open_tutorial","text":"successful, opens `tutorial.Rmd` file RStudio user interact . `rstudioapi` installed available, tutorial file found, error thrown corresponding message.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/preprocess_rna_seq_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform essential preprocessing steps for raw RNA-seq counts — preprocess_rna_seq_data","title":"Perform essential preprocessing steps for raw RNA-seq counts — preprocess_rna_seq_data","text":"preprocess_rna_seq_data() function performs essential preprocessing steps raw RNA-seq counts. includes creating DGEList object, normalizing counts using default TMM (Trimmed Mean M-values) normalization via edgeR::calcNormFactors function, applying voom transformation limma package obtain log-transformed counts per million (logCPM) associated precision weights. require different normalization method, can supply custom normalization function.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/preprocess_rna_seq_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform essential preprocessing steps for raw RNA-seq counts — preprocess_rna_seq_data","text":"","code":"preprocess_rna_seq_data(splineomics, normalize_func = NULL, verbose = TRUE)"},{"path":"https://csbg.github.io/SplineOmics/reference/preprocess_rna_seq_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform essential preprocessing steps for raw RNA-seq counts — preprocess_rna_seq_data","text":"splineomics SplineOmics: S3 object class SplineOmics must contain following elements: data: matrix matrix omics dataset, feature names optionally row headers (genes rows, samples columns). meta: data.frame dataframe containing metadata corresponding data. dataframe must include 'Time' column column specified condition. design: character(1) character string representing design formula limma analysis (e.g., '~ 1 + Phase*X + Reactor'). spline_params: list list spline parameters used analysis. can include: spline_type: character(1) character string specifying type spline. Must either 'n' natural cubic splines 'b' B-splines. dof: integer(1) integer specifying degrees freedom. Required natural cubic splines B-splines. degree: integer(1) integer specifying degree spline (B-splines ). use_array_weights: logical(1) | NULL Boolean flag indicating robust fit strategy deal heteroscedasticity used . set NULL, handled implicitly based result Levene test. test significant least 10% features, robust strategy used. robust strategy uses function voomWithQualityWeights RNA-seq data instead normal voom function. , non-count-based data, function limma::arrayWeights used instead, combined setting robust argument TRUE limma::eBayes function. summary, strategy employed functions downweight samples higher variance. can necessary, linear models assumption homoscedasticity, means variance (approx.) across datapoints linear model fitted. violated, resulting p-values trusted (common statistical wisdom). bp_cfg: numeric() | NULL named numeric vector specifying parallelization configuration, expected names \"n_cores\" \"blas_threads\". controls many R worker processes (n_cores) many BLAS/OpenBLAS threads per process (blas_threads) used parallel computation. bp_cfg NULL, missing, required fields NA, n_cores blas_threads default 1. effectively disables parallelization avoids oversubscription CPU threads. normalize_func function | NULL: optional normalization function. provided, function used normalize DGEList object. provided, TMM normalization (via edgeR::calcNormFactors) used default. Must take input y : y <- edgeR::DGEList(counts = raw_counts) output y normalized counts. verbose logical(1): Boolean flag controlling display messages.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/preprocess_rna_seq_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform essential preprocessing steps for raw RNA-seq counts — preprocess_rna_seq_data","text":"updaed splineomics object, now containing voom object, includes log2-counts per million (logCPM) matrix observation-specific weights. Additionally, splineparams updated identified optimal dof based LOOCV, dof = 0L (auto-dof)","code":""},{"path":[]},{"path":"https://csbg.github.io/SplineOmics/reference/preprocess_rna_seq_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform essential preprocessing steps for raw RNA-seq counts — preprocess_rna_seq_data","text":"","code":"if (requireNamespace(\"edgeR\", quietly = TRUE) &&     requireNamespace(\"limma\", quietly = TRUE)) {     # Toy raw counts: 4 genes x 6 samples (2 conditions x 3 timepoints)     set.seed(1)     counts <- matrix(         rpois(24, lambda = 20),         nrow = 4, ncol = 6,         dimnames = list(paste0(\"g\", 1:4), paste0(\"s\", 1:6))     )      meta <- data.frame(         Time = c(0, 1, 2, 0, 1, 2),         condition = rep(c(\"WT\", \"KO\"), each = 3),         row.names = colnames(counts)     )      # Simple fixed-effects design (no random effects → uses limma::voom)     design_str <- \"~ 0 + Time + condition\"      # Spline params: natural cubic with fixed dof (avoid auto-dof path)     sp <- list(         spline_type = \"n\", dof = 3L, degree = NA_integer_     )      # Build minimal SplineOmics object     so <- list(         data = counts,         meta = meta,         design = design_str,         condition = \"condition\",         spline_params = sp,         use_array_weights = FALSE, # skip homoscedasticity auto-check         bp_cfg = list(n_cores = 1L, blas_threads = 1L)     )     class(so) <- \"SplineOmics\"      # Run preprocessing (TMM + voom)     so2 <- preprocess_rna_seq_data(so)      # Inspect the voom results (logCPM matrix dimensions)     if (!is.null(so2$rna_seq_data)) {         dim(so2$rna_seq_data$E)     } } #> Preprocessing RNA-seq data (normalization + voom)... #> Coefficients not estimable: X3  #> Warning: Partial NA coefficients for 4 probe(s) #> Info Finished preprocessing RNA-seq #>         data in 0.0 minutes #> [1] 4 6"},{"path":"https://csbg.github.io/SplineOmics/reference/print.SplineOmics.html","id":null,"dir":"Reference","previous_headings":"","what":"Print function for SplineOmics objects — print.SplineOmics","title":"Print function for SplineOmics objects — print.SplineOmics","text":"function provides summary print SplineOmics object, showing relevant information number features, samples, metadata, RNA-seq data, annotation, spline parameters.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/print.SplineOmics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print function for SplineOmics objects — print.SplineOmics","text":"","code":"# S3 method for class 'SplineOmics' print(x, ...)"},{"path":"https://csbg.github.io/SplineOmics/reference/print.SplineOmics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print function for SplineOmics objects — print.SplineOmics","text":"x SplineOmics: SplineOmics object created create_splineomics function. ... Additional arguments passed methods.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/print.SplineOmics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print function for SplineOmics objects — print.SplineOmics","text":"function return value. prints summary SplineOmics object.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/print.SplineOmics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print function for SplineOmics objects — print.SplineOmics","text":"function automatically called SplineOmics object printed. provides concise overview object's contents attributes, including dimensions data, available metadata, relevant information annotations spline parameters.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/print.SplineOmics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print function for SplineOmics objects — print.SplineOmics","text":"","code":"# Example: create and print a SplineOmics object set.seed(1) toy_data <- matrix(rnorm(12),     nrow = 3,     dimnames = list(paste0(\"gene\", 1:3), paste0(\"S\", 1:4)) ) toy_meta <- data.frame(     SampleID = colnames(toy_data),     Condition = c(\"Ctrl\", \"Ctrl\", \"Trt\", \"Trt\"),     stringsAsFactors = FALSE,     row.names = colnames(toy_data) )  so <- create_splineomics(     data = toy_data,     meta = toy_meta,     condition = toy_meta$Condition,     spline_params = list(spline_type = \"n\", dof = 3),     padjust_method = \"BH\" )  # The print method is automatically called: so #> data:SplineOmics Object #> ------------------- #> Number of features (rows): 3  #> Number of samples (columns): 4  #> Meta data columns: 2  #> First few meta columns: #>    SampleID Condition #> S1       S1      Ctrl #> S2       S2      Ctrl #> S3       S3       Trt #> Condition: Ctrl Ctrl Trt Trt  #> No RNA-seq data provided. #> No annotation provided. #> Spline parameters are set: #> $spline_type #> [1] \"n\" #>  #> $dof #> [1] 3 #>  #> P-value adjustment method: BH   # Or explicitly: print(so) #> data:SplineOmics Object #> ------------------- #> Number of features (rows): 3  #> Number of samples (columns): 4  #> Meta data columns: 2  #> First few meta columns: #>    SampleID Condition #> S1       S1      Ctrl #> S2       S2      Ctrl #> S3       S3       Trt #> Condition: Ctrl Ctrl Trt Trt  #> No RNA-seq data provided. #> No annotation provided. #> Spline parameters are set: #> $spline_type #> [1] \"n\" #>  #> $dof #> [1] 3 #>  #> P-value adjustment method: BH"},{"path":"https://csbg.github.io/SplineOmics/reference/run_gsea.html","id":null,"dir":"Reference","previous_headings":"","what":"run_gsea() — run_gsea","title":"run_gsea() — run_gsea","text":"function generates Gene Set Enrichment Analysis (GSEA) report based clustered hit levels, gene data, specified databases. accomplishes using R package clusterProfiler. output, receive list plot objects generated, HTML report embedded files containing enrichment results, dotplots visualizing enrichment.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/run_gsea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"run_gsea() — run_gsea","text":"","code":"run_gsea(   levels_clustered_hits,   databases,   report_info,   clusterProfiler_params = NA,   plot_titles = NA,   universe = NULL,   report_dir = here::here() )"},{"path":"https://csbg.github.io/SplineOmics/reference/run_gsea.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"run_gsea() — run_gsea","text":"levels_clustered_hits list dataframes contain clustered hits different levels. clustering_results variable collects output SplineOmics::cluster_hits() function, easy way get clustering_results$clustered_hits_levels. Every element list dataframe, three columns feature, cluster, gene. feature contains index number feature (example protein ), cluster integer specifying cluster feature placed, gene contains gene name. essential gene name matches gene names used databases used enrichment . databases dataframe three columns: DB containing database name, Geneset containng name geneset, Gene, containing name gene. dataframe can obtained specifying desired Enrichr databases downloading example .tsv file help SplineOmics::download_enrichr_databases function, loading .tsv file dataframe. essence, dataframe contains database info used gene set enrichment analysis clusterProfiler function. report_info list containing information report generation, omics_data_type data_description (list used report generating functions package). clusterProfiler_params list specifies parameters clusterProfiler, example: clusterProfiler_params <- list(   pvalueCutoff = 0.05,   pAdjustMethod = \"BH\",   minGSSize = 10,   maxGSSize = 500,   qvalueCutoff = 0.2 ) (parameters can controlled ). names equivalent argument names clusterProfiler, therefore, check documentation clusterProfiler description. argument specified, per default NULL, case default parameters selected, equivalent parameter values shown example definition . plot_titles Titles enrichment dotplots generated HTML report, default NA. universe Enrichment background data, default NULL. parameter clusterProfiler, documentation, please check documentation clusterProfiler R package. report_dir Directory report saved, default `::()`.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/run_gsea.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"run_gsea() — run_gsea","text":"list plot objects, generated GSEA report.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/run_limma_splines.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a limma spline analysis to identify significant features — run_limma_splines","title":"Perform a limma spline analysis to identify significant features — run_limma_splines","text":"core function, performs limma spline analysis identify significant time-dependent changes features (e.g., proteins) within omics time-series dataset. evaluates features within condition level levels comparing average differences interactions time condition.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/run_limma_splines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a limma spline analysis to identify significant features — run_limma_splines","text":"","code":"run_limma_splines(splineomics, verbose = TRUE)"},{"path":"https://csbg.github.io/SplineOmics/reference/run_limma_splines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a limma spline analysis to identify significant features — run_limma_splines","text":"splineomics SplineOmics: S3 object class SplineOmics contains following elements: data: matrix matrix omics dataset, feature names optionally row headers. rna_seq_data: list optional object containing preprocessed RNA-seq data, output limma::voom similar preprocessing pipeline. must provided input RNA-seq data. meta: data.frame dataframe containing metadata corresponding data, must include 'Time' column column specified condition. columns meta describe meta info, time condition, row corresponds column data, therefore, contains meta info data column. important meta data matched way. padjust_method: character(1) Statistical method used multiple hypothesis correction. Supported methods include included p.adjust() function R: \"holm\", \"hochberg\", \"hommel\", \"bonferroni\", \"BH\" \"fdr\", \"\", \"none\" correction. Default package \"BH\". design: character(1) character string representing limma design formula, \"~ 1 + Phase*Time + Reactor\" integrated design, \"~ 1 + Time + Reactor\" isolated design. dream_params: list | NULL named list NULL. NULL, can contain following named elements: - dof: integer(1) integer greater 1, specifying degrees freedom  dream topTable. set 0, best dof automatically found help leave-one--crossvalidation (loocv). dof lowest error loocv chosen. - KenwardRoger: logical(1) boolean indicating whether use Kenward-Roger approximation mixed models. Note random effects now directly specified design formula dream_params. mode: character(1) Specifies design formula constructed: either \"isolated\" \"integrated\". \"isolated\": level analyzed independently, using subset data corresponding level. design formula include condition variable, since one condition present subset. \"integrated\": levels analyzed together single model, using full dataset. design formula includes condition variable (optionally interaction terms ) results estimated jointly across levels. condition: character(1) character string specifying column name meta used define groups analysis. condition column contains levels experiment (control treatment). spline_params: list list spline parameters used analysis, including: spline_type: character(1)type spline (e.g., \"n\" natural splines \"b\" B-splines). dof: integer(1) Degrees freedom spline. set 0, SplineOmics automatically determines optimal number degrees freedom using leave-one-cross-validation selects value yields best predictive performance. degree: integer(1) Polynomial degree spline basis (B-splines ). use_array_weights: logical(1) Boolean flag indicating robust fit strategy deal heteroscedasticity used . set NULL, handeled implicitly based result Levene test. test significant least 10% features, robust strategy used. robust strategy uses function voomWithQualityWeights RNA-seq data instead normal voom function. , non-count-based data, function limma::arrayWeights used instead, combined setting robust argument TRUE limma::eBayes function. summary, strategy employed functions downweights samples higher variance. can neccessary, linear models assumption homoscedasticity, means variance (approx.) across datapoints linear model fitted. violated, resulting p-values trusted (common statistical wisdom). bp_cfg: numeric() named numeric vector specifying parallelization configuration, expected names \"n_cores\": integer(1) \"blas_threads\": integer(1). controls many R worker processes (n_cores) many BLAS/OpenBLAS threads per process (blas_threads) used parallel computation. bp_cfg NULL, missing, required fields NA, n_cores blas_threads default 1. effectively disables parallelization avoids oversubscription CPU threads. verbose logical(1): Boolean flag controlling display messages.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/run_limma_splines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a limma spline analysis to identify significant features — run_limma_splines","text":"SplineOmics object, updated list three elements: - time_effect: list list top tables level time effect. - avrg_diff_conditions: list list top tables comparison levels. comparison average difference values. - interaction_condition_time: list list top tables comparison levels. comparison interaction condition time.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/run_limma_splines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a limma spline analysis to identify significant features — run_limma_splines","text":"","code":"# Toy data: 4 features x 6 samples (two conditions, three time points) toy_data <- matrix(     c(         3, 5, 8, 12, 17, 23, # f1         23, 17, 13, 9, 6, 4, # f2         5, 3, 2, 2, 3, 5, # f3         1, 4, 9, 8, 4, 1, # f4         10, 10, 10, 10, 10, 10, # f5         2, 2, 2, 9, 12, 15, # f6         4, 5, 7, 10, 14, 19, # f7         12, 11, 9, 8, 9, 12 # f8     ),     nrow = 8, ncol = 6, byrow = TRUE,     dimnames = list(paste0(\"f\", 1:8), paste0(\"s\", 1:6)) )  toy_meta <- data.frame(     Time = c(0, 1, 2, 0, 1, 2),     condition = rep(c(\"WT\", \"KO\"), each = 3),     Replicate = rep(c(\"R1\", \"R2\"), each = 3),     row.names = colnames(toy_data),     stringsAsFactors = FALSE )  toy_annot <- data.frame(     feature_nr = 1:8,     gene = c(\"G1\", \"G2\", \"G3\", \"G4\"),     stringsAsFactors = FALSE )  # Stub limma \"top tables\" with minimal required fields # (feature_nr + adj.P.Val) tt_wt <- data.frame(feature_nr = 1:4, adj.P.Val = c(0.01, 0.20, 0.04, 0.60)) tt_ko <- data.frame(feature_nr = 1:4, adj.P.Val = c(0.50, 0.03, 0.70, 0.02)) tt_c2 <- data.frame(feature_nr = 1:4, adj.P.Val = c(0.04, 0.70, 0.80, 0.90)) tt_c3 <- data.frame(feature_nr = 1:4, adj.P.Val = c(0.20, 0.90, 0.03, 0.80))  design_str <- \"~ 1 + Time*condition\"  # Minimal spline parameters required by spline machinery spline_params <- list(     spline_type = \"n\", # natural cubic splines     dof = 1L # degrees of freedom for the spline basis )  toy_splineomics <- list(     data = toy_data,     meta = toy_meta,     annotation = toy_annot,     report_info = list(         omics_data_type = \"RNA-seq\",         data_description = \"toy example\",         data_collection_date = \"2025-01-01\",         analyst_name = \"Example\",         contact_info = \"example@example.org\",         project_name = \"ToyProject\"     ),     design = design_str,     mode = \"integrated\",     condition = \"condition\",     spline_params = spline_params,     meta_batch_column = NULL,     meta_batch2_column = NULL,     limma_splines_result = list(         time_effect                  = list(WT = tt_wt, KO = tt_ko),         avrg_diff_conditions         = tt_c2,         interaction_condition_time   = tt_c3     ),     feature_name_columns = \"gene\" ) class(toy_splineomics) <- \"SplineOmics\"  toy_splineomics <- run_limma_splines(toy_splineomics) #>  #> Ensure the design has no Condition*Time interaction for mode == 'isolated', and includes it for mode == 'integrated'. #> Running Levene's test both feature wise and sample wise to implicitly decide whether to use the limma array weights or not. #> No random effects: fitting model with lmFit()... #> Running feature wise Levene's test... #>  #> ------------------------------------------------------------ #> Fraction of features violating homoscedasticity #>     (p < 0.050): 0.00% (0/8 features) #> No violating features found. #> ------------------------------------------------------------ #> Running Levene's test across samples to detect inter-sample variance differences... #> Levene's test p-value (sample-level): 0.1425 #> ✅ No strong evidence of inter-sample variance differences. #> ------------------------------------------------------------ #> ✅ No strong evidence for heteroscedasticity. #> Proceeding WITHOUT using robust strategy. #> ------------------------------------------------------------ #>  #> Fitting global model... #> Info Finished limma spline analysis in 0.0 min"},{"path":"https://csbg.github.io/SplineOmics/reference/run_ora.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform over-representation analysis with the results from cluster_hits() — run_ora","title":"Perform over-representation analysis with the results from cluster_hits() — run_ora","text":"function generates overrepresentation analysis report based clustered hit levels, gene data, specified databases. accomplishes using R package clusterProfiler. output, receive list plot objects generated, HTML report embedded files containing enrichment results, dotplots visualizing enrichment.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/run_ora.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform over-representation analysis with the results from cluster_hits() — run_ora","text":"","code":"run_ora(   cluster_table,   databases,   report_info,   cluster_hits_report_name,   clusterProfiler_params = NA,   mapping_cfg = list(method = \"none\", from_species = NULL, to_species = NULL),   enrichGO_cfg = NULL,   universe = NULL,   report_dir = NULL,   verbose = TRUE )"},{"path":"https://csbg.github.io/SplineOmics/reference/run_ora.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform over-representation analysis with the results from cluster_hits() — run_ora","text":"cluster_table tibble: tibble containing one row per feature_nr metadata cluster assignments across analysis categories. includes: feature_nr: numeric(1) Numeric feature identifier. feature_name: character(1) Preferred feature name source data, falling back numeric ID none available. gene: character(1) Preferred gene symbol annotation cluster data. cluster_<cond1> / cluster_<cond2>: integer(1) Cluster assignments time-effect condition. cluster_cat2: character(1) (Optional) Combined cluster label category 2 hits form \"<cluster_<cond1>>_<cluster_<cond2>>\"; NA feature category 2 hit. cluster_cat3: character(1) (Optional) Combined cluster label category 3 hits form \"<cluster_<cond1>>_<cluster_<cond2>>\"; NA feature category 3 hit. category-specific cluster column, value NA indicates feature significant (hit) category. databases data.frame: data.frame defines gene set collections tested overrepresentation analysis. Must contain exactly three columns: DB character(1) database identifier (e.g., KEGG, GO_BP, Reactome). Geneset character(1) name gene set pathway within database. Gene character(1) gene identifier belonging gene set (e.g., gene symbol, Ensembl ID). row corresponds one (database, geneset, gene) association. gene may appear multiple gene sets. report_info list: list containing information report generation, omics_data_type data_description (list used report generating functions package). cluster_hits_report_name character(1): Single character string specifying name cluster_hits() function report, contains results used overprepresentation analysis . Must specified, otherwise, connection documented. clusterProfiler_params list | NULL: named list arguments passed directly corresponding functions clusterProfiler package. Typical entries include pvalueCutoff, pAdjustMethod, minGSSize, maxGSSize, qvalueCutoff. names must match argument names clusterProfiler; see clusterProfiler documentation details. NULL (default), standard clusterProfiler defaults used. mapping_cfg list | NULL: named list controls optional behavior automatically mapping gene symbols across species. useful input gene symbols (e.g., CHO cells) match species used enrichment databases (e.g., human mouse). default, mapping performed gene symbols used -. mapping desired, list must contain following three elements: method character(1): Mapping method use. One none (default; mapping), gprofiler (online, via g:Profiler API), orthogene (offline, installed). from_species character(1): Source species code, e.g. cgriseus CHO. Must match expected format selected tool. to_species character(1): Target species code, e.g. hsapiens human. must species used ORA database must also match expected format selected tool. enrichGO_cfg list | NULL: named list specifying configuration running GO enrichment Bioconductor's enrichGO. needed want perform GO Biological Process (BP), Molecular Function (MF), Cellular Component (CC) enrichment using Bioconductor's organism databases (e.g., org.Mm.eg.db mouse). list must named according GO ontology, e.g., \"GO_BP\", \"GO_MF\", \"GO_CC\". entry must provide: OrgDb: character(1) organism database, e.g., org.Mm.eg.db. keyType: character(1) gene identifier type, e.g., \"SYMBOL\". ontology: character(1) One \"BP\", \"MF\", \"CC\". enrichGO_cfg NULL (default), Bioconductor-based GO enrichment performed. enrichment runs enricher provided TERM2GENE mappings. universe character() | NULL: Enrichment background data. parameter clusterProfiler; details, please check documentation clusterProfiler R package. report_dir character(1): Character string specifying directory path HTML report output files saved. path specified, function runs HTML report generated. verbose logical(1): Boolean flag controlling display messages.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/run_ora.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform over-representation analysis with the results from cluster_hits() — run_ora","text":"nested, named list whose top-level elements correspond limma result categories. exact set elements depends mode: mode == \"isolated\" Two elements returned, one per condition level: time_effect_condition_<level1> time_effect_condition_<level2>. mode == \"integrated\" two time-effect elements , plus (significant hits chosen thresholds) two additional elements: avrg_diff_conditions interaction_condition_time. Note clusters interaction_condition_time \"combo-clusters\" made cluster membership feature condition 1 membership feature condition 2 (see also respective documentation function cluster_hits() cluster_table). example, report generated function entries 'time_effect_condition_control' 'time_effect_condition_treatment', section 'interaction_condition_time' contains entries 'cluster_4_2', first number (4) cluster condition control, second number (2) cluster condition treatment. top-level result category element list fields: dotplot ggplot object: dot plot -representation results (clusterProfiler) category. dotplot_nrows Numeric scalar giving suggested plot height (rows / relative units) prints nicely number enriched terms shown. ora_results nested list raw enrichment results, structured : cluster \\(\\rightarrow\\) database cluster category, sublist one entry per database used enrichment. value entry either NA (terms enriched cluster-database) data.frame returned clusterProfiler::enricher() enriched terms. summary, full shape :","code":"list(   time_effect_condition_<level1> = list(     dotplot        = ggplot,     dotplot_nrows  = numeric(1),     ora_results    = list(       <cluster_1> = list(<database_1> = NA|data.frame, ...),       <cluster_2> = list(<database_1> = NA|data.frame, ...),       ...     )   ),   time_effect_condition_<level2> = list(...),   avrg_diff_conditions          = list(...),   interaction_condition_time    = list(...) )"},{"path":[]},{"path":"https://csbg.github.io/SplineOmics/reference/run_ora.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform over-representation analysis with the results from cluster_hits() — run_ora","text":"","code":"{     set.seed(1)      # --- toy cluster table (two \"conditions\") ------------------------------     toy_genes <- paste0(\"G\", 1:8)     cluster_table <- tibble::tibble(         feature_nr    = 1:8,         feature_name  = paste0(\"feat_\", 1:8),         gene          = toy_genes,         cluster_condA = c(1, 1, 2, 2, NA, NA, 1, 2),         cluster_condB = c(NA, 1, NA, 2, 1, 2, 1, NA)     )      # --- toy TERM2GENE database -------------------------------------------     databases <- data.frame(         DB = rep(\"ToyDB\", 6),         Geneset = c(rep(\"SetA\", 3), rep(\"SetB\", 3)),         Gene = c(\"G1\", \"G2\", \"G7\", \"G3\", \"G4\", \"G6\"),         stringsAsFactors = FALSE     )      # --- minimal report info ----------------------------------------------     report_info <- list(         omics_data_type = \"TOY\",         data_description = \"Toy dataset for run_ora() example\",         data_collection_date = \"2025\",         analyst_name = \"Example Analyst\",         contact_info = \"analyst@example.org\",         project_name = \"ToyProject\"     )      # --- output directory (temp) -------------------------------------------     report_dir <- file.path(tempdir(), \"run_ora_demo\")     dir.create(report_dir, showWarnings = FALSE, recursive = TRUE)      # --- permissive params for tiny example --------------------------------     clusterProfiler_params <- list(         pvalueCutoff = 1,         qvalueCutoff = 1,         minGSSize    = 1,         maxGSSize    = 500     )      # --- run ORA -----------------------------------------------------------     res <- run_ora(         cluster_table            = cluster_table,         databases                = databases,         report_info              = report_info,         cluster_hits_report_name = \"cluster_hits_demo\",         clusterProfiler_params   = clusterProfiler_params,         report_dir               = report_dir,         verbose                  = TRUE     )      # see sections and files written     names(res)     list.files(report_dir, recursive = TRUE) } #>  #>  #>  #>  Running clusterProfiler for: cluster_condA #>  #> Cluster: cluster_1 #> Database: ToyDB #> Foreground genes:3 #> Foreground genes overlapping with database: 3 (100%) #>  #> Cluster: cluster_2 #> Database: ToyDB #> Foreground genes:3 #> Foreground genes overlapping with database: 2 (66.7%) #>  #>  #>  #>  Running clusterProfiler for: cluster_condB #>  #> Cluster: cluster_1 #> Database: ToyDB #> Foreground genes:3 #> Foreground genes overlapping with database: 2 (66.7%) #>  #> Cluster: cluster_2 #> Database: ToyDB #> Foreground genes:2 #> Foreground genes overlapping with database: 2 (100%) #>  #>  Info ORA analysis completed successfully. #>  Your HTML reports are located in the directory:  /tmp/Rtmpyq9FLq/run_ora_demo . #>  Please note that due to embedded files, the reports might be flagged as #>  harmful by other software. Rest assured that they provide no harm. #> [1] \"run_ora_report_TOY_30_10_2025-11_25_17.html\""},{"path":"https://csbg.github.io/SplineOmics/reference/screen_limma_hyperparams.html","id":null,"dir":"Reference","previous_headings":"","what":"screen_limma_hyperparams() — screen_limma_hyperparams","title":"screen_limma_hyperparams() — screen_limma_hyperparams","text":"function screens various combinations hyperparameters limma analysis, including designs, modes, degrees freedom. validates inputs, generates results combinations, plots outcomes. Finally, may also involved generating HTML report part larger analysis workflow.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/screen_limma_hyperparams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"screen_limma_hyperparams() — screen_limma_hyperparams","text":"","code":"screen_limma_hyperparams(   splineomics,   datas,   datas_descr,   metas,   designs,   modes,   spline_test_configs,   report_dir = here::here(),   adj_pthresholds = c(0.05),   rna_seq_datas = NULL,   time_unit = \"min\",   padjust_method = \"BH\" )"},{"path":"https://csbg.github.io/SplineOmics/reference/screen_limma_hyperparams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"screen_limma_hyperparams() — screen_limma_hyperparams","text":"splineomics S3 object class `SplineOmics` contains necessary data parameters analysis, including: condition: string specifying column name meta                           dataframe, contains levels separate                           experiment ('treatment' can condition,                           'drug' 'drug' can levels                           condition). report_info: meta_batch_column: character string specifying meta                                   batch column. meta_batch2_column: character string specifying second                                    meta batch column (limma function                                    removeBatchEffect supports maximum                                    two batch columns.) datas list matrices containing datasets analyzed. datas_descr description object data. metas list data frames containing metadata dataset `datas`. designs character vector design formulas limma analysis. modes character vector must length 'designs'. design formula, must specify either 'isolated' 'integrated'. Isolated means limma determines results level using data level. Integrated means limma determines results levels using full dataset (levels). spline_test_configs configuration object spline tests. report_dir non-empty string specifying report directory. adj_pthresholds numeric vector p-value thresholds significance determination. rna_seq_datas list RNA-seq data objects, voom object derived limma::voom function. time_unit character string specifying time unit label plots. padjust_method character string specifying method p-value adjustment.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/screen_limma_hyperparams.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"screen_limma_hyperparams() — screen_limma_hyperparams","text":"Returns list plots generated limma analysis results.         element list corresponds different combination         hyperparameters.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/update_splineomics.html","id":null,"dir":"Reference","previous_headings":"","what":"Update the variables in a SplineOmics object — update_splineomics","title":"Update the variables in a SplineOmics object — update_splineomics","text":"Updates SplineOmics object modifying existing fields adding new ones.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/update_splineomics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update the variables in a SplineOmics object — update_splineomics","text":"","code":"update_splineomics(splineomics, ...)"},{"path":"https://csbg.github.io/SplineOmics/reference/update_splineomics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update the variables in a SplineOmics object — update_splineomics","text":"splineomics SplineOmics: SplineOmics object updated. ... Named arguments new values fields updated added.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/update_splineomics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update the variables in a SplineOmics object — update_splineomics","text":"updated SplineOmics object.","code":""},{"path":"https://csbg.github.io/SplineOmics/reference/update_splineomics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update the variables in a SplineOmics object — update_splineomics","text":"","code":"set.seed(1) toy_data <- matrix(rnorm(12),     nrow = 3,     dimnames = list(paste0(\"gene\", 1:3), paste0(\"S\", 1:4)) ) toy_meta <- data.frame(     SampleID = colnames(toy_data),     Condition = c(\"Ctrl\", \"Ctrl\", \"Trt\", \"Trt\"),     stringsAsFactors = FALSE,     row.names = colnames(toy_data) )  so <- create_splineomics(     data = toy_data,     meta = toy_meta,     condition = toy_meta$Condition )  # Update the mode and add a new design matrix new_design <- model.matrix(~Condition, data = toy_meta) so_updated <- update_splineomics(so,     mode = \"integrated\",     design = new_design )  str(so_updated, max.level = 1) #> List of 16 #>  $ data                : num [1:3, 1:4] -0.626 0.184 -0.836 1.595 0.33 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>  $ rna_seq_data        : NULL #>  $ meta                :'data.frame':\t4 obs. of  2 variables: #>  $ condition           : chr [1:4] \"Ctrl\" \"Ctrl\" \"Trt\" \"Trt\" #>  $ annotation          : NULL #>  $ report_info         : NULL #>  $ meta_batch_column   : NULL #>  $ meta_batch2_column  : NULL #>  $ feature_name_columns: NULL #>  $ design              : num [1:4, 1:2] 1 1 1 1 0 0 1 1 #>   ..- attr(*, \"dimnames\")=List of 2 #>   ..- attr(*, \"assign\")= int [1:2] 0 1 #>   ..- attr(*, \"contrasts\")=List of 1 #>  $ use_array_weights   : logi FALSE #>  $ dream_params        : NULL #>  $ mode                : chr \"integrated\" #>  $ spline_params       : NULL #>  $ padjust_method      : chr \"BH\" #>  $ bp_cfg              : NULL #>  - attr(*, \"class\")= chr \"SplineOmics\""}]
